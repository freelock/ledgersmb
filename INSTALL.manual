LedgerSMB 1.3 (svn trunk) INSTALL.manual
=================================

This file documents manual installation methods for LedgerSMB 1.3.0.

Manual installation instructions have been moved to INSTALL.manual, and it does 
not cover checking out from svn or obtaining a tarball (we assume if you have 
this file, you are already past that point). 

The methods here are provided in case you get stuck or wish to install into a
non-standard environment.  Because we currently lack a Windows installer, users
of that platform are likely to need to follow the instructions here and adapt
as necessary (for example, if you are using IIS instead of Apache).


Apache Configuration
====================

LedgerSMB uses Apache-2.x, with mod_rewrite.


Create up an Apache conf file for the /path/to/ledgersmb13 location
----------------------------------------------------------

Configure ledgersmb-httpd.conf for apache, subsituting /path/to/ledgersmb13 with
the absolute path of your LedgerSMB installation.

The following sed command applies the repetitive substitution automatically.

$ sed -e "s|WORKING_DIR|$(pwd)|" ledgersmb-httpd.conf > ledgersmb-httpd-13.conf

You can also apply the substitution manually in your preferred text editor.


Install the Apache conf file
----------------------------

Move the apache conf file ledgersmb-httpd-13.conf to a location where it will be
picked up on apache restart. One way is to use an include statement in
/etc/apache2/httpd.conf (e.g. Include /etc/apache2/app/*.conf).

$ sudo mv ledgersmb-httpd-13.conf /etc/apache2/app/ledgersmb13.conf

Restart apache:

$ sudo /etc/init.d/apache2 restart
 * Stopping apache2 ...              [ ok ]
 * Starting apache2 ...              [ ok ]

The LedgerSMB-specific apache configuration can later be integrated into your
virtual host configuration as needed.


Verify that RewriteRule is working
----------------------------------

LedgerSMB 1.3 depends on mod_rewrite's ReWriteRule. Make sure that your Apache
has module or built-in support for mod_rewrite. You can test this if you are
unsure. Use an .htaccess file to check that mod_rewrite is working and that our
directory alias has been loaded by apache (this has to be done from the 
LedgerSMB directory):

$ echo -e 'RewriteEngine on\nRewriteRule ^(.*)$ http://www.google.com [R]' > .htaccess

$ wget -qO /dev/stdout http://localhost/ledgersmb | grep -c '<title>Google</title>'
1

If you saw the grep output "1" above, RewriteRule is working. Remove your
temporary .htaccess file:

$ rm .htaccess


Apache must be able to read and write to the templates/ directory
-------------------------------------------------------------------

Make sure the templates directory is read-writable by 
user:group apache:apache, or as appropriate for your distribution's Apache 
conventions.

Apache must also be able to read (but not write) ledgersmb13/ and its 
subdirectories.


Check And Satisfy Perl Dependencies
===================================

LedgerSMB depends on Perl-5.8, and several CPAN packages, which may or may not
be available as system packages for your linux distribution:

$ perl -v | grep v5.
This is perl, v5.8.8 built for i686-linux

Using the Makefile.PL requires Module::Install. If you do not have 
Module::Install loaded on your system, you can install it using:

# cpan Module::Install

Run Makefile.PL to check for LedgerSMB's Perl dependencies. The output should be
similar to the following:

$ perl Makefile.PL
include /path/to/ledgersmb13/inc/Module/Install.pm
include inc/Module/Install/Metadata.pm
include inc/Module/Install/Base.pm
include inc/Module/Install/AutoInstall.pm
include inc/Module/Install/Include.pm
include inc/Module/AutoInstall.pm
*** Module::AutoInstall version 1.03
*** Checking for Perl dependencies...
[Core Features]
- Test::More                ...loaded. (0.86)
- Test::Trap                ...loaded. (0.0.23)
- Test::Exception           ...loaded. (0.27)
- Data::Dumper              ...loaded. (2.121)
- Locale::Maketext          ...loaded. (1.13)
- DateTime                  ...loaded. (0.47)
- Locale::Maketext::Lexicon ...loaded. (0.77 >= 0.56)
- DBI                       ...loaded. (1.607 >= 1.00)
- MIME::Base64              ...loaded. (3.07)
- Digest::MD5               ...loaded. (2.38)
- HTML::Entities            ...loaded. (3.60)
- DBD::Pg                   ...loaded. (2.11.8)
- Math::BigFloat            ...loaded. (1.51)
- IO::File                  ...loaded. (1.13)
- Encode                    ...loaded. (2.12)
- Locale::Country           ...loaded. (2.07)
- Locale::Language          ...loaded. (2.07)
- Time::Local               ...loaded. (1.1901)
- Cwd                       ...loaded. (3.29)
- Config::Std               ...loaded. (0.0.4)
- MIME::Lite                ...loaded. (3.024)
- Template                  ...loaded. (2.20 >= 2.14)
- Error                     ...loaded. (0.17015)
- CGI::Simple               ...loaded. (1.108)
[POS module credit card processing support]
- Net::TCLink               ...loaded. (3.4)
[Experimental scripting engine]
- Parse::RecDescent         ...loaded. (1.94)
[Developer tool dependencies]
- Getopt::Long              ...loaded. (2.38)
- FileHandle                ...loaded. (2.01)
[PDF and Postscript output]
- Template::Plugin::Latex   ...loaded. (2.70)
[OpenOffice.org output]
- XML::Twig                 ...loaded. (3.32)
- OpenOffice::OODoc         ...loaded. (2.035)
[Excel output]
- Excel::Template::Plus     ...loaded. (0.03)
*** Module::AutoInstall configuration finished.
include inc/Module/Install/Makefile.pm
include inc/Module/Install/WriteAll.pm
Writing META.yml
include inc/Module/Install/Win32.pm
include inc/Module/Install/Can.pm
include inc/Module/Install/Fetch.pm
include inc/Module/Install/Build.pm
Writing Makefile for LedgerSMB

Use your distribution's CPAN or packaging tools to satisfy the dependencies
shown above.


Installing PostgreSQL Contrib Function Libraries (Not Optional)
===============================================================

LedgerSMB 1.3 depends on several function libraries distributed with PostgreSQL,
but typically not installed by default in most distributions.

Identify the system package containing the files tsearch2.sql, tablefunc.sql,
and pg_trgm.sql. Install that package, and locate the files on the filesystem.

If you install these on template1 then you only need to install these function
libraries once per postgresql cluster. They will be included in any new
database created from template1.

For the remainder of this INSTALL procedure, you will need to become user
postgres, or have the ability to log in to psql as your current user, or issue
the commands with: sudo -u postgres [cmd].


Install Tsearch2 Full Text indexing engine for PostgreSQL
---------------------------------------------------------

$ psql -U postgres -d template1 -f /usr/share/postgresql-8.3/contrib/tsearch2.sql


Install tablefunc.sql for PostgreSQL
------------------------------------

$ psql -U postgres -d template1 -f /usr/share/postgresql-8.3/contrib/tablefunc.sql


Install pg_trgm.sql for PostgreSQL
----------------------------------

$ psql -U postgres -d template1 -f /usr/share/postgresql-8.3/contrib/pg_trgm.sql


Configure a LedgerSMB Company Database
======================================

Create a LedgerSMB company database. The user and configuration information
are stored alongside the accounting data as of this writing:

$ createdb -U postgres -O ledgersmb mycompany


Install the plpgsql procedural language to the company database:

$ createlang plpgsql mycompany


Apply the SQL statements in sql/Pg-database.sql to
the company database:

$ psql -U postgres -d mycompany -f sql/Pg-database.sql


Apply the in-development SQL statements in the files sql/modules/ to
the company database, in exactly the order specified in sql/modules/LOADORDER:

$ psql -U postgres -d mycompany -f sql/modules/Drafts.sql
$ psql -U postgres -d mycompany -f sql/modules/chart.sql

etc.

Load a template Chart of Accounts
---------------------------------

The user is encouraged to create a custom chart of accounts, but for the
purposes of this INSTALL, load a template chart of accounts from the most
appropriate SQL statement file under sql/coa:

$ psql -U postgres -d mycompany -f sql/coa/us/chart/General.sql


Generate A Custom Roles SQL Statement File
------------------------------------------

Preprocess the sql/modules/Roles.sql file with sed, generating a custom SQL 
file:

$ sed -e 's/<?lsmb dbname ?>/mycompany/g' sql/modules/Roles.sql > mycompany_roles.sql


Apply the SQL statements in the sed-generated file mycompany_roles.sql to the
company database:

$ psql -U postgres -d mycompany -f mycompany_roles.sql


Create A Company User
=====================

There are a set of stored procedures for this.  The best way to do this (which 
creates the user, inserts into all applicable tables, etc.) is to run the 
following query from the psql prompt or PgAdmin:

SELECT admin__save_user(NULL, -- no user id yet, create new user
                        person__save(NULL, -- create new person
                                     3,  -- employee/user
                                     'First_name', -- First Name
                                     'Last_name', -- Last Name
                                      (select id from country 
                                        where short_name = 'US') -- example
                                    ),
                        'username', -- Username desired
                        '[yourpasswd]' -- password
                       );

If you want to create a few users, you can (for example):

PREPARE my_user_q (text, text, text, text, text)
AS SELECT admin__save_user(NULL,
                           person_save(NULL, 3, 
                                       $1, $2,
                                       (SELECT id FROM country
                                         where short_name = $3)
                                       ), 
                           $4, $5);

EXECUTE my_user_q('Tony', 'Davis', 'US', 'tony_d', 'Wferw324$');
EXECUTE my_user_q('David', 'Stewart', 'UK', 'dstewart', 'SDFEWRer43245(');

etc.....

Granting Roles to User
======================

You can now grant roles to a user using:

SELECT admin__add_user_to_role('username', 'role');

If you want to add a user to every role, you can:

SELECT admin__add_user_to_role('username', rolname) 
FROM pg_roles
WHERE rolname like 'lsmb_[dbname]';


