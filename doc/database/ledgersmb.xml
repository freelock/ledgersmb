<?xml version="1.0" encoding="UTF-8" ?>
<!-- $Header: /cvsroot/autodoc/autodoc/xml.tmpl,v 1.2 2006/05/16 19:01:27 rbt Exp $ -->

<book id="database.lsmb13test" xreflabel="lsmb13test database schema"><title>lsmb13test Model</title>




  <chapter id="public.schema"
           xreflabel="public">
    <title>Schema public</title>
    <para>standard public schema</para>


      <section id="public.table.ac-tax-form"
               xreflabel="public.ac_tax_form">
        <title id="public.table.ac-tax-form-title">
         Table:
         
         <structname>ac_tax_form</structname>
        </title>
 


        <para>
          <variablelist>
            <title>
              Structure of <structname>ac_tax_form</structname>
            </title>


            <varlistentry>
              <term><structfield>entry_id</structfield></term>
              <listitem><para>
                <type>integer</type>






                <literal>PRIMARY KEY</literal>












                <literal>REFERENCES</literal> <xref linkend="public.table.acc-trans"/>




              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>reportable</structfield></term>
              <listitem><para>
                <type>boolean</type>







              </para>

            </listitem>
          </varlistentry>

        </variablelist>










      </para>
    </section>

      <section id="public.table.acc-trans"
               xreflabel="public.acc_trans">
        <title id="public.table.acc-trans-title">
         Table:
         
         <structname>acc_trans</structname>
        </title>
 


        <para>
          <variablelist>
            <title>
              Structure of <structname>acc_trans</structname>
            </title>


            <varlistentry>
              <term><structfield>trans_id</structfield></term>
              <listitem><para>
                <type>integer</type>







                <literal>NOT NULL</literal>






                <literal>REFERENCES</literal> <xref linkend="public.table.transactions"/>


              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>chart_id</structfield></term>
              <listitem><para>
                <type>integer</type>







                <literal>NOT NULL</literal>






                <literal>REFERENCES</literal> <xref linkend="public.table.account"/>


              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>amount</structfield></term>
              <listitem><para>
                <type>numeric</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>transdate</structfield></term>
              <listitem><para>
                <type>date</type>





                <literal>DEFAULT (&apos;now&apos;::text)::date</literal>



              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>source</structfield></term>
              <listitem><para>
                <type>text</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>cleared</structfield></term>
              <listitem><para>
                <type>boolean</type>





                <literal>DEFAULT false</literal>



              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>fx_transaction</structfield></term>
              <listitem><para>
                <type>boolean</type>





                <literal>DEFAULT false</literal>



              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>project_id</structfield></term>
              <listitem><para>
                <type>integer</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>memo</structfield></term>
              <listitem><para>
                <type>text</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>invoice_id</structfield></term>
              <listitem><para>
                <type>integer</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>approved</structfield></term>
              <listitem><para>
                <type>boolean</type>





                <literal>DEFAULT true</literal>



              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>cleared_on</structfield></term>
              <listitem><para>
                <type>date</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>reconciled_on</structfield></term>
              <listitem><para>
                <type>date</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>voucher_id</structfield></term>
              <listitem><para>
                <type>integer</type>












                <literal>REFERENCES</literal> <xref linkend="public.table.voucher"/>


              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>entry_id</structfield></term>
              <listitem><para>
                <type>serial</type>


                <literal>PRIMARY KEY</literal>













              </para>

            </listitem>
          </varlistentry>

        </variablelist>





        <variablelist>
          <title>Indexes on acc_trans</title>

          <varlistentry>
            <term>acc_trans_chart_id_key</term>
            <listitem><para>chart_id</para></listitem>
          </varlistentry>



          <varlistentry>
            <term>acc_trans_source_key</term>
            <listitem><para>lower(source)</para></listitem>
          </varlistentry>



          <varlistentry>
            <term>acc_trans_trans_id_key</term>
            <listitem><para>trans_id</para></listitem>
          </varlistentry>



          <varlistentry>
            <term>acc_trans_transdate_key</term>
            <listitem><para>transdate</para></listitem>
          </varlistentry>



          <varlistentry>
            <term>acc_trans_voucher_id_idx</term>
            <listitem><para>voucher_id</para></listitem>
          </varlistentry>

        </variablelist>





        <itemizedlist>
          <title>
            Tables referencing ac_tax_form via Foreign Key Constraints
          </title>

          <listitem>
            <para>
              <xref linkend="public.table.ac-tax-form"/>
            </para>
          </listitem>



          <listitem>
            <para>
              <xref linkend="public.table.cr-report-line"/>
            </para>
          </listitem>



          <listitem>
            <para>
              <xref linkend="public.table.payment-links"/>
            </para>
          </listitem>



          <listitem>
            <para>
              <xref linkend="public.table.pending-reports"/>
            </para>
          </listitem>

        </itemizedlist>






      </para>
    </section>

      <section id="public.table.account"
               xreflabel="public.account">
        <title id="public.table.account-title">
         Table:
         
         <structname>account</structname>
        </title>
 


        <para>
          <variablelist>
            <title>
              Structure of <structname>account</structname>
            </title>


            <varlistentry>
              <term><structfield>id</structfield></term>
              <listitem><para>
                <type>serial</type>




                      <literal>UNIQUE</literal>




                <literal>NOT NULL</literal>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>accno</structfield></term>
              <listitem><para>
                <type>text</type>


                <literal>PRIMARY KEY</literal>













              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>description</structfield></term>
              <listitem><para>
                <type>text</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>category</structfield></term>
              <listitem><para>
                <type>character(1)</type>



                <literal>NOT NULL</literal>





              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>gifi_accno</structfield></term>
              <listitem><para>
                <type>text</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>heading</structfield></term>
              <listitem><para>
                <type>integer</type>







                <literal>NOT NULL</literal>






                <literal>REFERENCES</literal> <xref linkend="public.table.account-heading"/>


              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>contra</structfield></term>
              <listitem><para>
                <type>boolean</type>



                <literal>NOT NULL</literal>



                <literal>DEFAULT false</literal>



              </para>

            </listitem>
          </varlistentry>

        </variablelist>







        <itemizedlist>
          <title>
            Tables referencing acc_trans via Foreign Key Constraints
          </title>

          <listitem>
            <para>
              <xref linkend="public.table.acc-trans"/>
            </para>
          </listitem>



          <listitem>
            <para>
              <xref linkend="public.table.account-checkpoint"/>
            </para>
          </listitem>



          <listitem>
            <para>
              <xref linkend="public.table.account-link"/>
            </para>
          </listitem>



          <listitem>
            <para>
              <xref linkend="public.table.asset-class"/>
            </para>
          </listitem>



          <listitem>
            <para>
              <xref linkend="public.table.asset-item"/>
            </para>
          </listitem>



          <listitem>
            <para>
              <xref linkend="public.table.cr-coa-to-account"/>
            </para>
          </listitem>



          <listitem>
            <para>
              <xref linkend="public.table.cr-report"/>
            </para>
          </listitem>



          <listitem>
            <para>
              <xref linkend="public.table.customertax"/>
            </para>
          </listitem>



          <listitem>
            <para>
              <xref linkend="public.table.entity-credit-account"/>
            </para>
          </listitem>



          <listitem>
            <para>
              <xref linkend="public.table.partstax"/>
            </para>
          </listitem>



          <listitem>
            <para>
              <xref linkend="public.table.tax"/>
            </para>
          </listitem>



          <listitem>
            <para>
              <xref linkend="public.table.vendortax"/>
            </para>
          </listitem>

        </itemizedlist>






      </para>
    </section>

      <section id="public.table.account-checkpoint"
               xreflabel="public.account_checkpoint">
        <title id="public.table.account-checkpoint-title">
         Table:
         
         <structname>account_checkpoint</structname>
        </title>
 


        <para>
          <variablelist>
            <title>
              Structure of <structname>account_checkpoint</structname>
            </title>


            <varlistentry>
              <term><structfield>end_date</structfield></term>
              <listitem><para>
                <type>date</type>


                <literal>PRIMARY KEY</literal>













              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>account_id</structfield></term>
              <listitem><para>
                <type>integer</type>






                <literal>PRIMARY KEY</literal>












                <literal>REFERENCES</literal> <xref linkend="public.table.account"/>




              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>amount</structfield></term>
              <listitem><para>
                <type>numeric</type>



                <literal>NOT NULL</literal>





              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>id</structfield></term>
              <listitem><para>
                <type>serial</type>




                      <literal>UNIQUE</literal>




                <literal>NOT NULL</literal>







              </para>

            </listitem>
          </varlistentry>

        </variablelist>










      </para>
    </section>

      <section id="public.table.account-heading"
               xreflabel="public.account_heading">
        <title id="public.table.account-heading-title">
         Table:
         
         <structname>account_heading</structname>
        </title>
 


        <para>
          <variablelist>
            <title>
              Structure of <structname>account_heading</structname>
            </title>


            <varlistentry>
              <term><structfield>id</structfield></term>
              <listitem><para>
                <type>serial</type>




                      <literal>UNIQUE</literal>




                <literal>NOT NULL</literal>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>accno</structfield></term>
              <listitem><para>
                <type>text</type>


                <literal>PRIMARY KEY</literal>













              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>parent_id</structfield></term>
              <listitem><para>
                <type>integer</type>












                <literal>REFERENCES</literal> <xref linkend="public.table.account-heading"/>


              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>description</structfield></term>
              <listitem><para>
                <type>text</type>







              </para>

            </listitem>
          </varlistentry>

        </variablelist>







        <itemizedlist>
          <title>
            Tables referencing account via Foreign Key Constraints
          </title>

          <listitem>
            <para>
              <xref linkend="public.table.account"/>
            </para>
          </listitem>



          <listitem>
            <para>
              <xref linkend="public.table.account-heading"/>
            </para>
          </listitem>

        </itemizedlist>






      </para>
    </section>

      <section id="public.table.account-link"
               xreflabel="public.account_link">
        <title id="public.table.account-link-title">
         Table:
         
         <structname>account_link</structname>
        </title>
 


        <para>
          <variablelist>
            <title>
              Structure of <structname>account_link</structname>
            </title>


            <varlistentry>
              <term><structfield>account_id</structfield></term>
              <listitem><para>
                <type>integer</type>






                <literal>PRIMARY KEY</literal>












                <literal>REFERENCES</literal> <xref linkend="public.table.account"/>




              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>description</structfield></term>
              <listitem><para>
                <type>text</type>


                <literal>PRIMARY KEY</literal>













              </para>

            </listitem>
          </varlistentry>

        </variablelist>










      </para>
    </section>

      <section id="public.table.ap"
               xreflabel="public.ap">
        <title id="public.table.ap-title">
         Table:
         
         <structname>ap</structname>
        </title>
 


        <para>
          <variablelist>
            <title>
              Structure of <structname>ap</structname>
            </title>


            <varlistentry>
              <term><structfield>id</structfield></term>
              <listitem><para>
                <type>integer</type>






                <literal>PRIMARY KEY</literal>









                <literal>DEFAULT nextval(&apos;id&apos;::regclass)</literal>




                <literal>REFERENCES</literal> <xref linkend="public.table.transactions"/>




              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>invnumber</structfield></term>
              <listitem><para>
                <type>text</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>transdate</structfield></term>
              <listitem><para>
                <type>date</type>





                <literal>DEFAULT (&apos;now&apos;::text)::date</literal>



              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>entity_id</structfield></term>
              <listitem><para>
                <type>integer</type>












                <literal>REFERENCES</literal> <xref linkend="public.table.entity"/>


              </para>

              <para>
                 Used to be customer_id, but customer is now metadata. You need to push to entity 
              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>taxincluded</structfield></term>
              <listitem><para>
                <type>boolean</type>





                <literal>DEFAULT false</literal>



              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>amount</structfield></term>
              <listitem><para>
                <type>numeric</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>netamount</structfield></term>
              <listitem><para>
                <type>numeric</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>paid</structfield></term>
              <listitem><para>
                <type>numeric</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>datepaid</structfield></term>
              <listitem><para>
                <type>date</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>duedate</structfield></term>
              <listitem><para>
                <type>date</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>invoice</structfield></term>
              <listitem><para>
                <type>boolean</type>





                <literal>DEFAULT false</literal>



              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>ordnumber</structfield></term>
              <listitem><para>
                <type>text</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>curr</structfield></term>
              <listitem><para>
                <type>character(3)</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>notes</structfield></term>
              <listitem><para>
                <type>text</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>person_id</structfield></term>
              <listitem><para>
                <type>integer</type>












                <literal>REFERENCES</literal> <xref linkend="public.table.entity-employee"/>


              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>till</structfield></term>
              <listitem><para>
                <type>character varying(20)</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>quonumber</structfield></term>
              <listitem><para>
                <type>text</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>intnotes</structfield></term>
              <listitem><para>
                <type>text</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>department_id</structfield></term>
              <listitem><para>
                <type>integer</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>shipvia</structfield></term>
              <listitem><para>
                <type>text</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>language_code</structfield></term>
              <listitem><para>
                <type>character varying(6)</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>ponumber</structfield></term>
              <listitem><para>
                <type>text</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>shippingpoint</structfield></term>
              <listitem><para>
                <type>text</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>on_hold</structfield></term>
              <listitem><para>
                <type>boolean</type>





                <literal>DEFAULT false</literal>



              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>approved</structfield></term>
              <listitem><para>
                <type>boolean</type>





                <literal>DEFAULT true</literal>



              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>reverse</structfield></term>
              <listitem><para>
                <type>boolean</type>





                <literal>DEFAULT false</literal>



              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>terms</structfield></term>
              <listitem><para>
                <type>smallint</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>description</structfield></term>
              <listitem><para>
                <type>text</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>force_closed</structfield></term>
              <listitem><para>
                <type>boolean</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>entity_credit_account</structfield></term>
              <listitem><para>
                <type>integer</type>







                <literal>NOT NULL</literal>






                <literal>REFERENCES</literal> <xref linkend="public.table.entity-credit-account"/>


              </para>

            </listitem>
          </varlistentry>

        </variablelist>



        <variablelist>
          <title>Constraints on ap</title>

          <varlistentry>
            <term>ap_check</term>
            <listitem><para>CHECK ((((amount IS NULL) AND (curr IS NULL)) OR ((amount IS NOT NULL) AND (curr IS NOT NULL))))</para></listitem>
          </varlistentry>

        </variablelist>





        <variablelist>
          <title>Indexes on ap</title>

          <varlistentry>
            <term>ap_id_key</term>
            <listitem><para>id</para></listitem>
          </varlistentry>



          <varlistentry>
            <term>ap_invnumber_key</term>
            <listitem><para>invnumber</para></listitem>
          </varlistentry>



          <varlistentry>
            <term>ap_ordnumber_key</term>
            <listitem><para>ordnumber</para></listitem>
          </varlistentry>



          <varlistentry>
            <term>ap_quonumber_key</term>
            <listitem><para>quonumber</para></listitem>
          </varlistentry>



          <varlistentry>
            <term>ap_transdate_key</term>
            <listitem><para>transdate</para></listitem>
          </varlistentry>

        </variablelist>





        <itemizedlist>
          <title>
            Tables referencing asset_item via Foreign Key Constraints
          </title>

          <listitem>
            <para>
              <xref linkend="public.table.asset-item"/>
            </para>
          </listitem>

        </itemizedlist>






      </para>
    </section>

      <section id="public.table.ar"
               xreflabel="public.ar">
        <title id="public.table.ar-title">
         Table:
         
         <structname>ar</structname>
        </title>
 


        <para>
          <variablelist>
            <title>
              Structure of <structname>ar</structname>
            </title>


            <varlistentry>
              <term><structfield>id</structfield></term>
              <listitem><para>
                <type>integer</type>






                <literal>PRIMARY KEY</literal>









                <literal>DEFAULT nextval(&apos;id&apos;::regclass)</literal>




                <literal>REFERENCES</literal> <xref linkend="public.table.transactions"/>




              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>invnumber</structfield></term>
              <listitem><para>
                <type>text</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>transdate</structfield></term>
              <listitem><para>
                <type>date</type>





                <literal>DEFAULT (&apos;now&apos;::text)::date</literal>



              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>entity_id</structfield></term>
              <listitem><para>
                <type>integer</type>












                <literal>REFERENCES</literal> <xref linkend="public.table.entity"/>


              </para>

              <para>
                 Used to be customer_id, but customer is now metadata. You need to push to entity 
              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>taxincluded</structfield></term>
              <listitem><para>
                <type>boolean</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>amount</structfield></term>
              <listitem><para>
                <type>numeric</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>netamount</structfield></term>
              <listitem><para>
                <type>numeric</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>paid</structfield></term>
              <listitem><para>
                <type>numeric</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>datepaid</structfield></term>
              <listitem><para>
                <type>date</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>duedate</structfield></term>
              <listitem><para>
                <type>date</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>invoice</structfield></term>
              <listitem><para>
                <type>boolean</type>





                <literal>DEFAULT false</literal>



              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>shippingpoint</structfield></term>
              <listitem><para>
                <type>text</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>terms</structfield></term>
              <listitem><para>
                <type>smallint</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>notes</structfield></term>
              <listitem><para>
                <type>text</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>curr</structfield></term>
              <listitem><para>
                <type>character(3)</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>ordnumber</structfield></term>
              <listitem><para>
                <type>text</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>person_id</structfield></term>
              <listitem><para>
                <type>integer</type>












                <literal>REFERENCES</literal> <xref linkend="public.table.entity-employee"/>


              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>till</structfield></term>
              <listitem><para>
                <type>character varying(20)</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>quonumber</structfield></term>
              <listitem><para>
                <type>text</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>intnotes</structfield></term>
              <listitem><para>
                <type>text</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>department_id</structfield></term>
              <listitem><para>
                <type>integer</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>shipvia</structfield></term>
              <listitem><para>
                <type>text</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>language_code</structfield></term>
              <listitem><para>
                <type>character varying(6)</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>ponumber</structfield></term>
              <listitem><para>
                <type>text</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>on_hold</structfield></term>
              <listitem><para>
                <type>boolean</type>





                <literal>DEFAULT false</literal>



              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>reverse</structfield></term>
              <listitem><para>
                <type>boolean</type>





                <literal>DEFAULT false</literal>



              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>approved</structfield></term>
              <listitem><para>
                <type>boolean</type>





                <literal>DEFAULT true</literal>



              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>entity_credit_account</structfield></term>
              <listitem><para>
                <type>integer</type>







                <literal>NOT NULL</literal>






                <literal>REFERENCES</literal> <xref linkend="public.table.entity-credit-account"/>


              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>force_closed</structfield></term>
              <listitem><para>
                <type>boolean</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>description</structfield></term>
              <listitem><para>
                <type>text</type>







              </para>

            </listitem>
          </varlistentry>

        </variablelist>



        <variablelist>
          <title>Constraints on ar</title>

          <varlistentry>
            <term>ar_check</term>
            <listitem><para>CHECK ((((amount IS NULL) AND (curr IS NULL)) OR ((amount IS NOT NULL) AND (curr IS NOT NULL))))</para></listitem>
          </varlistentry>

        </variablelist>





        <variablelist>
          <title>Indexes on ar</title>

          <varlistentry>
            <term>ar_id_key</term>
            <listitem><para>id</para></listitem>
          </varlistentry>



          <varlistentry>
            <term>ar_invnumber_key</term>
            <listitem><para>invnumber</para></listitem>
          </varlistentry>



          <varlistentry>
            <term>ar_ordnumber_key</term>
            <listitem><para>ordnumber</para></listitem>
          </varlistentry>



          <varlistentry>
            <term>ar_quonumber_key</term>
            <listitem><para>quonumber</para></listitem>
          </varlistentry>



          <varlistentry>
            <term>ar_transdate_key</term>
            <listitem><para>transdate</para></listitem>
          </varlistentry>

        </variablelist>








      </para>
    </section>

      <section id="public.table.assembly"
               xreflabel="public.assembly">
        <title id="public.table.assembly-title">
         Table:
         
         <structname>assembly</structname>
        </title>
 


        <para>
          <variablelist>
            <title>
              Structure of <structname>assembly</structname>
            </title>


            <varlistentry>
              <term><structfield>id</structfield></term>
              <listitem><para>
                <type>integer</type>


                <literal>PRIMARY KEY</literal>













              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>parts_id</structfield></term>
              <listitem><para>
                <type>integer</type>


                <literal>PRIMARY KEY</literal>













              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>qty</structfield></term>
              <listitem><para>
                <type>numeric</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>bom</structfield></term>
              <listitem><para>
                <type>boolean</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>adj</structfield></term>
              <listitem><para>
                <type>boolean</type>







              </para>

            </listitem>
          </varlistentry>

        </variablelist>





        <variablelist>
          <title>Indexes on assembly</title>

          <varlistentry>
            <term>assembly_id_key</term>
            <listitem><para>id</para></listitem>
          </varlistentry>

        </variablelist>








      </para>
    </section>

      <section id="public.table.asset-class"
               xreflabel="public.asset_class">
        <title id="public.table.asset-class-title">
         Table:
         
         <structname>asset_class</structname>
        </title>
 


        <para>
          <variablelist>
            <title>
              Structure of <structname>asset_class</structname>
            </title>


            <varlistentry>
              <term><structfield>id</structfield></term>
              <listitem><para>
                <type>serial</type>




                      <literal>UNIQUE</literal>




                <literal>NOT NULL</literal>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>label</structfield></term>
              <listitem><para>
                <type>text</type>


                <literal>PRIMARY KEY</literal>













              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>asset_account_id</structfield></term>
              <listitem><para>
                <type>integer</type>












                <literal>REFERENCES</literal> <xref linkend="public.table.account"/>


              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>dep_account_id</structfield></term>
              <listitem><para>
                <type>integer</type>












                <literal>REFERENCES</literal> <xref linkend="public.table.account"/>


              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>method</structfield></term>
              <listitem><para>
                <type>integer</type>












                <literal>REFERENCES</literal> <xref linkend="public.table.asset-dep-method"/>


              </para>

            </listitem>
          </varlistentry>

        </variablelist>







        <itemizedlist>
          <title>
            Tables referencing asset_item via Foreign Key Constraints
          </title>

          <listitem>
            <para>
              <xref linkend="public.table.asset-item"/>
            </para>
          </listitem>



          <listitem>
            <para>
              <xref linkend="public.table.asset-report"/>
            </para>
          </listitem>

        </itemizedlist>






      </para>
    </section>

      <section id="public.table.asset-dep-method"
               xreflabel="public.asset_dep_method">
        <title id="public.table.asset-dep-method-title">
         Table:
         
         <structname>asset_dep_method</structname>
        </title>
 


        <para>
          <variablelist>
            <title>
              Structure of <structname>asset_dep_method</structname>
            </title>


            <varlistentry>
              <term><structfield>id</structfield></term>
              <listitem><para>
                <type>serial</type>




                      <literal>UNIQUE</literal>




                <literal>NOT NULL</literal>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>method</structfield></term>
              <listitem><para>
                <type>text</type>


                <literal>PRIMARY KEY</literal>













              </para>

              <para>
                 These are keyed to specific stored procedures.  Currently only &quot;straight_line&quot; is supported
              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>sproc</structfield></term>
              <listitem><para>
                <type>text</type>




                      <literal>UNIQUE</literal>




                <literal>NOT NULL</literal>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>unit_label</structfield></term>
              <listitem><para>
                <type>text</type>



                <literal>NOT NULL</literal>





              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>short_name</structfield></term>
              <listitem><para>
                <type>text</type>




                      <literal>UNIQUE</literal>




                <literal>NOT NULL</literal>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>unit_class</structfield></term>
              <listitem><para>
                <type>integer</type>







                <literal>NOT NULL</literal>






                <literal>REFERENCES</literal> <xref linkend="public.table.asset-unit-class"/>


              </para>

            </listitem>
          </varlistentry>

        </variablelist>







        <itemizedlist>
          <title>
            Tables referencing asset_class via Foreign Key Constraints
          </title>

          <listitem>
            <para>
              <xref linkend="public.table.asset-class"/>
            </para>
          </listitem>

        </itemizedlist>






      </para>
    </section>

      <section id="public.table.asset-item"
               xreflabel="public.asset_item">
        <title id="public.table.asset-item-title">
         Table:
         
         <structname>asset_item</structname>
        </title>
 


        <para>
          <variablelist>
            <title>
              Structure of <structname>asset_item</structname>
            </title>


            <varlistentry>
              <term><structfield>id</structfield></term>
              <listitem><para>
                <type>serial</type>




                      <literal>UNIQUE</literal>




                <literal>NOT NULL</literal>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>description</structfield></term>
              <listitem><para>
                <type>text</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>tag</structfield></term>
              <listitem><para>
                <type>text</type>


                <literal>PRIMARY KEY</literal>













              </para>

              <para>
                 This can be plugged into other routines to generate it automatically via ALTER TABLE .... SET DEFAULT.....
              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>purchase_value</structfield></term>
              <listitem><para>
                <type>numeric</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>salvage_value</structfield></term>
              <listitem><para>
                <type>numeric</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>usable_life</structfield></term>
              <listitem><para>
                <type>numeric</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>purchase_date</structfield></term>
              <listitem><para>
                <type>date</type>



                <literal>NOT NULL</literal>





              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>start_depreciation</structfield></term>
              <listitem><para>
                <type>date</type>



                <literal>NOT NULL</literal>





              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>location_id</structfield></term>
              <listitem><para>
                <type>integer</type>












                <literal>REFERENCES</literal> <xref linkend="public.table.warehouse"/>


              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>department_id</structfield></term>
              <listitem><para>
                <type>integer</type>












                <literal>REFERENCES</literal> <xref linkend="public.table.department"/>


              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>invoice_id</structfield></term>
              <listitem><para>
                <type>integer</type>












                <literal>REFERENCES</literal> <xref linkend="public.table.ap"/>


              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>asset_account_id</structfield></term>
              <listitem><para>
                <type>integer</type>












                <literal>REFERENCES</literal> <xref linkend="public.table.account"/>


              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>dep_account_id</structfield></term>
              <listitem><para>
                <type>integer</type>












                <literal>REFERENCES</literal> <xref linkend="public.table.account"/>


              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>exp_account_id</structfield></term>
              <listitem><para>
                <type>integer</type>












                <literal>REFERENCES</literal> <xref linkend="public.table.account"/>


              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>asset_class_id</structfield></term>
              <listitem><para>
                <type>integer</type>












                <literal>REFERENCES</literal> <xref linkend="public.table.asset-class"/>


              </para>

            </listitem>
          </varlistentry>

        </variablelist>







        <itemizedlist>
          <title>
            Tables referencing asset_note via Foreign Key Constraints
          </title>

          <listitem>
            <para>
              <xref linkend="public.table.asset-note"/>
            </para>
          </listitem>



          <listitem>
            <para>
              <xref linkend="public.table.asset-report-line"/>
            </para>
          </listitem>

        </itemizedlist>






      </para>
    </section>

      <section id="public.table.asset-note"
               xreflabel="public.asset_note">
        <title id="public.table.asset-note-title">
         Table:
         
         <structname>asset_note</structname>
        </title>
 


        <para>
          <variablelist>
            <title>
              Structure of <structname>asset_note</structname>
            </title>


            <varlistentry>
              <term><structfield>id</structfield></term>
              <listitem><para>
                <type>integer</type>



                <literal>NOT NULL</literal>



                <literal>DEFAULT nextval(&apos;note_id_seq&apos;::regclass)</literal>



              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>note_class</structfield></term>
              <listitem><para>
                <type>integer</type>



                <literal>NOT NULL</literal>



                <literal>DEFAULT 4</literal>



              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>note</structfield></term>
              <listitem><para>
                <type>text</type>



                <literal>NOT NULL</literal>





              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>vector</structfield></term>
              <listitem><para>
                <type>tsvector</type>



                <literal>NOT NULL</literal>





              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>created</structfield></term>
              <listitem><para>
                <type>timestamp without time zone</type>



                <literal>NOT NULL</literal>



                <literal>DEFAULT now()</literal>



              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>created_by</structfield></term>
              <listitem><para>
                <type>text</type>





                <literal>DEFAULT &quot;session_user&quot;()</literal>



              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>ref_key</structfield></term>
              <listitem><para>
                <type>integer</type>







                <literal>NOT NULL</literal>






                <literal>REFERENCES</literal> <xref linkend="public.table.asset-item"/>


              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>subject</structfield></term>
              <listitem><para>
                <type>text</type>







              </para>

            </listitem>
          </varlistentry>

        </variablelist>



        <variablelist>
          <title>Constraints on asset_note</title>

          <varlistentry>
            <term>asset_note_note_class_check</term>
            <listitem><para>CHECK ((note_class = 4))</para></listitem>
          </varlistentry>

        </variablelist>










      </para>
    </section>

      <section id="public.table.asset-report"
               xreflabel="public.asset_report">
        <title id="public.table.asset-report-title">
         Table:
         
         <structname>asset_report</structname>
        </title>
 


        <para>
          <variablelist>
            <title>
              Structure of <structname>asset_report</structname>
            </title>


            <varlistentry>
              <term><structfield>id</structfield></term>
              <listitem><para>
                <type>serial</type>


                <literal>PRIMARY KEY</literal>













              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>report_date</structfield></term>
              <listitem><para>
                <type>date</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>gl_id</structfield></term>
              <listitem><para>
                <type>bigint</type>








                      <literal>UNIQUE</literal>









                <literal>REFERENCES</literal> <xref linkend="public.table.gl"/>




              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>asset_class</structfield></term>
              <listitem><para>
                <type>bigint</type>












                <literal>REFERENCES</literal> <xref linkend="public.table.asset-class"/>


              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>report_class</structfield></term>
              <listitem><para>
                <type>integer</type>












                <literal>REFERENCES</literal> <xref linkend="public.table.asset-report-class"/>


              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>entered_by</structfield></term>
              <listitem><para>
                <type>bigint</type>







                <literal>NOT NULL</literal>






                <literal>REFERENCES</literal> <xref linkend="public.table.entity"/>


              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>approved_by</structfield></term>
              <listitem><para>
                <type>bigint</type>












                <literal>REFERENCES</literal> <xref linkend="public.table.entity"/>


              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>entered_at</structfield></term>
              <listitem><para>
                <type>timestamp without time zone</type>





                <literal>DEFAULT now()</literal>



              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>approved_at</structfield></term>
              <listitem><para>
                <type>timestamp without time zone</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>depreciated_qty</structfield></term>
              <listitem><para>
                <type>numeric</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>dont_approve</structfield></term>
              <listitem><para>
                <type>boolean</type>





                <literal>DEFAULT false</literal>



              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>submitted</structfield></term>
              <listitem><para>
                <type>boolean</type>



                <literal>NOT NULL</literal>



                <literal>DEFAULT false</literal>



              </para>

            </listitem>
          </varlistentry>

        </variablelist>







        <itemizedlist>
          <title>
            Tables referencing asset_report_line via Foreign Key Constraints
          </title>

          <listitem>
            <para>
              <xref linkend="public.table.asset-report-line"/>
            </para>
          </listitem>

        </itemizedlist>






      </para>
    </section>

      <section id="public.table.asset-report-class"
               xreflabel="public.asset_report_class">
        <title id="public.table.asset-report-class-title">
         Table:
         
         <structname>asset_report_class</structname>
        </title>
 


        <para>
          <variablelist>
            <title>
              Structure of <structname>asset_report_class</structname>
            </title>


            <varlistentry>
              <term><structfield>id</structfield></term>
              <listitem><para>
                <type>integer</type>




                      <literal>UNIQUE</literal>




                <literal>NOT NULL</literal>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>class</structfield></term>
              <listitem><para>
                <type>text</type>


                <literal>PRIMARY KEY</literal>













              </para>

            </listitem>
          </varlistentry>

        </variablelist>







        <itemizedlist>
          <title>
            Tables referencing asset_report via Foreign Key Constraints
          </title>

          <listitem>
            <para>
              <xref linkend="public.table.asset-report"/>
            </para>
          </listitem>

        </itemizedlist>






      </para>
    </section>

      <section id="public.table.asset-report-line"
               xreflabel="public.asset_report_line">
        <title id="public.table.asset-report-line-title">
         Table:
         
         <structname>asset_report_line</structname>
        </title>
 


        <para>
          <variablelist>
            <title>
              Structure of <structname>asset_report_line</structname>
            </title>


            <varlistentry>
              <term><structfield>asset_id</structfield></term>
              <listitem><para>
                <type>bigint</type>






                <literal>PRIMARY KEY</literal>












                <literal>REFERENCES</literal> <xref linkend="public.table.asset-item"/>




              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>report_id</structfield></term>
              <listitem><para>
                <type>bigint</type>


                <literal>PRIMARY KEY</literal>


















                <literal>REFERENCES</literal> <xref linkend="public.table.asset-report"/>


              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>amount</structfield></term>
              <listitem><para>
                <type>numeric</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>department_id</structfield></term>
              <listitem><para>
                <type>integer</type>












                <literal>REFERENCES</literal> <xref linkend="public.table.department"/>


              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>warehouse_id</structfield></term>
              <listitem><para>
                <type>integer</type>












                <literal>REFERENCES</literal> <xref linkend="public.table.warehouse"/>


              </para>

            </listitem>
          </varlistentry>

        </variablelist>










      </para>
    </section>

      <section id="public.table.asset-unit-class"
               xreflabel="public.asset_unit_class">
        <title id="public.table.asset-unit-class-title">
         Table:
         
         <structname>asset_unit_class</structname>
        </title>
 


        <para>
          <variablelist>
            <title>
              Structure of <structname>asset_unit_class</structname>
            </title>


            <varlistentry>
              <term><structfield>id</structfield></term>
              <listitem><para>
                <type>integer</type>




                      <literal>UNIQUE</literal>




                <literal>NOT NULL</literal>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>class</structfield></term>
              <listitem><para>
                <type>text</type>


                <literal>PRIMARY KEY</literal>













              </para>

            </listitem>
          </varlistentry>

        </variablelist>







        <itemizedlist>
          <title>
            Tables referencing asset_dep_method via Foreign Key Constraints
          </title>

          <listitem>
            <para>
              <xref linkend="public.table.asset-dep-method"/>
            </para>
          </listitem>

        </itemizedlist>






      </para>
    </section>

      <section id="public.table.audittrail"
               xreflabel="public.audittrail">
        <title id="public.table.audittrail-title">
         Table:
         
         <structname>audittrail</structname>
        </title>
 


        <para>
          <variablelist>
            <title>
              Structure of <structname>audittrail</structname>
            </title>


            <varlistentry>
              <term><structfield>trans_id</structfield></term>
              <listitem><para>
                <type>integer</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>tablename</structfield></term>
              <listitem><para>
                <type>text</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>reference</structfield></term>
              <listitem><para>
                <type>text</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>formname</structfield></term>
              <listitem><para>
                <type>text</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>action</structfield></term>
              <listitem><para>
                <type>text</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>transdate</structfield></term>
              <listitem><para>
                <type>timestamp without time zone</type>





                <literal>DEFAULT now()</literal>



              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>person_id</structfield></term>
              <listitem><para>
                <type>integer</type>







                <literal>NOT NULL</literal>






                <literal>REFERENCES</literal> <xref linkend="public.table.person"/>


              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>entry_id</structfield></term>
              <listitem><para>
                <type>bigserial</type>


                <literal>PRIMARY KEY</literal>













              </para>

            </listitem>
          </varlistentry>

        </variablelist>





        <variablelist>
          <title>Indexes on audittrail</title>

          <varlistentry>
            <term>audittrail_trans_id_key</term>
            <listitem><para>trans_id</para></listitem>
          </varlistentry>

        </variablelist>








      </para>
    </section>

      <section id="public.table.batch"
               xreflabel="public.batch">
        <title id="public.table.batch-title">
         Table:
         
         <structname>batch</structname>
        </title>
 


        <para>
          <variablelist>
            <title>
              Structure of <structname>batch</structname>
            </title>


            <varlistentry>
              <term><structfield>id</structfield></term>
              <listitem><para>
                <type>serial</type>


                <literal>PRIMARY KEY</literal>













              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>batch_class_id</structfield></term>
              <listitem><para>
                <type>integer</type>







                <literal>NOT NULL</literal>






                <literal>REFERENCES</literal> <xref linkend="public.table.batch-class"/>


              </para>

              <para>
                 Note that this field is largely used for sorting the vouchers.  A given batch is NOT restricted to this type.
              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>control_code</structfield></term>
              <listitem><para>
                <type>text</type>



                <literal>NOT NULL</literal>





              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>description</structfield></term>
              <listitem><para>
                <type>text</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>default_date</structfield></term>
              <listitem><para>
                <type>date</type>



                <literal>NOT NULL</literal>





              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>approved_on</structfield></term>
              <listitem><para>
                <type>date</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>approved_by</structfield></term>
              <listitem><para>
                <type>integer</type>












                <literal>REFERENCES</literal> <xref linkend="public.table.entity-employee"/>


              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>created_by</structfield></term>
              <listitem><para>
                <type>integer</type>












                <literal>REFERENCES</literal> <xref linkend="public.table.entity-employee"/>


              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>locked_by</structfield></term>
              <listitem><para>
                <type>integer</type>












                <literal>REFERENCES</literal> <xref linkend="public.table.session"/>


              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>created_on</structfield></term>
              <listitem><para>
                <type>date</type>





                <literal>DEFAULT now()</literal>



              </para>

            </listitem>
          </varlistentry>

        </variablelist>



        <variablelist>
          <title>Constraints on batch</title>

          <varlistentry>
            <term>batch_control_code_check</term>
            <listitem><para>CHECK ((length(control_code) &gt; 0))</para></listitem>
          </varlistentry>

        </variablelist>







        <itemizedlist>
          <title>
            Tables referencing pending_job via Foreign Key Constraints
          </title>

          <listitem>
            <para>
              <xref linkend="public.table.pending-job"/>
            </para>
          </listitem>



          <listitem>
            <para>
              <xref linkend="public.table.voucher"/>
            </para>
          </listitem>

        </itemizedlist>






      </para>
    </section>

      <section id="public.table.batch-class"
               xreflabel="public.batch_class">
        <title id="public.table.batch-class-title">
         Table:
         
         <structname>batch_class</structname>
        </title>
 


        <para>
          <variablelist>
            <title>
              Structure of <structname>batch_class</structname>
            </title>


            <varlistentry>
              <term><structfield>id</structfield></term>
              <listitem><para>
                <type>serial</type>




                      <literal>UNIQUE</literal>




                <literal>NOT NULL</literal>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>class</structfield></term>
              <listitem><para>
                <type>character varying</type>


                <literal>PRIMARY KEY</literal>













              </para>

            </listitem>
          </varlistentry>

        </variablelist>







        <itemizedlist>
          <title>
            Tables referencing batch via Foreign Key Constraints
          </title>

          <listitem>
            <para>
              <xref linkend="public.table.batch"/>
            </para>
          </listitem>



          <listitem>
            <para>
              <xref linkend="public.table.pending-job"/>
            </para>
          </listitem>



          <listitem>
            <para>
              <xref linkend="public.table.voucher"/>
            </para>
          </listitem>

        </itemizedlist>






      </para>
    </section>

      <section id="public.table.business"
               xreflabel="public.business">
        <title id="public.table.business-title">
         Table:
         
         <structname>business</structname>
        </title>
 


        <para>
          <variablelist>
            <title>
              Structure of <structname>business</structname>
            </title>


            <varlistentry>
              <term><structfield>id</structfield></term>
              <listitem><para>
                <type>serial</type>


                <literal>PRIMARY KEY</literal>













              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>description</structfield></term>
              <listitem><para>
                <type>text</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>discount</structfield></term>
              <listitem><para>
                <type>numeric</type>







              </para>

            </listitem>
          </varlistentry>

        </variablelist>










      </para>
    </section>

      <section id="public.view.chart"
               xreflabel="public.chart">
        <title id="public.view.chart-title">
         View:
         
         <structname>chart</structname>
        </title>
 


        <para>
          <variablelist>
            <title>
              Structure of <structname>chart</structname>
            </title>


            <varlistentry>
              <term><structfield>id</structfield></term>
              <listitem><para>
                <type>integer</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>accno</structfield></term>
              <listitem><para>
                <type>text</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>description</structfield></term>
              <listitem><para>
                <type>text</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>charttype</structfield></term>
              <listitem><para>
                <type>text</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>category</structfield></term>
              <listitem><para>
                <type>bpchar</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>link</structfield></term>
              <listitem><para>
                <type>text</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>account_heading</structfield></term>
              <listitem><para>
                <type>integer</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>gifi_accno</structfield></term>
              <listitem><para>
                <type>text</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>contra</structfield></term>
              <listitem><para>
                <type>boolean</type>







              </para>

            </listitem>
          </varlistentry>

        </variablelist>








        <figure>
         <title>Definition of view chart</title>
         <programlisting>
SELECT account_heading.id
, account_heading.accno
, account_heading.description
,&apos;H&apos; AS charttype
, NULL::unknown AS category
, NULL::unknown AS link
, NULL::unknown AS account_heading
, NULL::unknown AS gifi_accno
, false AS contra 
FROM account_heading 
UNIONSELECT c.id
, c.accno
, c.description
,&apos;A&apos; AS charttype
, c.category
, concat_colon
(l.description) AS link
, c.heading AS account_heading
, c.gifi_accno
, c.contra 
FROM (account c 
LEFT JOIN account_link l 
    ON (
           (c.id = l.account_id)
     )
)
GROUP BY c.id
, c.accno
, c.description
, c.category
, c.heading
, c.gifi_accno
, c.contra;</programlisting>
        </figure>



      </para>
    </section>

      <section id="public.table.company"
               xreflabel="public.company">
        <title id="public.table.company-title">
         Table:
         
         <structname>company</structname>
        </title>
 


        <para>
          <variablelist>
            <title>
              Structure of <structname>company</structname>
            </title>


            <varlistentry>
              <term><structfield>id</structfield></term>
              <listitem><para>
                <type>serial</type>




                      <literal>UNIQUE</literal>




                <literal>NOT NULL</literal>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>entity_id</structfield></term>
              <listitem><para>
                <type>integer</type>






                <literal>PRIMARY KEY</literal>












                <literal>REFERENCES</literal> <xref linkend="public.table.entity"/>




              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>legal_name</structfield></term>
              <listitem><para>
                <type>text</type>


                <literal>PRIMARY KEY</literal>













              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>tax_id</structfield></term>
              <listitem><para>
                <type>text</type>







              </para>

              <para>
                 In the US this would be a EIN. 
              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>created</structfield></term>
              <listitem><para>
                <type>date</type>



                <literal>NOT NULL</literal>



                <literal>DEFAULT (&apos;now&apos;::text)::date</literal>



              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>sic_code</structfield></term>
              <listitem><para>
                <type>character varying</type>







              </para>

            </listitem>
          </varlistentry>

        </variablelist>



        <variablelist>
          <title>Constraints on company</title>

          <varlistentry>
            <term>company_legal_name_check</term>
            <listitem><para>CHECK ((legal_name ~ &apos;[[:alnum:]_]&apos;::text))</para></listitem>
          </varlistentry>

        </variablelist>





        <variablelist>
          <title>Indexes on company</title>

          <varlistentry>
            <term>company_name_gist__idx</term>
            <listitem><para>legal_name gist_trgm_ops</para></listitem>
          </varlistentry>

        </variablelist>





        <itemizedlist>
          <title>
            Tables referencing company_to_contact via Foreign Key Constraints
          </title>

          <listitem>
            <para>
              <xref linkend="public.table.company-to-contact"/>
            </para>
          </listitem>



          <listitem>
            <para>
              <xref linkend="public.table.company-to-entity"/>
            </para>
          </listitem>



          <listitem>
            <para>
              <xref linkend="public.table.company-to-location"/>
            </para>
          </listitem>



          <listitem>
            <para>
              <xref linkend="public.table.person-to-company"/>
            </para>
          </listitem>

        </itemizedlist>






      </para>
    </section>

      <section id="public.table.company-to-contact"
               xreflabel="public.company_to_contact">
        <title id="public.table.company-to-contact-title">
         Table:
         
         <structname>company_to_contact</structname>
        </title>
 

        <para>
           To keep track of the relationship between multiple contact methods and a single company 
        </para>


        <para>
          <variablelist>
            <title>
              Structure of <structname>company_to_contact</structname>
            </title>


            <varlistentry>
              <term><structfield>company_id</structfield></term>
              <listitem><para>
                <type>integer</type>






                <literal>PRIMARY KEY</literal>












                <literal>REFERENCES</literal> <xref linkend="public.table.company"/>




              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>contact_class_id</structfield></term>
              <listitem><para>
                <type>integer</type>






                <literal>PRIMARY KEY</literal>












                <literal>REFERENCES</literal> <xref linkend="public.table.contact-class"/>




              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>contact</structfield></term>
              <listitem><para>
                <type>text</type>


                <literal>PRIMARY KEY</literal>













              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>description</structfield></term>
              <listitem><para>
                <type>text</type>







              </para>

            </listitem>
          </varlistentry>

        </variablelist>



        <variablelist>
          <title>Constraints on company_to_contact</title>

          <varlistentry>
            <term>company_to_contact_contact_check</term>
            <listitem><para>CHECK ((contact ~ &apos;[[:alnum:]_]&apos;::text))</para></listitem>
          </varlistentry>

        </variablelist>










      </para>
    </section>

      <section id="public.table.company-to-entity"
               xreflabel="public.company_to_entity">
        <title id="public.table.company-to-entity-title">
         Table:
         
         <structname>company_to_entity</structname>
        </title>
 


        <para>
          <variablelist>
            <title>
              Structure of <structname>company_to_entity</structname>
            </title>


            <varlistentry>
              <term><structfield>company_id</structfield></term>
              <listitem><para>
                <type>integer</type>






                <literal>PRIMARY KEY</literal>












                <literal>REFERENCES</literal> <xref linkend="public.table.company"/>




              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>entity_id</structfield></term>
              <listitem><para>
                <type>integer</type>






                <literal>PRIMARY KEY</literal>












                <literal>REFERENCES</literal> <xref linkend="public.table.entity"/>




              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>related_how</structfield></term>
              <listitem><para>
                <type>text</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>created</structfield></term>
              <listitem><para>
                <type>date</type>



                <literal>NOT NULL</literal>



                <literal>DEFAULT (&apos;now&apos;::text)::date</literal>



              </para>

            </listitem>
          </varlistentry>

        </variablelist>



        <variablelist>
          <title>Constraints on company_to_entity</title>

          <varlistentry>
            <term>company_to_entity_check</term>
            <listitem><para>CHECK ((company_id &lt;&gt; entity_id))</para></listitem>
          </varlistentry>

        </variablelist>










      </para>
    </section>

      <section id="public.table.company-to-location"
               xreflabel="public.company_to_location">
        <title id="public.table.company-to-location-title">
         Table:
         
         <structname>company_to_location</structname>
        </title>
 

        <para>
           This table is used for locations generic to companies.  For contract-bound
addresses, use eca_to_location instead 
        </para>


        <para>
          <variablelist>
            <title>
              Structure of <structname>company_to_location</structname>
            </title>


            <varlistentry>
              <term><structfield>location_id</structfield></term>
              <listitem><para>
                <type>integer</type>






                <literal>PRIMARY KEY</literal>












                <literal>REFERENCES</literal> <xref linkend="public.table.location"/>




              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>location_class</structfield></term>
              <listitem><para>
                <type>integer</type>






                <literal>PRIMARY KEY</literal>












                <literal>REFERENCES</literal> <xref linkend="public.table.location-class"/>




              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>company_id</structfield></term>
              <listitem><para>
                <type>integer</type>






                <literal>PRIMARY KEY</literal>












                <literal>REFERENCES</literal> <xref linkend="public.table.company"/>




              </para>

            </listitem>
          </varlistentry>

        </variablelist>










      </para>
    </section>

      <section id="public.table.contact-class"
               xreflabel="public.contact_class">
        <title id="public.table.contact-class-title">
         Table:
         
         <structname>contact_class</structname>
        </title>
 


        <para>
          <variablelist>
            <title>
              Structure of <structname>contact_class</structname>
            </title>


            <varlistentry>
              <term><structfield>id</structfield></term>
              <listitem><para>
                <type>serial</type>




                      <literal>UNIQUE</literal>




                <literal>NOT NULL</literal>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>class</structfield></term>
              <listitem><para>
                <type>text</type>


                <literal>PRIMARY KEY</literal>













              </para>

            </listitem>
          </varlistentry>

        </variablelist>



        <variablelist>
          <title>Constraints on contact_class</title>

          <varlistentry>
            <term>contact_class_class_check</term>
            <listitem><para>CHECK ((class ~ &apos;[[:alnum:]_]&apos;::text))</para></listitem>
          </varlistentry>

        </variablelist>







        <itemizedlist>
          <title>
            Tables referencing company_to_contact via Foreign Key Constraints
          </title>

          <listitem>
            <para>
              <xref linkend="public.table.company-to-contact"/>
            </para>
          </listitem>



          <listitem>
            <para>
              <xref linkend="public.table.eca-to-contact"/>
            </para>
          </listitem>



          <listitem>
            <para>
              <xref linkend="public.table.person-to-contact"/>
            </para>
          </listitem>

        </itemizedlist>






      </para>
    </section>

      <section id="public.table.country"
               xreflabel="public.country">
        <title id="public.table.country-title">
         Table:
         
         <structname>country</structname>
        </title>
 


        <para>
          <variablelist>
            <title>
              Structure of <structname>country</structname>
            </title>


            <varlistentry>
              <term><structfield>id</structfield></term>
              <listitem><para>
                <type>serial</type>


                <literal>PRIMARY KEY</literal>













              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>name</structfield></term>
              <listitem><para>
                <type>text</type>



                <literal>NOT NULL</literal>





              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>short_name</structfield></term>
              <listitem><para>
                <type>text</type>



                <literal>NOT NULL</literal>





              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>itu</structfield></term>
              <listitem><para>
                <type>text</type>







              </para>

              <para>
                 The ITU Telecommunication Standardization Sector code for calling internationally. For example, the US is 1, Great Britain is 44 
              </para>

            </listitem>
          </varlistentry>

        </variablelist>



        <variablelist>
          <title>Constraints on country</title>

          <varlistentry>
            <term>country_name_check</term>
            <listitem><para>CHECK ((name ~ &apos;[[:alnum:]_]&apos;::text))</para></listitem>
          </varlistentry>



          <varlistentry>
            <term>country_short_name_check</term>
            <listitem><para>CHECK ((short_name ~ &apos;[[:alnum:]_]&apos;::text))</para></listitem>
          </varlistentry>

        </variablelist>







        <itemizedlist>
          <title>
            Tables referencing country_tax_form via Foreign Key Constraints
          </title>

          <listitem>
            <para>
              <xref linkend="public.table.country-tax-form"/>
            </para>
          </listitem>



          <listitem>
            <para>
              <xref linkend="public.table.entity"/>
            </para>
          </listitem>



          <listitem>
            <para>
              <xref linkend="public.table.entity-class"/>
            </para>
          </listitem>



          <listitem>
            <para>
              <xref linkend="public.table.location"/>
            </para>
          </listitem>

        </itemizedlist>






      </para>
    </section>

      <section id="public.table.country-tax-form"
               xreflabel="public.country_tax_form">
        <title id="public.table.country-tax-form-title">
         Table:
         
         <structname>country_tax_form</structname>
        </title>
 


        <para>
          <variablelist>
            <title>
              Structure of <structname>country_tax_form</structname>
            </title>


            <varlistentry>
              <term><structfield>country_id</structfield></term>
              <listitem><para>
                <type>integer</type>






                <literal>PRIMARY KEY</literal>












                <literal>REFERENCES</literal> <xref linkend="public.table.country"/>




              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>form_name</structfield></term>
              <listitem><para>
                <type>text</type>


                <literal>PRIMARY KEY</literal>













              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>id</structfield></term>
              <listitem><para>
                <type>serial</type>




                      <literal>UNIQUE</literal>




                <literal>NOT NULL</literal>







              </para>

            </listitem>
          </varlistentry>

        </variablelist>







        <itemizedlist>
          <title>
            Tables referencing entity_credit_account via Foreign Key Constraints
          </title>

          <listitem>
            <para>
              <xref linkend="public.table.entity-credit-account"/>
            </para>
          </listitem>

        </itemizedlist>






      </para>
    </section>

      <section id="public.table.cr-approval"
               xreflabel="public.cr_approval">
        <title id="public.table.cr-approval-title">
         Table:
         
         <structname>cr_approval</structname>
        </title>
 


        <para>
          <variablelist>
            <title>
              Structure of <structname>cr_approval</structname>
            </title>


            <varlistentry>
              <term><structfield>report_id</structfield></term>
              <listitem><para>
                <type>bigint</type>


                <literal>PRIMARY KEY</literal>


















                <literal>REFERENCES</literal> <xref linkend="public.table.cr-report"/>


              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>approved_by</structfield></term>
              <listitem><para>
                <type>integer</type>







                <literal>NOT NULL</literal>






                <literal>REFERENCES</literal> <xref linkend="public.table.entity"/>


              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>approved_at</structfield></term>
              <listitem><para>
                <type>timestamp with time zone</type>



                <literal>NOT NULL</literal>



                <literal>DEFAULT now()</literal>



              </para>

            </listitem>
          </varlistentry>

        </variablelist>










      </para>
    </section>

      <section id="public.table.cr-coa-to-account"
               xreflabel="public.cr_coa_to_account">
        <title id="public.table.cr-coa-to-account-title">
         Table:
         
         <structname>cr_coa_to_account</structname>
        </title>
 


        <para>
          <variablelist>
            <title>
              Structure of <structname>cr_coa_to_account</structname>
            </title>


            <varlistentry>
              <term><structfield>chart_id</structfield></term>
              <listitem><para>
                <type>integer</type>







                <literal>NOT NULL</literal>






                <literal>REFERENCES</literal> <xref linkend="public.table.account"/>


              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>account</structfield></term>
              <listitem><para>
                <type>text</type>



                <literal>NOT NULL</literal>





              </para>

            </listitem>
          </varlistentry>

        </variablelist>










      </para>
    </section>

      <section id="public.table.cr-report"
               xreflabel="public.cr_report">
        <title id="public.table.cr-report-title">
         Table:
         
         <structname>cr_report</structname>
        </title>
 


        <para>
          <variablelist>
            <title>
              Structure of <structname>cr_report</structname>
            </title>


            <varlistentry>
              <term><structfield>id</structfield></term>
              <listitem><para>
                <type>bigserial</type>


                <literal>PRIMARY KEY</literal>













              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>chart_id</structfield></term>
              <listitem><para>
                <type>integer</type>







                <literal>NOT NULL</literal>






                <literal>REFERENCES</literal> <xref linkend="public.table.account"/>


              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>their_total</structfield></term>
              <listitem><para>
                <type>numeric</type>



                <literal>NOT NULL</literal>





              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>approved</structfield></term>
              <listitem><para>
                <type>boolean</type>



                <literal>NOT NULL</literal>



                <literal>DEFAULT false</literal>



              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>submitted</structfield></term>
              <listitem><para>
                <type>boolean</type>



                <literal>NOT NULL</literal>



                <literal>DEFAULT false</literal>



              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>end_date</structfield></term>
              <listitem><para>
                <type>date</type>



                <literal>NOT NULL</literal>



                <literal>DEFAULT now()</literal>



              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>updated</structfield></term>
              <listitem><para>
                <type>timestamp without time zone</type>



                <literal>NOT NULL</literal>



                <literal>DEFAULT now()</literal>



              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>entered_by</structfield></term>
              <listitem><para>
                <type>integer</type>







                <literal>NOT NULL</literal>



                <literal>DEFAULT person__get_my_entity_id()</literal>




                <literal>REFERENCES</literal> <xref linkend="public.table.entity"/>


              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>entered_username</structfield></term>
              <listitem><para>
                <type>text</type>



                <literal>NOT NULL</literal>



                <literal>DEFAULT &quot;session_user&quot;()</literal>



              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>deleted</structfield></term>
              <listitem><para>
                <type>boolean</type>



                <literal>NOT NULL</literal>



                <literal>DEFAULT false</literal>



              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>deleted_by</structfield></term>
              <listitem><para>
                <type>integer</type>












                <literal>REFERENCES</literal> <xref linkend="public.table.entity"/>


              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>approved_by</structfield></term>
              <listitem><para>
                <type>integer</type>












                <literal>REFERENCES</literal> <xref linkend="public.table.entity"/>


              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>approved_username</structfield></term>
              <listitem><para>
                <type>text</type>







              </para>

            </listitem>
          </varlistentry>

        </variablelist>



        <variablelist>
          <title>Constraints on cr_report</title>

          <varlistentry>
            <term>cr_report_check</term>
            <listitem><para>CHECK (((deleted IS NOT TRUE) OR (approved IS NOT TRUE)))</para></listitem>
          </varlistentry>

        </variablelist>







        <itemizedlist>
          <title>
            Tables referencing cr_approval via Foreign Key Constraints
          </title>

          <listitem>
            <para>
              <xref linkend="public.table.cr-approval"/>
            </para>
          </listitem>



          <listitem>
            <para>
              <xref linkend="public.table.cr-report-line"/>
            </para>
          </listitem>

        </itemizedlist>






      </para>
    </section>

      <section id="public.table.cr-report-line"
               xreflabel="public.cr_report_line">
        <title id="public.table.cr-report-line-title">
         Table:
         
         <structname>cr_report_line</structname>
        </title>
 


        <para>
          <variablelist>
            <title>
              Structure of <structname>cr_report_line</structname>
            </title>


            <varlistentry>
              <term><structfield>id</structfield></term>
              <listitem><para>
                <type>bigserial</type>


                <literal>PRIMARY KEY</literal>













              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>report_id</structfield></term>
              <listitem><para>
                <type>integer</type>







                <literal>NOT NULL</literal>






                <literal>REFERENCES</literal> <xref linkend="public.table.cr-report"/>


              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>scn</structfield></term>
              <listitem><para>
                <type>text</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>their_balance</structfield></term>
              <listitem><para>
                <type>numeric</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>our_balance</structfield></term>
              <listitem><para>
                <type>numeric</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>errorcode</structfield></term>
              <listitem><para>
                <type>integer</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>user</structfield></term>
              <listitem><para>
                <type>integer</type>







                <literal>NOT NULL</literal>






                <literal>REFERENCES</literal> <xref linkend="public.table.entity"/>


              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>clear_time</structfield></term>
              <listitem><para>
                <type>date</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>insert_time</structfield></term>
              <listitem><para>
                <type>timestamp with time zone</type>



                <literal>NOT NULL</literal>



                <literal>DEFAULT now()</literal>



              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>trans_type</structfield></term>
              <listitem><para>
                <type>text</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>post_date</structfield></term>
              <listitem><para>
                <type>date</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>ledger_id</structfield></term>
              <listitem><para>
                <type>integer</type>












                <literal>REFERENCES</literal> <xref linkend="public.table.acc-trans"/>


              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>voucher_id</structfield></term>
              <listitem><para>
                <type>integer</type>












                <literal>REFERENCES</literal> <xref linkend="public.table.voucher"/>


              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>overlook</structfield></term>
              <listitem><para>
                <type>boolean</type>



                <literal>NOT NULL</literal>



                <literal>DEFAULT false</literal>



              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>cleared</structfield></term>
              <listitem><para>
                <type>boolean</type>



                <literal>NOT NULL</literal>



                <literal>DEFAULT false</literal>



              </para>

            </listitem>
          </varlistentry>

        </variablelist>










      </para>
    </section>

      <section id="public.table.custom-field-catalog"
               xreflabel="public.custom_field_catalog">
        <title id="public.table.custom-field-catalog-title">
         Table:
         
         <structname>custom_field_catalog</structname>
        </title>
 


        <para>
          <variablelist>
            <title>
              Structure of <structname>custom_field_catalog</structname>
            </title>


            <varlistentry>
              <term><structfield>field_id</structfield></term>
              <listitem><para>
                <type>serial</type>


                <literal>PRIMARY KEY</literal>













              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>table_id</structfield></term>
              <listitem><para>
                <type>integer</type>












                <literal>REFERENCES</literal> <xref linkend="public.table.custom-table-catalog"/>


              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>field_name</structfield></term>
              <listitem><para>
                <type>text</type>







              </para>

            </listitem>
          </varlistentry>

        </variablelist>










      </para>
    </section>

      <section id="public.table.custom-table-catalog"
               xreflabel="public.custom_table_catalog">
        <title id="public.table.custom-table-catalog-title">
         Table:
         
         <structname>custom_table_catalog</structname>
        </title>
 


        <para>
          <variablelist>
            <title>
              Structure of <structname>custom_table_catalog</structname>
            </title>


            <varlistentry>
              <term><structfield>table_id</structfield></term>
              <listitem><para>
                <type>serial</type>


                <literal>PRIMARY KEY</literal>













              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>extends</structfield></term>
              <listitem><para>
                <type>text</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>table_name</structfield></term>
              <listitem><para>
                <type>text</type>







              </para>

            </listitem>
          </varlistentry>

        </variablelist>







        <itemizedlist>
          <title>
            Tables referencing custom_field_catalog via Foreign Key Constraints
          </title>

          <listitem>
            <para>
              <xref linkend="public.table.custom-field-catalog"/>
            </para>
          </listitem>

        </itemizedlist>






      </para>
    </section>

      <section id="public.view.customer"
               xreflabel="public.customer">
        <title id="public.view.customer-title">
         View:
         
         <structname>customer</structname>
        </title>
 


        <para>
          <variablelist>
            <title>
              Structure of <structname>customer</structname>
            </title>


            <varlistentry>
              <term><structfield>id</structfield></term>
              <listitem><para>
                <type>integer</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>entity_id</structfield></term>
              <listitem><para>
                <type>integer</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>entity_class</structfield></term>
              <listitem><para>
                <type>integer</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>discount</structfield></term>
              <listitem><para>
                <type>numeric</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>taxincluded</structfield></term>
              <listitem><para>
                <type>boolean</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>creditlimit</structfield></term>
              <listitem><para>
                <type>numeric</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>terms</structfield></term>
              <listitem><para>
                <type>smallint</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>customernumber</structfield></term>
              <listitem><para>
                <type>character varying(32)</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>cc</structfield></term>
              <listitem><para>
                <type>text</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>bcc</structfield></term>
              <listitem><para>
                <type>text</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>business_id</structfield></term>
              <listitem><para>
                <type>integer</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>language_code</structfield></term>
              <listitem><para>
                <type>character varying(6)</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>pricegroup_id</structfield></term>
              <listitem><para>
                <type>integer</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>curr</structfield></term>
              <listitem><para>
                <type>character(3)</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>startdate</structfield></term>
              <listitem><para>
                <type>date</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>enddate</structfield></term>
              <listitem><para>
                <type>date</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>bic</structfield></term>
              <listitem><para>
                <type>character varying</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>iban</structfield></term>
              <listitem><para>
                <type>character varying</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>invoice_notes</structfield></term>
              <listitem><para>
                <type>text</type>







              </para>

            </listitem>
          </varlistentry>

        </variablelist>








        <figure>
         <title>Definition of view customer</title>
         <programlisting>
SELECT c.id
, emd.entity_id
, emd.entity_class
, emd.discount
, emd.taxincluded
, emd.creditlimit
, emd.terms
, emd.meta_number AS customernumber
, emd.cc
, emd.bcc
, emd.business_id
, emd.language_code
, emd.pricegroup_id
, emd.curr
, emd.startdate
, emd.enddate
, eba.bic
, eba.iban
, ein.note AS invoice_notes 
FROM (
     (
           (entity_credit_account emd 
              JOIN entity_bank_account eba 
                ON (
                       (emd.entity_id = eba.entity_id)
                 )
           )
   LEFT JOIN entity_note ein 
          ON (
                 (ein.ref_key = emd.entity_id)
           )
     )
  JOIN company c 
    ON (
           (c.entity_id = emd.entity_id)
     )
)
WHERE (emd.entity_class = 2);</programlisting>
        </figure>



      </para>
    </section>

      <section id="public.table.customertax"
               xreflabel="public.customertax">
        <title id="public.table.customertax-title">
         Table:
         
         <structname>customertax</structname>
        </title>
 


        <para>
          <variablelist>
            <title>
              Structure of <structname>customertax</structname>
            </title>


            <varlistentry>
              <term><structfield>customer_id</structfield></term>
              <listitem><para>
                <type>integer</type>






                <literal>PRIMARY KEY</literal>












                <literal>REFERENCES</literal> <xref linkend="public.table.entity-credit-account"/>




              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>chart_id</structfield></term>
              <listitem><para>
                <type>integer</type>






                <literal>PRIMARY KEY</literal>












                <literal>REFERENCES</literal> <xref linkend="public.table.account"/>




              </para>

            </listitem>
          </varlistentry>

        </variablelist>





        <variablelist>
          <title>Indexes on customertax</title>

          <varlistentry>
            <term>customer_customer_id_key</term>
            <listitem><para>customer_id</para></listitem>
          </varlistentry>

        </variablelist>








      </para>
    </section>

      <section id="public.table.defaults"
               xreflabel="public.defaults">
        <title id="public.table.defaults-title">
         Table:
         
         <structname>defaults</structname>
        </title>
 

        <para>
          
Note that poll_frequency is in seconds.  poll_frequency and queue_payments 
are not exposed via the admin interface as they are advanced features best
handled via DBAs.  Also, separate_duties is not yet included in the admin 
interface.
        </para>


        <para>
          <variablelist>
            <title>
              Structure of <structname>defaults</structname>
            </title>


            <varlistentry>
              <term><structfield>setting_key</structfield></term>
              <listitem><para>
                <type>text</type>


                <literal>PRIMARY KEY</literal>













              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>value</structfield></term>
              <listitem><para>
                <type>text</type>







              </para>

            </listitem>
          </varlistentry>

        </variablelist>










      </para>
    </section>

      <section id="public.table.department"
               xreflabel="public.department">
        <title id="public.table.department-title">
         Table:
         
         <structname>department</structname>
        </title>
 


        <para>
          <variablelist>
            <title>
              Structure of <structname>department</structname>
            </title>


            <varlistentry>
              <term><structfield>id</structfield></term>
              <listitem><para>
                <type>serial</type>


                <literal>PRIMARY KEY</literal>













              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>description</structfield></term>
              <listitem><para>
                <type>text</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>role</structfield></term>
              <listitem><para>
                <type>character(1)</type>





                <literal>DEFAULT &apos;P&apos;::bpchar</literal>



              </para>

            </listitem>
          </varlistentry>

        </variablelist>





        <variablelist>
          <title>Indexes on department</title>

          <varlistentry>
            <term>department_id_key</term>
            <listitem><para>id</para></listitem>
          </varlistentry>

        </variablelist>





        <itemizedlist>
          <title>
            Tables referencing asset_item via Foreign Key Constraints
          </title>

          <listitem>
            <para>
              <xref linkend="public.table.asset-item"/>
            </para>
          </listitem>



          <listitem>
            <para>
              <xref linkend="public.table.asset-report-line"/>
            </para>
          </listitem>

        </itemizedlist>






      </para>
    </section>

      <section id="public.table.dpt-trans"
               xreflabel="public.dpt_trans">
        <title id="public.table.dpt-trans-title">
         Table:
         
         <structname>dpt_trans</structname>
        </title>
 


        <para>
          <variablelist>
            <title>
              Structure of <structname>dpt_trans</structname>
            </title>


            <varlistentry>
              <term><structfield>trans_id</structfield></term>
              <listitem><para>
                <type>integer</type>


                <literal>PRIMARY KEY</literal>













              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>department_id</structfield></term>
              <listitem><para>
                <type>integer</type>







              </para>

            </listitem>
          </varlistentry>

        </variablelist>










      </para>
    </section>

      <section id="public.table.eca-note"
               xreflabel="public.eca_note">
        <title id="public.table.eca-note-title">
         Table:
         
         <structname>eca_note</structname>
        </title>
 


        <para>
          <variablelist>
            <title>
              Structure of <structname>eca_note</structname>
            </title>


            <varlistentry>
              <term><structfield>id</structfield></term>
              <listitem><para>
                <type>integer</type>



                <literal>NOT NULL</literal>



                <literal>DEFAULT nextval(&apos;note_id_seq&apos;::regclass)</literal>



              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>note_class</structfield></term>
              <listitem><para>
                <type>integer</type>



                <literal>NOT NULL</literal>





              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>note</structfield></term>
              <listitem><para>
                <type>text</type>



                <literal>NOT NULL</literal>





              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>vector</structfield></term>
              <listitem><para>
                <type>tsvector</type>



                <literal>NOT NULL</literal>





              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>created</structfield></term>
              <listitem><para>
                <type>timestamp without time zone</type>



                <literal>NOT NULL</literal>



                <literal>DEFAULT now()</literal>



              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>created_by</structfield></term>
              <listitem><para>
                <type>text</type>





                <literal>DEFAULT &quot;session_user&quot;()</literal>



              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>ref_key</structfield></term>
              <listitem><para>
                <type>integer</type>







                <literal>NOT NULL</literal>






                <literal>REFERENCES</literal> <xref linkend="public.table.entity-credit-account"/>


              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>subject</structfield></term>
              <listitem><para>
                <type>text</type>







              </para>

            </listitem>
          </varlistentry>

        </variablelist>



        <variablelist>
          <title>Constraints on eca_note</title>

          <varlistentry>
            <term>eca_note_note_class_check</term>
            <listitem><para>CHECK ((note_class = 3))</para></listitem>
          </varlistentry>

        </variablelist>










      </para>
    </section>

      <section id="public.table.eca-to-contact"
               xreflabel="public.eca_to_contact">
        <title id="public.table.eca-to-contact-title">
         Table:
         
         <structname>eca_to_contact</structname>
        </title>
 

        <para>
           To keep track of the relationship between multiple contact methods and a single vendor or customer account. For generic 
contacts, use company_to_contact or person_to_contact instead.
        </para>


        <para>
          <variablelist>
            <title>
              Structure of <structname>eca_to_contact</structname>
            </title>


            <varlistentry>
              <term><structfield>credit_id</structfield></term>
              <listitem><para>
                <type>integer</type>






                <literal>PRIMARY KEY</literal>












                <literal>REFERENCES</literal> <xref linkend="public.table.entity-credit-account"/>




              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>contact_class_id</structfield></term>
              <listitem><para>
                <type>integer</type>






                <literal>PRIMARY KEY</literal>












                <literal>REFERENCES</literal> <xref linkend="public.table.contact-class"/>




              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>contact</structfield></term>
              <listitem><para>
                <type>text</type>


                <literal>PRIMARY KEY</literal>













              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>description</structfield></term>
              <listitem><para>
                <type>text</type>







              </para>

            </listitem>
          </varlistentry>

        </variablelist>



        <variablelist>
          <title>Constraints on eca_to_contact</title>

          <varlistentry>
            <term>eca_to_contact_contact_check</term>
            <listitem><para>CHECK ((contact ~ &apos;[[:alnum:]_]&apos;::text))</para></listitem>
          </varlistentry>

        </variablelist>










      </para>
    </section>

      <section id="public.table.eca-to-location"
               xreflabel="public.eca_to_location">
        <title id="public.table.eca-to-location-title">
         Table:
         
         <structname>eca_to_location</structname>
        </title>
 

        <para>
           This table is used for locations bound to contracts.  For generic contact
addresses, use company_to_location instead 
        </para>


        <para>
          <variablelist>
            <title>
              Structure of <structname>eca_to_location</structname>
            </title>


            <varlistentry>
              <term><structfield>location_id</structfield></term>
              <listitem><para>
                <type>integer</type>






                <literal>PRIMARY KEY</literal>












                <literal>REFERENCES</literal> <xref linkend="public.table.location"/>




              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>location_class</structfield></term>
              <listitem><para>
                <type>integer</type>






                <literal>PRIMARY KEY</literal>












                <literal>REFERENCES</literal> <xref linkend="public.table.location-class"/>




              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>credit_id</structfield></term>
              <listitem><para>
                <type>integer</type>






                <literal>PRIMARY KEY</literal>












                <literal>REFERENCES</literal> <xref linkend="public.table.entity-credit-account"/>




              </para>

            </listitem>
          </varlistentry>

        </variablelist>










      </para>
    </section>

      <section id="public.view.employee"
               xreflabel="public.employee">
        <title id="public.view.employee-title">
         View:
         
         <structname>employee</structname>
        </title>
 


        <para>
          <variablelist>
            <title>
              Structure of <structname>employee</structname>
            </title>


            <varlistentry>
              <term><structfield>salutation</structfield></term>
              <listitem><para>
                <type>text</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>first_name</structfield></term>
              <listitem><para>
                <type>text</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>last_name</structfield></term>
              <listitem><para>
                <type>text</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>entity_id</structfield></term>
              <listitem><para>
                <type>integer</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>startdate</structfield></term>
              <listitem><para>
                <type>date</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>enddate</structfield></term>
              <listitem><para>
                <type>date</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>role</structfield></term>
              <listitem><para>
                <type>character varying(20)</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>ssn</structfield></term>
              <listitem><para>
                <type>text</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>sales</structfield></term>
              <listitem><para>
                <type>boolean</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>manager_id</structfield></term>
              <listitem><para>
                <type>integer</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>employeenumber</structfield></term>
              <listitem><para>
                <type>character varying(32)</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>dob</structfield></term>
              <listitem><para>
                <type>date</type>







              </para>

            </listitem>
          </varlistentry>

        </variablelist>








        <figure>
         <title>Definition of view employee</title>
         <programlisting>
SELECT s.salutation
, p.first_name
, p.last_name
, ee.entity_id
, ee.startdate
, ee.enddate
, ee.role
, ee.ssn
, ee.sales
, ee.manager_id
, ee.employeenumber
, ee.dob 
FROM (
     (person p 
        JOIN entity_employee ee 
       USING (entity_id)
     )
LEFT JOIN salutation s 
    ON (
           (p.salutation_id = s.id)
     )
);</programlisting>
        </figure>



      </para>
    </section>

      <section id="public.view.employee-search"
               xreflabel="public.employee_search">
        <title id="public.view.employee-search-title">
         View:
         
         <structname>employee_search</structname>
        </title>
 


        <para>
          <variablelist>
            <title>
              Structure of <structname>employee_search</structname>
            </title>


            <varlistentry>
              <term><structfield>entity_id</structfield></term>
              <listitem><para>
                <type>integer</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>startdate</structfield></term>
              <listitem><para>
                <type>date</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>enddate</structfield></term>
              <listitem><para>
                <type>date</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>role</structfield></term>
              <listitem><para>
                <type>character varying(20)</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>ssn</structfield></term>
              <listitem><para>
                <type>text</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>sales</structfield></term>
              <listitem><para>
                <type>boolean</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>manager_id</structfield></term>
              <listitem><para>
                <type>integer</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>employeenumber</structfield></term>
              <listitem><para>
                <type>character varying(32)</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>dob</structfield></term>
              <listitem><para>
                <type>date</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>manager</structfield></term>
              <listitem><para>
                <type>text</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>note</structfield></term>
              <listitem><para>
                <type>text</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>name</structfield></term>
              <listitem><para>
                <type>text</type>







              </para>

            </listitem>
          </varlistentry>

        </variablelist>








        <figure>
         <title>Definition of view employee_search</title>
         <programlisting>
SELECT e.entity_id
, e.startdate
, e.enddate
, e.role
, e.ssn
, e.sales
, e.manager_id
, e.employeenumber
, e.dob
, em.name AS manager
, emn.note
, en.name 
FROM (
     (
           (
                 (entity_employee e 
               LEFT JOIN entity en 
                      ON (
                             (e.entity_id = en.id)
                       )
                 )
         LEFT JOIN entity_employee m 
                ON (
                       (e.manager_id = m.entity_id)
                 )
           )
   LEFT JOIN entity em 
          ON (
                 (em.id = m.entity_id)
           )
     )
LEFT JOIN entity_note emn 
    ON (
           (emn.ref_key = em.id)
     )
);</programlisting>
        </figure>



      </para>
    </section>

      <section id="public.view.employees"
               xreflabel="public.employees">
        <title id="public.view.employees-title">
         View:
         
         <structname>employees</structname>
        </title>
 


        <para>
          <variablelist>
            <title>
              Structure of <structname>employees</structname>
            </title>


            <varlistentry>
              <term><structfield>salutation</structfield></term>
              <listitem><para>
                <type>text</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>first_name</structfield></term>
              <listitem><para>
                <type>text</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>last_name</structfield></term>
              <listitem><para>
                <type>text</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>entity_id</structfield></term>
              <listitem><para>
                <type>integer</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>startdate</structfield></term>
              <listitem><para>
                <type>date</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>enddate</structfield></term>
              <listitem><para>
                <type>date</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>role</structfield></term>
              <listitem><para>
                <type>character varying(20)</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>ssn</structfield></term>
              <listitem><para>
                <type>text</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>sales</structfield></term>
              <listitem><para>
                <type>boolean</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>manager_id</structfield></term>
              <listitem><para>
                <type>integer</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>employeenumber</structfield></term>
              <listitem><para>
                <type>character varying(32)</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>dob</structfield></term>
              <listitem><para>
                <type>date</type>







              </para>

            </listitem>
          </varlistentry>

        </variablelist>








        <figure>
         <title>Definition of view employees</title>
         <programlisting>
SELECT s.salutation
, p.first_name
, p.last_name
, ee.entity_id
, ee.startdate
, ee.enddate
, ee.role
, ee.ssn
, ee.sales
, ee.manager_id
, ee.employeenumber
, ee.dob 
FROM (
     (person p 
        JOIN entity_employee ee 
       USING (entity_id)
     )
LEFT JOIN salutation s 
    ON (
           (p.salutation_id = s.id)
     )
);</programlisting>
        </figure>



      </para>
    </section>

      <section id="public.table.entity"
               xreflabel="public.entity">
        <title id="public.table.entity-title">
         Table:
         
         <structname>entity</structname>
        </title>
 

        <para>
           The primary entity table to map to all contacts 
        </para>


        <para>
          <variablelist>
            <title>
              Structure of <structname>entity</structname>
            </title>


            <varlistentry>
              <term><structfield>id</structfield></term>
              <listitem><para>
                <type>serial</type>




                      <literal>UNIQUE</literal>




                <literal>NOT NULL</literal>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>name</structfield></term>
              <listitem><para>
                <type>text</type>







              </para>

              <para>
                 This is the common name of an entity. If it was a person it may be Joshua Drake, a company Acme Corp. You may also choose to use a domain such as commandprompt.com 
              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>entity_class</structfield></term>
              <listitem><para>
                <type>integer</type>










                <literal>PRIMARY KEY</literal>












                <literal>REFERENCES</literal> <xref linkend="public.table.entity-class"/>



                <literal>REFERENCES</literal> <xref linkend="public.table.entity-class"/>




              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>created</structfield></term>
              <listitem><para>
                <type>date</type>



                <literal>NOT NULL</literal>



                <literal>DEFAULT (&apos;now&apos;::text)::date</literal>



              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>control_code</structfield></term>
              <listitem><para>
                <type>text</type>


                <literal>PRIMARY KEY</literal>









                <literal>DEFAULT setting_increment(&apos;entity_control&apos;::character varying)</literal>





              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>country_id</structfield></term>
              <listitem><para>
                <type>integer</type>







                <literal>NOT NULL</literal>






                <literal>REFERENCES</literal> <xref linkend="public.table.country"/>


              </para>

            </listitem>
          </varlistentry>

        </variablelist>



        <variablelist>
          <title>Constraints on entity</title>

          <varlistentry>
            <term>entity_name_check</term>
            <listitem><para>CHECK ((name ~ &apos;[[:alnum:]_]&apos;::text))</para></listitem>
          </varlistentry>

        </variablelist>





        <variablelist>
          <title>Indexes on entity</title>

          <varlistentry>
            <term>entity_name_gist_idx</term>
            <listitem><para>name gist_trgm_ops</para></listitem>
          </varlistentry>

        </variablelist>





        <itemizedlist>
          <title>
            Tables referencing ap via Foreign Key Constraints
          </title>

          <listitem>
            <para>
              <xref linkend="public.table.ap"/>
            </para>
          </listitem>



          <listitem>
            <para>
              <xref linkend="public.table.ar"/>
            </para>
          </listitem>



          <listitem>
            <para>
              <xref linkend="public.table.asset-report"/>
            </para>
          </listitem>



          <listitem>
            <para>
              <xref linkend="public.table.company"/>
            </para>
          </listitem>



          <listitem>
            <para>
              <xref linkend="public.table.company-to-entity"/>
            </para>
          </listitem>



          <listitem>
            <para>
              <xref linkend="public.table.cr-approval"/>
            </para>
          </listitem>



          <listitem>
            <para>
              <xref linkend="public.table.cr-report"/>
            </para>
          </listitem>



          <listitem>
            <para>
              <xref linkend="public.table.cr-report-line"/>
            </para>
          </listitem>



          <listitem>
            <para>
              <xref linkend="public.table.entity-bank-account"/>
            </para>
          </listitem>



          <listitem>
            <para>
              <xref linkend="public.table.entity-class-to-entity"/>
            </para>
          </listitem>



          <listitem>
            <para>
              <xref linkend="public.table.entity-credit-account"/>
            </para>
          </listitem>



          <listitem>
            <para>
              <xref linkend="public.table.entity-employee"/>
            </para>
          </listitem>



          <listitem>
            <para>
              <xref linkend="public.table.entity-note"/>
            </para>
          </listitem>



          <listitem>
            <para>
              <xref linkend="public.table.entity-other-name"/>
            </para>
          </listitem>



          <listitem>
            <para>
              <xref linkend="public.table.oe"/>
            </para>
          </listitem>



          <listitem>
            <para>
              <xref linkend="public.table.pending-reports"/>
            </para>
          </listitem>



          <listitem>
            <para>
              <xref linkend="public.table.person"/>
            </para>
          </listitem>



          <listitem>
            <para>
              <xref linkend="public.table.person-to-entity"/>
            </para>
          </listitem>



          <listitem>
            <para>
              <xref linkend="public.table.transactions"/>
            </para>
          </listitem>



          <listitem>
            <para>
              <xref linkend="public.table.users"/>
            </para>
          </listitem>

        </itemizedlist>






      </para>
    </section>

      <section id="public.table.entity-bank-account"
               xreflabel="public.entity_bank_account">
        <title id="public.table.entity-bank-account-title">
         Table:
         
         <structname>entity_bank_account</structname>
        </title>
 


        <para>
          <variablelist>
            <title>
              Structure of <structname>entity_bank_account</structname>
            </title>


            <varlistentry>
              <term><structfield>id</structfield></term>
              <listitem><para>
                <type>serial</type>




                      <literal>UNIQUE</literal>




                <literal>NOT NULL</literal>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>entity_id</structfield></term>
              <listitem><para>
                <type>integer</type>






                <literal>PRIMARY KEY</literal>












                <literal>REFERENCES</literal> <xref linkend="public.table.entity"/>




              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>bic</structfield></term>
              <listitem><para>
                <type>character varying</type>


                <literal>PRIMARY KEY</literal>













              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>iban</structfield></term>
              <listitem><para>
                <type>character varying</type>


                <literal>PRIMARY KEY</literal>













              </para>

            </listitem>
          </varlistentry>

        </variablelist>







        <itemizedlist>
          <title>
            Tables referencing entity_credit_account via Foreign Key Constraints
          </title>

          <listitem>
            <para>
              <xref linkend="public.table.entity-credit-account"/>
            </para>
          </listitem>

        </itemizedlist>






      </para>
    </section>

      <section id="public.table.entity-class"
               xreflabel="public.entity_class">
        <title id="public.table.entity-class-title">
         Table:
         
         <structname>entity_class</structname>
        </title>
 

        <para>
           Defines the class type such as vendor, customer, contact, employee 
        </para>


        <para>
          <variablelist>
            <title>
              Structure of <structname>entity_class</structname>
            </title>


            <varlistentry>
              <term><structfield>id</structfield></term>
              <listitem><para>
                <type>serial</type>


                <literal>PRIMARY KEY</literal>













              </para>

              <para>
                 The first 7 values are reserved and permanent 
              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>class</structfield></term>
              <listitem><para>
                <type>text</type>



                <literal>NOT NULL</literal>





              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>country_id</structfield></term>
              <listitem><para>
                <type>integer</type>












                <literal>REFERENCES</literal> <xref linkend="public.table.country"/>


              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>active</structfield></term>
              <listitem><para>
                <type>boolean</type>



                <literal>NOT NULL</literal>



                <literal>DEFAULT true</literal>



              </para>

            </listitem>
          </varlistentry>

        </variablelist>



        <variablelist>
          <title>Constraints on entity_class</title>

          <varlistentry>
            <term>entity_class_class_check</term>
            <listitem><para>CHECK ((class ~ &apos;[[:alnum:]_]&apos;::text))</para></listitem>
          </varlistentry>

        </variablelist>





        <variablelist>
          <title>Indexes on entity_class</title>

          <varlistentry>
            <term>entity_class_idx</term>
            <listitem><para>lower(class)</para></listitem>
          </varlistentry>

        </variablelist>





        <itemizedlist>
          <title>
            Tables referencing entity via Foreign Key Constraints
          </title>

          <listitem>
            <para>
              <xref linkend="public.table.entity"/>
            </para>
          </listitem>



          <listitem>
            <para>
              <xref linkend="public.table.entity-class-to-entity"/>
            </para>
          </listitem>



          <listitem>
            <para>
              <xref linkend="public.table.entity-credit-account"/>
            </para>
          </listitem>

        </itemizedlist>






      </para>
    </section>

      <section id="public.table.entity-class-to-entity"
               xreflabel="public.entity_class_to_entity">
        <title id="public.table.entity-class-to-entity-title">
         Table:
         
         <structname>entity_class_to_entity</structname>
        </title>
 

        <para>
           Relation builder for classes to entity 
        </para>


        <para>
          <variablelist>
            <title>
              Structure of <structname>entity_class_to_entity</structname>
            </title>


            <varlistentry>
              <term><structfield>entity_class_id</structfield></term>
              <listitem><para>
                <type>integer</type>






                <literal>PRIMARY KEY</literal>












                <literal>REFERENCES</literal> <xref linkend="public.table.entity-class"/>




              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>entity_id</structfield></term>
              <listitem><para>
                <type>integer</type>






                <literal>PRIMARY KEY</literal>












                <literal>REFERENCES</literal> <xref linkend="public.table.entity"/>




              </para>

            </listitem>
          </varlistentry>

        </variablelist>










      </para>
    </section>

      <section id="public.table.entity-credit-account"
               xreflabel="public.entity_credit_account">
        <title id="public.table.entity-credit-account-title">
         Table:
         
         <structname>entity_credit_account</structname>
        </title>
 

        <para>
           This is a metadata table for ALL entities in LSMB; it deprecates the use of customer and vendor specific tables (which were nearly identical and largely redundant), and replaces it with a single point of metadata. 
        </para>


        <para>
          <variablelist>
            <title>
              Structure of <structname>entity_credit_account</structname>
            </title>


            <varlistentry>
              <term><structfield>id</structfield></term>
              <listitem><para>
                <type>serial</type>




                      <literal>UNIQUE</literal>




                <literal>NOT NULL</literal>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>entity_id</structfield></term>
              <listitem><para>
                <type>integer</type>






                <literal>PRIMARY KEY</literal>












                <literal>REFERENCES</literal> <xref linkend="public.table.entity"/>




              </para>

              <para>
                 This is the relationship between entities and their metadata. 
              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>entity_class</structfield></term>
              <listitem><para>
                <type>integer</type>






                <literal>PRIMARY KEY</literal>












                <literal>REFERENCES</literal> <xref linkend="public.table.entity-class"/>




              </para>

              <para>
                 A reference to entity_class, requiring that entity_credit_account only apply to vendors and customers, using the entity_class table as the Point Of Truth. 
              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>pay_to_name</structfield></term>
              <listitem><para>
                <type>text</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>discount</structfield></term>
              <listitem><para>
                <type>numeric</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>description</structfield></term>
              <listitem><para>
                <type>text</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>discount_terms</structfield></term>
              <listitem><para>
                <type>integer</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>discount_account_id</structfield></term>
              <listitem><para>
                <type>integer</type>












                <literal>REFERENCES</literal> <xref linkend="public.table.account"/>


              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>taxincluded</structfield></term>
              <listitem><para>
                <type>boolean</type>





                <literal>DEFAULT false</literal>



              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>creditlimit</structfield></term>
              <listitem><para>
                <type>numeric</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>terms</structfield></term>
              <listitem><para>
                <type>smallint</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>meta_number</structfield></term>
              <listitem><para>
                <type>character varying(32)</type>


                <literal>PRIMARY KEY</literal>













              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>cc</structfield></term>
              <listitem><para>
                <type>text</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>bcc</structfield></term>
              <listitem><para>
                <type>text</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>business_id</structfield></term>
              <listitem><para>
                <type>integer</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>language_code</structfield></term>
              <listitem><para>
                <type>character varying(6)</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>pricegroup_id</structfield></term>
              <listitem><para>
                <type>integer</type>












                <literal>REFERENCES</literal> <xref linkend="public.table.pricegroup"/>


              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>curr</structfield></term>
              <listitem><para>
                <type>character(3)</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>startdate</structfield></term>
              <listitem><para>
                <type>date</type>





                <literal>DEFAULT (&apos;now&apos;::text)::date</literal>



              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>enddate</structfield></term>
              <listitem><para>
                <type>date</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>threshold</structfield></term>
              <listitem><para>
                <type>numeric</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>employee_id</structfield></term>
              <listitem><para>
                <type>integer</type>












                <literal>REFERENCES</literal> <xref linkend="public.table.entity-employee"/>


              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>primary_contact</structfield></term>
              <listitem><para>
                <type>integer</type>












                <literal>REFERENCES</literal> <xref linkend="public.table.person"/>


              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>ar_ap_account_id</structfield></term>
              <listitem><para>
                <type>integer</type>












                <literal>REFERENCES</literal> <xref linkend="public.table.account"/>


              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>cash_account_id</structfield></term>
              <listitem><para>
                <type>integer</type>












                <literal>REFERENCES</literal> <xref linkend="public.table.account"/>


              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>bank_account</structfield></term>
              <listitem><para>
                <type>integer</type>












                <literal>REFERENCES</literal> <xref linkend="public.table.entity-bank-account"/>


              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>taxform_id</structfield></term>
              <listitem><para>
                <type>integer</type>












                <literal>REFERENCES</literal> <xref linkend="public.table.country-tax-form"/>


              </para>

            </listitem>
          </varlistentry>

        </variablelist>



        <variablelist>
          <title>Constraints on entity_credit_account</title>

          <varlistentry>
            <term>entity_credit_account_check</term>
            <listitem><para>CHECK (((ar_ap_account_id IS NOT NULL) OR (entity_id = 0)))</para></listitem>
          </varlistentry>



          <varlistentry>
            <term>entity_credit_account_entity_class_check</term>
            <listitem><para>CHECK ((entity_class = ANY (ARRAY[1, 2])))</para></listitem>
          </varlistentry>

        </variablelist>







        <itemizedlist>
          <title>
            Tables referencing ap via Foreign Key Constraints
          </title>

          <listitem>
            <para>
              <xref linkend="public.table.ap"/>
            </para>
          </listitem>



          <listitem>
            <para>
              <xref linkend="public.table.ar"/>
            </para>
          </listitem>



          <listitem>
            <para>
              <xref linkend="public.table.customertax"/>
            </para>
          </listitem>



          <listitem>
            <para>
              <xref linkend="public.table.eca-note"/>
            </para>
          </listitem>



          <listitem>
            <para>
              <xref linkend="public.table.eca-to-contact"/>
            </para>
          </listitem>



          <listitem>
            <para>
              <xref linkend="public.table.eca-to-location"/>
            </para>
          </listitem>



          <listitem>
            <para>
              <xref linkend="public.table.oe"/>
            </para>
          </listitem>



          <listitem>
            <para>
              <xref linkend="public.table.partscustomer"/>
            </para>
          </listitem>



          <listitem>
            <para>
              <xref linkend="public.table.partsvendor"/>
            </para>
          </listitem>



          <listitem>
            <para>
              <xref linkend="public.table.payment"/>
            </para>
          </listitem>



          <listitem>
            <para>
              <xref linkend="public.table.project"/>
            </para>
          </listitem>



          <listitem>
            <para>
              <xref linkend="public.table.vendortax"/>
            </para>
          </listitem>

        </itemizedlist>






      </para>
    </section>

      <section id="public.table.entity-employee"
               xreflabel="public.entity_employee">
        <title id="public.table.entity-employee-title">
         Table:
         
         <structname>entity_employee</structname>
        </title>
 


        <para>
          <variablelist>
            <title>
              Structure of <structname>entity_employee</structname>
            </title>


            <varlistentry>
              <term><structfield>entity_id</structfield></term>
              <listitem><para>
                <type>integer</type>






                <literal>PRIMARY KEY</literal>












                <literal>REFERENCES</literal> <xref linkend="public.table.entity"/>




              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>startdate</structfield></term>
              <listitem><para>
                <type>date</type>



                <literal>NOT NULL</literal>



                <literal>DEFAULT (&apos;now&apos;::text)::date</literal>



              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>enddate</structfield></term>
              <listitem><para>
                <type>date</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>role</structfield></term>
              <listitem><para>
                <type>character varying(20)</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>ssn</structfield></term>
              <listitem><para>
                <type>text</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>sales</structfield></term>
              <listitem><para>
                <type>boolean</type>





                <literal>DEFAULT false</literal>



              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>manager_id</structfield></term>
              <listitem><para>
                <type>integer</type>












                <literal>REFERENCES</literal> <xref linkend="public.table.entity"/>


              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>employeenumber</structfield></term>
              <listitem><para>
                <type>character varying(32)</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>dob</structfield></term>
              <listitem><para>
                <type>date</type>







              </para>

            </listitem>
          </varlistentry>

        </variablelist>







        <itemizedlist>
          <title>
            Tables referencing ap via Foreign Key Constraints
          </title>

          <listitem>
            <para>
              <xref linkend="public.table.ap"/>
            </para>
          </listitem>



          <listitem>
            <para>
              <xref linkend="public.table.ar"/>
            </para>
          </listitem>



          <listitem>
            <para>
              <xref linkend="public.table.batch"/>
            </para>
          </listitem>



          <listitem>
            <para>
              <xref linkend="public.table.entity-credit-account"/>
            </para>
          </listitem>



          <listitem>
            <para>
              <xref linkend="public.table.inventory"/>
            </para>
          </listitem>

        </itemizedlist>






      </para>
    </section>

      <section id="public.table.entity-note"
               xreflabel="public.entity_note">
        <title id="public.table.entity-note-title">
         Table:
         
         <structname>entity_note</structname>
        </title>
 


        <para>
          <variablelist>
            <title>
              Structure of <structname>entity_note</structname>
            </title>


            <varlistentry>
              <term><structfield>id</structfield></term>
              <listitem><para>
                <type>integer</type>



                <literal>NOT NULL</literal>



                <literal>DEFAULT nextval(&apos;note_id_seq&apos;::regclass)</literal>



              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>note_class</structfield></term>
              <listitem><para>
                <type>integer</type>



                <literal>NOT NULL</literal>





              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>note</structfield></term>
              <listitem><para>
                <type>text</type>



                <literal>NOT NULL</literal>





              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>vector</structfield></term>
              <listitem><para>
                <type>tsvector</type>



                <literal>NOT NULL</literal>





              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>created</structfield></term>
              <listitem><para>
                <type>timestamp without time zone</type>



                <literal>NOT NULL</literal>



                <literal>DEFAULT now()</literal>



              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>created_by</structfield></term>
              <listitem><para>
                <type>text</type>





                <literal>DEFAULT &quot;session_user&quot;()</literal>



              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>ref_key</structfield></term>
              <listitem><para>
                <type>integer</type>







                <literal>NOT NULL</literal>






                <literal>REFERENCES</literal> <xref linkend="public.table.entity"/>


              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>subject</structfield></term>
              <listitem><para>
                <type>text</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>entity_id</structfield></term>
              <listitem><para>
                <type>integer</type>












                <literal>REFERENCES</literal> <xref linkend="public.table.entity"/>


              </para>

            </listitem>
          </varlistentry>

        </variablelist>



        <variablelist>
          <title>Constraints on entity_note</title>

          <varlistentry>
            <term>entity_note_note_class_check</term>
            <listitem><para>CHECK ((note_class = 1))</para></listitem>
          </varlistentry>

        </variablelist>





        <variablelist>
          <title>Indexes on entity_note</title>

          <varlistentry>
            <term>entity_note_id_idx</term>
            <listitem><para>id</para></listitem>
          </varlistentry>



          <varlistentry>
            <term>entity_note_vectors_idx</term>
            <listitem><para>vector</para></listitem>
          </varlistentry>



          <varlistentry>
            <term>notes_idx</term>
            <listitem><para>note gist_trgm_ops</para></listitem>
          </varlistentry>

        </variablelist>








      </para>
    </section>

      <section id="public.table.entity-other-name"
               xreflabel="public.entity_other_name">
        <title id="public.table.entity-other-name-title">
         Table:
         
         <structname>entity_other_name</structname>
        </title>
 

        <para>
           Similar to company_other_name, a person may be jd, Joshua Drake, linuxpoet... all are the same person. 
        </para>


        <para>
          <variablelist>
            <title>
              Structure of <structname>entity_other_name</structname>
            </title>


            <varlistentry>
              <term><structfield>entity_id</structfield></term>
              <listitem><para>
                <type>integer</type>






                <literal>PRIMARY KEY</literal>












                <literal>REFERENCES</literal> <xref linkend="public.table.entity"/>




              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>other_name</structfield></term>
              <listitem><para>
                <type>text</type>


                <literal>PRIMARY KEY</literal>













              </para>

            </listitem>
          </varlistentry>

        </variablelist>



        <variablelist>
          <title>Constraints on entity_other_name</title>

          <varlistentry>
            <term>entity_other_name_other_name_check</term>
            <listitem><para>CHECK ((other_name ~ &apos;[[:alnum:]_]&apos;::text))</para></listitem>
          </varlistentry>

        </variablelist>










      </para>
    </section>

      <section id="public.table.exchangerate"
               xreflabel="public.exchangerate">
        <title id="public.table.exchangerate-title">
         Table:
         
         <structname>exchangerate</structname>
        </title>
 


        <para>
          <variablelist>
            <title>
              Structure of <structname>exchangerate</structname>
            </title>


            <varlistentry>
              <term><structfield>curr</structfield></term>
              <listitem><para>
                <type>character(3)</type>


                <literal>PRIMARY KEY</literal>













              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>transdate</structfield></term>
              <listitem><para>
                <type>date</type>


                <literal>PRIMARY KEY</literal>













              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>buy</structfield></term>
              <listitem><para>
                <type>numeric</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>sell</structfield></term>
              <listitem><para>
                <type>numeric</type>







              </para>

            </listitem>
          </varlistentry>

        </variablelist>





        <variablelist>
          <title>Indexes on exchangerate</title>

          <varlistentry>
            <term>exchangerate_ct_key</term>
            <listitem><para>curr, transdate</para></listitem>
          </varlistentry>

        </variablelist>








      </para>
    </section>

      <section id="public.table.gifi"
               xreflabel="public.gifi">
        <title id="public.table.gifi-title">
         Table:
         
         <structname>gifi</structname>
        </title>
 


        <para>
          <variablelist>
            <title>
              Structure of <structname>gifi</structname>
            </title>


            <varlistentry>
              <term><structfield>accno</structfield></term>
              <listitem><para>
                <type>text</type>


                <literal>PRIMARY KEY</literal>













              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>description</structfield></term>
              <listitem><para>
                <type>text</type>







              </para>

            </listitem>
          </varlistentry>

        </variablelist>










      </para>
    </section>

      <section id="public.table.gl"
               xreflabel="public.gl">
        <title id="public.table.gl-title">
         Table:
         
         <structname>gl</structname>
        </title>
 


        <para>
          <variablelist>
            <title>
              Structure of <structname>gl</structname>
            </title>


            <varlistentry>
              <term><structfield>id</structfield></term>
              <listitem><para>
                <type>integer</type>






                <literal>PRIMARY KEY</literal>









                <literal>DEFAULT nextval(&apos;id&apos;::regclass)</literal>




                <literal>REFERENCES</literal> <xref linkend="public.table.transactions"/>




              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>reference</structfield></term>
              <listitem><para>
                <type>text</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>description</structfield></term>
              <listitem><para>
                <type>text</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>transdate</structfield></term>
              <listitem><para>
                <type>date</type>





                <literal>DEFAULT (&apos;now&apos;::text)::date</literal>



              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>person_id</structfield></term>
              <listitem><para>
                <type>integer</type>












                <literal>REFERENCES</literal> <xref linkend="public.table.person"/>


              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>notes</structfield></term>
              <listitem><para>
                <type>text</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>approved</structfield></term>
              <listitem><para>
                <type>boolean</type>





                <literal>DEFAULT true</literal>



              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>department_id</structfield></term>
              <listitem><para>
                <type>integer</type>







              </para>

            </listitem>
          </varlistentry>

        </variablelist>





        <variablelist>
          <title>Indexes on gl</title>

          <varlistentry>
            <term>gl_description_key</term>
            <listitem><para>lower(description)</para></listitem>
          </varlistentry>



          <varlistentry>
            <term>gl_id_key</term>
            <listitem><para>id</para></listitem>
          </varlistentry>



          <varlistentry>
            <term>gl_reference_key</term>
            <listitem><para>reference</para></listitem>
          </varlistentry>



          <varlistentry>
            <term>gl_transdate_key</term>
            <listitem><para>transdate</para></listitem>
          </varlistentry>

        </variablelist>





        <itemizedlist>
          <title>
            Tables referencing asset_report via Foreign Key Constraints
          </title>

          <listitem>
            <para>
              <xref linkend="public.table.asset-report"/>
            </para>
          </listitem>



          <listitem>
            <para>
              <xref linkend="public.table.payment"/>
            </para>
          </listitem>

        </itemizedlist>






      </para>
    </section>

      <section id="public.table.inventory"
               xreflabel="public.inventory">
        <title id="public.table.inventory-title">
         Table:
         
         <structname>inventory</structname>
        </title>
 


        <para>
          <variablelist>
            <title>
              Structure of <structname>inventory</structname>
            </title>


            <varlistentry>
              <term><structfield>entity_id</structfield></term>
              <listitem><para>
                <type>integer</type>












                <literal>REFERENCES</literal> <xref linkend="public.table.entity-employee"/>


              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>warehouse_id</structfield></term>
              <listitem><para>
                <type>integer</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>parts_id</structfield></term>
              <listitem><para>
                <type>integer</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>trans_id</structfield></term>
              <listitem><para>
                <type>integer</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>orderitems_id</structfield></term>
              <listitem><para>
                <type>integer</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>qty</structfield></term>
              <listitem><para>
                <type>numeric</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>shippingdate</structfield></term>
              <listitem><para>
                <type>date</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>entry_id</structfield></term>
              <listitem><para>
                <type>serial</type>


                <literal>PRIMARY KEY</literal>













              </para>

            </listitem>
          </varlistentry>

        </variablelist>










      </para>
    </section>

      <section id="public.table.invoice"
               xreflabel="public.invoice">
        <title id="public.table.invoice-title">
         Table:
         
         <structname>invoice</structname>
        </title>
 


        <para>
          <variablelist>
            <title>
              Structure of <structname>invoice</structname>
            </title>


            <varlistentry>
              <term><structfield>id</structfield></term>
              <listitem><para>
                <type>serial</type>


                <literal>PRIMARY KEY</literal>













              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>trans_id</structfield></term>
              <listitem><para>
                <type>integer</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>parts_id</structfield></term>
              <listitem><para>
                <type>integer</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>description</structfield></term>
              <listitem><para>
                <type>text</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>qty</structfield></term>
              <listitem><para>
                <type>integer</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>allocated</structfield></term>
              <listitem><para>
                <type>integer</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>sellprice</structfield></term>
              <listitem><para>
                <type>numeric</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>fxsellprice</structfield></term>
              <listitem><para>
                <type>numeric</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>discount</structfield></term>
              <listitem><para>
                <type>numeric</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>assemblyitem</structfield></term>
              <listitem><para>
                <type>boolean</type>





                <literal>DEFAULT false</literal>



              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>unit</structfield></term>
              <listitem><para>
                <type>character varying(5)</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>project_id</structfield></term>
              <listitem><para>
                <type>integer</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>deliverydate</structfield></term>
              <listitem><para>
                <type>date</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>serialnumber</structfield></term>
              <listitem><para>
                <type>text</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>notes</structfield></term>
              <listitem><para>
                <type>text</type>







              </para>

            </listitem>
          </varlistentry>

        </variablelist>





        <variablelist>
          <title>Indexes on invoice</title>

          <varlistentry>
            <term>invoice_id_key</term>
            <listitem><para>id</para></listitem>
          </varlistentry>



          <varlistentry>
            <term>invoice_trans_id_key</term>
            <listitem><para>trans_id</para></listitem>
          </varlistentry>

        </variablelist>





        <itemizedlist>
          <title>
            Tables referencing invoice_note via Foreign Key Constraints
          </title>

          <listitem>
            <para>
              <xref linkend="public.table.invoice-note"/>
            </para>
          </listitem>



          <listitem>
            <para>
              <xref linkend="public.table.invoice-tax-form"/>
            </para>
          </listitem>

        </itemizedlist>






      </para>
    </section>

      <section id="public.table.invoice-note"
               xreflabel="public.invoice_note">
        <title id="public.table.invoice-note-title">
         Table:
         
         <structname>invoice_note</structname>
        </title>
 


        <para>
          <variablelist>
            <title>
              Structure of <structname>invoice_note</structname>
            </title>


            <varlistentry>
              <term><structfield>id</structfield></term>
              <listitem><para>
                <type>integer</type>



                <literal>NOT NULL</literal>



                <literal>DEFAULT nextval(&apos;note_id_seq&apos;::regclass)</literal>



              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>note_class</structfield></term>
              <listitem><para>
                <type>integer</type>



                <literal>NOT NULL</literal>





              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>note</structfield></term>
              <listitem><para>
                <type>text</type>



                <literal>NOT NULL</literal>





              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>vector</structfield></term>
              <listitem><para>
                <type>tsvector</type>



                <literal>NOT NULL</literal>





              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>created</structfield></term>
              <listitem><para>
                <type>timestamp without time zone</type>



                <literal>NOT NULL</literal>



                <literal>DEFAULT now()</literal>



              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>created_by</structfield></term>
              <listitem><para>
                <type>text</type>





                <literal>DEFAULT &quot;session_user&quot;()</literal>



              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>ref_key</structfield></term>
              <listitem><para>
                <type>integer</type>







                <literal>NOT NULL</literal>






                <literal>REFERENCES</literal> <xref linkend="public.table.invoice"/>


              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>subject</structfield></term>
              <listitem><para>
                <type>text</type>







              </para>

            </listitem>
          </varlistentry>

        </variablelist>





        <variablelist>
          <title>Indexes on invoice_note</title>

          <varlistentry>
            <term>invoice_note_id_idx</term>
            <listitem><para>id</para></listitem>
          </varlistentry>



          <varlistentry>
            <term>invoice_note_vectors_idx</term>
            <listitem><para>vector</para></listitem>
          </varlistentry>

        </variablelist>








      </para>
    </section>

      <section id="public.table.invoice-tax-form"
               xreflabel="public.invoice_tax_form">
        <title id="public.table.invoice-tax-form-title">
         Table:
         
         <structname>invoice_tax_form</structname>
        </title>
 


        <para>
          <variablelist>
            <title>
              Structure of <structname>invoice_tax_form</structname>
            </title>


            <varlistentry>
              <term><structfield>invoice_id</structfield></term>
              <listitem><para>
                <type>integer</type>






                <literal>PRIMARY KEY</literal>












                <literal>REFERENCES</literal> <xref linkend="public.table.invoice"/>




              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>reportable</structfield></term>
              <listitem><para>
                <type>boolean</type>







              </para>

            </listitem>
          </varlistentry>

        </variablelist>










      </para>
    </section>

      <section id="public.table.jcitems"
               xreflabel="public.jcitems">
        <title id="public.table.jcitems-title">
         Table:
         
         <structname>jcitems</structname>
        </title>
 


        <para>
          <variablelist>
            <title>
              Structure of <structname>jcitems</structname>
            </title>


            <varlistentry>
              <term><structfield>id</structfield></term>
              <listitem><para>
                <type>serial</type>


                <literal>PRIMARY KEY</literal>













              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>project_id</structfield></term>
              <listitem><para>
                <type>integer</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>parts_id</structfield></term>
              <listitem><para>
                <type>integer</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>description</structfield></term>
              <listitem><para>
                <type>text</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>qty</structfield></term>
              <listitem><para>
                <type>numeric</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>allocated</structfield></term>
              <listitem><para>
                <type>numeric</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>sellprice</structfield></term>
              <listitem><para>
                <type>numeric</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>fxsellprice</structfield></term>
              <listitem><para>
                <type>numeric</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>serialnumber</structfield></term>
              <listitem><para>
                <type>text</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>checkedin</structfield></term>
              <listitem><para>
                <type>timestamp with time zone</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>checkedout</structfield></term>
              <listitem><para>
                <type>timestamp with time zone</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>person_id</structfield></term>
              <listitem><para>
                <type>integer</type>







                <literal>NOT NULL</literal>






                <literal>REFERENCES</literal> <xref linkend="public.table.person"/>


              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>notes</structfield></term>
              <listitem><para>
                <type>text</type>







              </para>

            </listitem>
          </varlistentry>

        </variablelist>





        <variablelist>
          <title>Indexes on jcitems</title>

          <varlistentry>
            <term>jcitems_id_key</term>
            <listitem><para>id</para></listitem>
          </varlistentry>

        </variablelist>








      </para>
    </section>

      <section id="public.table.language"
               xreflabel="public.language">
        <title id="public.table.language-title">
         Table:
         
         <structname>language</structname>
        </title>
 


        <para>
          <variablelist>
            <title>
              Structure of <structname>language</structname>
            </title>


            <varlistentry>
              <term><structfield>code</structfield></term>
              <listitem><para>
                <type>character varying(6)</type>


                <literal>PRIMARY KEY</literal>













              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>description</structfield></term>
              <listitem><para>
                <type>text</type>







              </para>

            </listitem>
          </varlistentry>

        </variablelist>







        <itemizedlist>
          <title>
            Tables referencing user_preference via Foreign Key Constraints
          </title>

          <listitem>
            <para>
              <xref linkend="public.table.user-preference"/>
            </para>
          </listitem>

        </itemizedlist>






      </para>
    </section>

      <section id="public.table.location"
               xreflabel="public.location">
        <title id="public.table.location-title">
         Table:
         
         <structname>location</structname>
        </title>
 


        <para>
          <variablelist>
            <title>
              Structure of <structname>location</structname>
            </title>


            <varlistentry>
              <term><structfield>id</structfield></term>
              <listitem><para>
                <type>serial</type>


                <literal>PRIMARY KEY</literal>













              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>line_one</structfield></term>
              <listitem><para>
                <type>text</type>



                <literal>NOT NULL</literal>





              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>line_two</structfield></term>
              <listitem><para>
                <type>text</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>line_three</structfield></term>
              <listitem><para>
                <type>text</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>city</structfield></term>
              <listitem><para>
                <type>text</type>



                <literal>NOT NULL</literal>





              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>state</structfield></term>
              <listitem><para>
                <type>text</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>country_id</structfield></term>
              <listitem><para>
                <type>integer</type>







                <literal>NOT NULL</literal>






                <literal>REFERENCES</literal> <xref linkend="public.table.country"/>


              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>mail_code</structfield></term>
              <listitem><para>
                <type>text</type>



                <literal>NOT NULL</literal>





              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>created</structfield></term>
              <listitem><para>
                <type>date</type>



                <literal>NOT NULL</literal>



                <literal>DEFAULT now()</literal>



              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>inactive_date</structfield></term>
              <listitem><para>
                <type>timestamp without time zone</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>active</structfield></term>
              <listitem><para>
                <type>boolean</type>



                <literal>NOT NULL</literal>



                <literal>DEFAULT true</literal>



              </para>

            </listitem>
          </varlistentry>

        </variablelist>



        <variablelist>
          <title>Constraints on location</title>

          <varlistentry>
            <term>location_city_check</term>
            <listitem><para>CHECK ((city ~ &apos;[[:alnum:]_]&apos;::text))</para></listitem>
          </varlistentry>



          <varlistentry>
            <term>location_line_one_check</term>
            <listitem><para>CHECK ((line_one ~ &apos;[[:alnum:]_]&apos;::text))</para></listitem>
          </varlistentry>



          <varlistentry>
            <term>location_mail_code_check</term>
            <listitem><para>CHECK ((mail_code ~ &apos;[[:alnum:]_]&apos;::text))</para></listitem>
          </varlistentry>



          <varlistentry>
            <term>location_state_check</term>
            <listitem><para>CHECK ((state ~ &apos;[[:alnum:]_]&apos;::text))</para></listitem>
          </varlistentry>

        </variablelist>





        <variablelist>
          <title>Indexes on location</title>

          <varlistentry>
            <term>location_address_one_gist__idx</term>
            <listitem><para>line_one gist_trgm_ops</para></listitem>
          </varlistentry>



          <varlistentry>
            <term>location_address_three_gist__idx</term>
            <listitem><para>line_three gist_trgm_ops</para></listitem>
          </varlistentry>



          <varlistentry>
            <term>location_address_two_gist__idx</term>
            <listitem><para>line_two gist_trgm_ops</para></listitem>
          </varlistentry>



          <varlistentry>
            <term>location_city_prov_gist_idx</term>
            <listitem><para>city gist_trgm_ops</para></listitem>
          </varlistentry>

        </variablelist>





        <itemizedlist>
          <title>
            Tables referencing company_to_location via Foreign Key Constraints
          </title>

          <listitem>
            <para>
              <xref linkend="public.table.company-to-location"/>
            </para>
          </listitem>



          <listitem>
            <para>
              <xref linkend="public.table.eca-to-location"/>
            </para>
          </listitem>



          <listitem>
            <para>
              <xref linkend="public.table.new-shipto"/>
            </para>
          </listitem>



          <listitem>
            <para>
              <xref linkend="public.table.person-to-company"/>
            </para>
          </listitem>



          <listitem>
            <para>
              <xref linkend="public.table.person-to-location"/>
            </para>
          </listitem>

        </itemizedlist>






      </para>
    </section>

      <section id="public.table.location-class"
               xreflabel="public.location_class">
        <title id="public.table.location-class-title">
         Table:
         
         <structname>location_class</structname>
        </title>
 


        <para>
          <variablelist>
            <title>
              Structure of <structname>location_class</structname>
            </title>


            <varlistentry>
              <term><structfield>id</structfield></term>
              <listitem><para>
                <type>serial</type>




                      <literal>UNIQUE</literal>




                <literal>NOT NULL</literal>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>class</structfield></term>
              <listitem><para>
                <type>text</type>


                <literal>PRIMARY KEY</literal>













              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>authoritative</structfield></term>
              <listitem><para>
                <type>boolean</type>


                <literal>PRIMARY KEY</literal>













              </para>

            </listitem>
          </varlistentry>

        </variablelist>



        <variablelist>
          <title>Constraints on location_class</title>

          <varlistentry>
            <term>location_class_class_check</term>
            <listitem><para>CHECK ((class ~ &apos;[[:alnum:]_]&apos;::text))</para></listitem>
          </varlistentry>

        </variablelist>







        <itemizedlist>
          <title>
            Tables referencing company_to_location via Foreign Key Constraints
          </title>

          <listitem>
            <para>
              <xref linkend="public.table.company-to-location"/>
            </para>
          </listitem>



          <listitem>
            <para>
              <xref linkend="public.table.eca-to-location"/>
            </para>
          </listitem>



          <listitem>
            <para>
              <xref linkend="public.table.person-to-location"/>
            </para>
          </listitem>

        </itemizedlist>






      </para>
    </section>

      <section id="public.table.lsmb-roles"
               xreflabel="public.lsmb_roles">
        <title id="public.table.lsmb-roles-title">
         Table:
         
         <structname>lsmb_roles</structname>
        </title>
 


        <para>
          <variablelist>
            <title>
              Structure of <structname>lsmb_roles</structname>
            </title>


            <varlistentry>
              <term><structfield>user_id</structfield></term>
              <listitem><para>
                <type>integer</type>







                <literal>NOT NULL</literal>






                <literal>REFERENCES</literal> <xref linkend="public.table.users"/>


              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>role</structfield></term>
              <listitem><para>
                <type>text</type>



                <literal>NOT NULL</literal>





              </para>

            </listitem>
          </varlistentry>

        </variablelist>










      </para>
    </section>

      <section id="public.table.makemodel"
               xreflabel="public.makemodel">
        <title id="public.table.makemodel-title">
         Table:
         
         <structname>makemodel</structname>
        </title>
 


        <para>
          <variablelist>
            <title>
              Structure of <structname>makemodel</structname>
            </title>


            <varlistentry>
              <term><structfield>parts_id</structfield></term>
              <listitem><para>
                <type>integer</type>


                <literal>PRIMARY KEY</literal>













              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>make</structfield></term>
              <listitem><para>
                <type>text</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>model</structfield></term>
              <listitem><para>
                <type>text</type>







              </para>

            </listitem>
          </varlistentry>

        </variablelist>





        <variablelist>
          <title>Indexes on makemodel</title>

          <varlistentry>
            <term>makemodel_make_key</term>
            <listitem><para>lower(make)</para></listitem>
          </varlistentry>



          <varlistentry>
            <term>makemodel_model_key</term>
            <listitem><para>lower(model)</para></listitem>
          </varlistentry>



          <varlistentry>
            <term>makemodel_parts_id_key</term>
            <listitem><para>parts_id</para></listitem>
          </varlistentry>

        </variablelist>








      </para>
    </section>

      <section id="public.table.menu-acl"
               xreflabel="public.menu_acl">
        <title id="public.table.menu-acl-title">
         Table:
         
         <structname>menu_acl</structname>
        </title>
 


        <para>
          <variablelist>
            <title>
              Structure of <structname>menu_acl</structname>
            </title>


            <varlistentry>
              <term><structfield>id</structfield></term>
              <listitem><para>
                <type>serial</type>


                <literal>PRIMARY KEY</literal>













              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>role_name</structfield></term>
              <listitem><para>
                <type>character varying</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>acl_type</structfield></term>
              <listitem><para>
                <type>character varying</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>node_id</structfield></term>
              <listitem><para>
                <type>integer</type>












                <literal>REFERENCES</literal> <xref linkend="public.table.menu-node"/>


              </para>

            </listitem>
          </varlistentry>

        </variablelist>



        <variablelist>
          <title>Constraints on menu_acl</title>

          <varlistentry>
            <term>menu_acl_acl_type_check</term>
            <listitem><para>CHECK ((((acl_type)::text = &apos;allow&apos;::text) OR ((acl_type)::text = &apos;deny&apos;::text)))</para></listitem>
          </varlistentry>

        </variablelist>










      </para>
    </section>

      <section id="public.table.menu-attribute"
               xreflabel="public.menu_attribute">
        <title id="public.table.menu-attribute-title">
         Table:
         
         <structname>menu_attribute</structname>
        </title>
 


        <para>
          <variablelist>
            <title>
              Structure of <structname>menu_attribute</structname>
            </title>


            <varlistentry>
              <term><structfield>node_id</structfield></term>
              <listitem><para>
                <type>integer</type>



                <literal>NOT NULL</literal>





              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>attribute</structfield></term>
              <listitem><para>
                <type>character varying</type>



                <literal>NOT NULL</literal>





              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>value</structfield></term>
              <listitem><para>
                <type>character varying</type>



                <literal>NOT NULL</literal>





              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>id</structfield></term>
              <listitem><para>
                <type>serial</type>



                <literal>NOT NULL</literal>





              </para>

            </listitem>
          </varlistentry>

        </variablelist>










      </para>
    </section>

      <section id="public.view.menu-friendly"
               xreflabel="public.menu_friendly">
        <title id="public.view.menu-friendly-title">
         View:
         
         <structname>menu_friendly</structname>
        </title>
 


        <para>
          <variablelist>
            <title>
              Structure of <structname>menu_friendly</structname>
            </title>


            <varlistentry>
              <term><structfield>level</structfield></term>
              <listitem><para>
                <type>integer</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>path</structfield></term>
              <listitem><para>
                <type>text</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>list_order</structfield></term>
              <listitem><para>
                <type>integer</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>label</structfield></term>
              <listitem><para>
                <type>text</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>id</structfield></term>
              <listitem><para>
                <type>integer</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>position</structfield></term>
              <listitem><para>
                <type>integer</type>







              </para>

            </listitem>
          </varlistentry>

        </variablelist>








        <figure>
         <title>Definition of view menu_friendly</title>
         <programlisting>
SELECT t.level
, t.path
, t.list_order
, (repeat
     (&apos; &apos;::text
           , (2 * t.level)
     ) || 
     (n.label)::text
) AS label
, n.id
, n.&quot;position&quot;
FROM (connectby
     (&apos;menu_node&apos;::text
           ,&apos;id&apos;::text
           ,&apos;parent&apos;::text
           ,&apos;position&apos;::text
           ,&apos;0&apos;::text
           , 0
           ,&apos;,&apos;::text
     ) t
     (id integer
           , parent integer
           , level integer
           , path text
           , list_order integer
     )
  JOIN menu_node n 
 USING (id)
);</programlisting>
        </figure>



      </para>
    </section>

      <section id="public.table.menu-node"
               xreflabel="public.menu_node">
        <title id="public.table.menu-node-title">
         Table:
         
         <structname>menu_node</structname>
        </title>
 


        <para>
          <variablelist>
            <title>
              Structure of <structname>menu_node</structname>
            </title>


            <varlistentry>
              <term><structfield>id</structfield></term>
              <listitem><para>
                <type>serial</type>


                <literal>PRIMARY KEY</literal>













              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>label</structfield></term>
              <listitem><para>
                <type>character varying</type>



                <literal>NOT NULL</literal>





              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>parent</structfield></term>
              <listitem><para>
                <type>integer</type>








                      <literal>UNIQUE#1</literal>









                <literal>REFERENCES</literal> <xref linkend="public.table.menu-node"/>




              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>position</structfield></term>
              <listitem><para>
                <type>integer</type>




                      <literal>UNIQUE#1</literal>




                <literal>NOT NULL</literal>







              </para>

            </listitem>
          </varlistentry>

        </variablelist>







        <itemizedlist>
          <title>
            Tables referencing menu_acl via Foreign Key Constraints
          </title>

          <listitem>
            <para>
              <xref linkend="public.table.menu-acl"/>
            </para>
          </listitem>



          <listitem>
            <para>
              <xref linkend="public.table.menu-node"/>
            </para>
          </listitem>

        </itemizedlist>






      </para>
    </section>

      <section id="public.table.new-shipto"
               xreflabel="public.new_shipto">
        <title id="public.table.new-shipto-title">
         Table:
         
         <structname>new_shipto</structname>
        </title>
 


        <para>
          <variablelist>
            <title>
              Structure of <structname>new_shipto</structname>
            </title>


            <varlistentry>
              <term><structfield>id</structfield></term>
              <listitem><para>
                <type>serial</type>


                <literal>PRIMARY KEY</literal>













              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>trans_id</structfield></term>
              <listitem><para>
                <type>integer</type>












                <literal>REFERENCES</literal> <xref linkend="public.table.transactions"/>


              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>oe_id</structfield></term>
              <listitem><para>
                <type>integer</type>












                <literal>REFERENCES</literal> <xref linkend="public.table.oe"/>


              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>location_id</structfield></term>
              <listitem><para>
                <type>integer</type>












                <literal>REFERENCES</literal> <xref linkend="public.table.location"/>


              </para>

            </listitem>
          </varlistentry>

        </variablelist>










      </para>
    </section>

      <section id="public.table.note"
               xreflabel="public.note">
        <title id="public.table.note-title">
         Table:
         
         <structname>note</structname>
        </title>
 


        <para>
          <variablelist>
            <title>
              Structure of <structname>note</structname>
            </title>


            <varlistentry>
              <term><structfield>id</structfield></term>
              <listitem><para>
                <type>serial</type>


                <literal>PRIMARY KEY</literal>













              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>note_class</structfield></term>
              <listitem><para>
                <type>integer</type>







                <literal>NOT NULL</literal>






                <literal>REFERENCES</literal> <xref linkend="public.table.note-class"/>


              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>note</structfield></term>
              <listitem><para>
                <type>text</type>



                <literal>NOT NULL</literal>





              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>vector</structfield></term>
              <listitem><para>
                <type>tsvector</type>



                <literal>NOT NULL</literal>





              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>created</structfield></term>
              <listitem><para>
                <type>timestamp without time zone</type>



                <literal>NOT NULL</literal>



                <literal>DEFAULT now()</literal>



              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>created_by</structfield></term>
              <listitem><para>
                <type>text</type>





                <literal>DEFAULT &quot;session_user&quot;()</literal>



              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>ref_key</structfield></term>
              <listitem><para>
                <type>integer</type>



                <literal>NOT NULL</literal>





              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>subject</structfield></term>
              <listitem><para>
                <type>text</type>







              </para>

            </listitem>
          </varlistentry>

        </variablelist>










      </para>
    </section>

      <section id="public.table.note-class"
               xreflabel="public.note_class">
        <title id="public.table.note-class-title">
         Table:
         
         <structname>note_class</structname>
        </title>
 


        <para>
          <variablelist>
            <title>
              Structure of <structname>note_class</structname>
            </title>


            <varlistentry>
              <term><structfield>id</structfield></term>
              <listitem><para>
                <type>serial</type>


                <literal>PRIMARY KEY</literal>













              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>class</structfield></term>
              <listitem><para>
                <type>text</type>



                <literal>NOT NULL</literal>





              </para>

            </listitem>
          </varlistentry>

        </variablelist>



        <variablelist>
          <title>Constraints on note_class</title>

          <varlistentry>
            <term>note_class_class_check</term>
            <listitem><para>CHECK ((class ~ &apos;[[:alnum:]_]&apos;::text))</para></listitem>
          </varlistentry>

        </variablelist>







        <itemizedlist>
          <title>
            Tables referencing note via Foreign Key Constraints
          </title>

          <listitem>
            <para>
              <xref linkend="public.table.note"/>
            </para>
          </listitem>

        </itemizedlist>






      </para>
    </section>

      <section id="public.table.oe"
               xreflabel="public.oe">
        <title id="public.table.oe-title">
         Table:
         
         <structname>oe</structname>
        </title>
 


        <para>
          <variablelist>
            <title>
              Structure of <structname>oe</structname>
            </title>


            <varlistentry>
              <term><structfield>id</structfield></term>
              <listitem><para>
                <type>serial</type>


                <literal>PRIMARY KEY</literal>













              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>ordnumber</structfield></term>
              <listitem><para>
                <type>text</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>transdate</structfield></term>
              <listitem><para>
                <type>date</type>





                <literal>DEFAULT (&apos;now&apos;::text)::date</literal>



              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>entity_id</structfield></term>
              <listitem><para>
                <type>integer</type>












                <literal>REFERENCES</literal> <xref linkend="public.table.entity"/>


              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>amount</structfield></term>
              <listitem><para>
                <type>numeric</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>netamount</structfield></term>
              <listitem><para>
                <type>numeric</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>reqdate</structfield></term>
              <listitem><para>
                <type>date</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>taxincluded</structfield></term>
              <listitem><para>
                <type>boolean</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>shippingpoint</structfield></term>
              <listitem><para>
                <type>text</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>notes</structfield></term>
              <listitem><para>
                <type>text</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>curr</structfield></term>
              <listitem><para>
                <type>character(3)</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>person_id</structfield></term>
              <listitem><para>
                <type>integer</type>












                <literal>REFERENCES</literal> <xref linkend="public.table.person"/>


              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>closed</structfield></term>
              <listitem><para>
                <type>boolean</type>





                <literal>DEFAULT false</literal>



              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>quotation</structfield></term>
              <listitem><para>
                <type>boolean</type>





                <literal>DEFAULT false</literal>



              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>quonumber</structfield></term>
              <listitem><para>
                <type>text</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>intnotes</structfield></term>
              <listitem><para>
                <type>text</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>department_id</structfield></term>
              <listitem><para>
                <type>integer</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>shipvia</structfield></term>
              <listitem><para>
                <type>text</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>language_code</structfield></term>
              <listitem><para>
                <type>character varying(6)</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>ponumber</structfield></term>
              <listitem><para>
                <type>text</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>terms</structfield></term>
              <listitem><para>
                <type>smallint</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>entity_credit_account</structfield></term>
              <listitem><para>
                <type>integer</type>







                <literal>NOT NULL</literal>






                <literal>REFERENCES</literal> <xref linkend="public.table.entity-credit-account"/>


              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>oe_class_id</structfield></term>
              <listitem><para>
                <type>integer</type>







                <literal>NOT NULL</literal>






                <literal>REFERENCES</literal> <xref linkend="public.table.oe-class"/>


              </para>

            </listitem>
          </varlistentry>

        </variablelist>





        <variablelist>
          <title>Indexes on oe</title>

          <varlistentry>
            <term>oe_id_key</term>
            <listitem><para>id</para></listitem>
          </varlistentry>



          <varlistentry>
            <term>oe_ordnumber_key</term>
            <listitem><para>ordnumber</para></listitem>
          </varlistentry>



          <varlistentry>
            <term>oe_transdate_key</term>
            <listitem><para>transdate</para></listitem>
          </varlistentry>

        </variablelist>





        <itemizedlist>
          <title>
            Tables referencing new_shipto via Foreign Key Constraints
          </title>

          <listitem>
            <para>
              <xref linkend="public.table.new-shipto"/>
            </para>
          </listitem>

        </itemizedlist>






      </para>
    </section>

      <section id="public.table.oe-class"
               xreflabel="public.oe_class">
        <title id="public.table.oe-class-title">
         Table:
         
         <structname>oe_class</structname>
        </title>
 

        <para>
           This could probably be done better. But I need to remove the customer_id/vendor_id relationship and instead rely on a classification 
        </para>


        <para>
          <variablelist>
            <title>
              Structure of <structname>oe_class</structname>
            </title>


            <varlistentry>
              <term><structfield>id</structfield></term>
              <listitem><para>
                <type>smallint</type>




                      <literal>UNIQUE</literal>










              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>oe_class</structfield></term>
              <listitem><para>
                <type>text</type>


                <literal>PRIMARY KEY</literal>













              </para>

            </listitem>
          </varlistentry>

        </variablelist>



        <variablelist>
          <title>Constraints on oe_class</title>

          <varlistentry>
            <term>oe_class_id_check</term>
            <listitem><para>CHECK ((id = ANY (ARRAY[1, 2, 3, 4])))</para></listitem>
          </varlistentry>

        </variablelist>







        <itemizedlist>
          <title>
            Tables referencing oe via Foreign Key Constraints
          </title>

          <listitem>
            <para>
              <xref linkend="public.table.oe"/>
            </para>
          </listitem>

        </itemizedlist>






      </para>
    </section>

      <section id="public.table.open-forms"
               xreflabel="public.open_forms">
        <title id="public.table.open-forms-title">
         Table:
         
         <structname>open_forms</structname>
        </title>
 


        <para>
          <variablelist>
            <title>
              Structure of <structname>open_forms</structname>
            </title>


            <varlistentry>
              <term><structfield>id</structfield></term>
              <listitem><para>
                <type>serial</type>


                <literal>PRIMARY KEY</literal>













              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>session_id</structfield></term>
              <listitem><para>
                <type>integer</type>












                <literal>REFERENCES</literal> <xref linkend="public.table.session"/>


              </para>

            </listitem>
          </varlistentry>

        </variablelist>










      </para>
    </section>

      <section id="public.table.orderitems"
               xreflabel="public.orderitems">
        <title id="public.table.orderitems-title">
         Table:
         
         <structname>orderitems</structname>
        </title>
 


        <para>
          <variablelist>
            <title>
              Structure of <structname>orderitems</structname>
            </title>


            <varlistentry>
              <term><structfield>id</structfield></term>
              <listitem><para>
                <type>serial</type>


                <literal>PRIMARY KEY</literal>













              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>trans_id</structfield></term>
              <listitem><para>
                <type>integer</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>parts_id</structfield></term>
              <listitem><para>
                <type>integer</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>description</structfield></term>
              <listitem><para>
                <type>text</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>qty</structfield></term>
              <listitem><para>
                <type>numeric</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>sellprice</structfield></term>
              <listitem><para>
                <type>numeric</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>discount</structfield></term>
              <listitem><para>
                <type>numeric</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>unit</structfield></term>
              <listitem><para>
                <type>character varying(5)</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>project_id</structfield></term>
              <listitem><para>
                <type>integer</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>reqdate</structfield></term>
              <listitem><para>
                <type>date</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>ship</structfield></term>
              <listitem><para>
                <type>numeric</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>serialnumber</structfield></term>
              <listitem><para>
                <type>text</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>notes</structfield></term>
              <listitem><para>
                <type>text</type>







              </para>

            </listitem>
          </varlistentry>

        </variablelist>





        <variablelist>
          <title>Indexes on orderitems</title>

          <varlistentry>
            <term>orderitems_id_key</term>
            <listitem><para>id</para></listitem>
          </varlistentry>



          <varlistentry>
            <term>orderitems_trans_id_key</term>
            <listitem><para>trans_id</para></listitem>
          </varlistentry>

        </variablelist>








      </para>
    </section>

      <section id="public.view.overpayments"
               xreflabel="public.overpayments">
        <title id="public.view.overpayments-title">
         View:
         
         <structname>overpayments</structname>
        </title>
 


        <para>
          <variablelist>
            <title>
              Structure of <structname>overpayments</structname>
            </title>


            <varlistentry>
              <term><structfield>payment_id</structfield></term>
              <listitem><para>
                <type>integer</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>payment_reference</structfield></term>
              <listitem><para>
                <type>text</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>payment_class</structfield></term>
              <listitem><para>
                <type>integer</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>payment_closed</structfield></term>
              <listitem><para>
                <type>boolean</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>payment_date</structfield></term>
              <listitem><para>
                <type>date</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>chart_id</structfield></term>
              <listitem><para>
                <type>integer</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>accno</structfield></term>
              <listitem><para>
                <type>text</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>chart_description</structfield></term>
              <listitem><para>
                <type>text</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>department_id</structfield></term>
              <listitem><para>
                <type>integer</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>available</structfield></term>
              <listitem><para>
                <type>numeric</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>legal_name</structfield></term>
              <listitem><para>
                <type>text</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>entity_credit_id</structfield></term>
              <listitem><para>
                <type>integer</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>entity_id</structfield></term>
              <listitem><para>
                <type>integer</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>discount</structfield></term>
              <listitem><para>
                <type>numeric</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>meta_number</structfield></term>
              <listitem><para>
                <type>character varying(32)</type>







              </para>

            </listitem>
          </varlistentry>

        </variablelist>








        <figure>
         <title>Definition of view overpayments</title>
         <programlisting>
SELECT p.id AS payment_id
, p.reference AS payment_reference
, p.payment_class
, p.closed AS payment_closed
, p.payment_date
, ac.chart_id
, c.accno
, c.description AS chart_description
, p.department_id
, abs
(sum
     (ac.amount)
) AS available
, cmp.legal_name
, eca.id AS entity_credit_id
, eca.entity_id
, eca.discount
, eca.meta_number 
FROM (
     (
           (
                 (
                       (payment p 
                          JOIN payment_links pl 
                            ON (
                                   (pl.payment_id = p.id)
                             )
                       )
                    JOIN acc_trans ac 
                      ON (
                             (ac.entry_id = pl.entry_id)
                       )
                 )
              JOIN chart c 
                ON (
                       (c.id = ac.chart_id)
                 )
           )
        JOIN entity_credit_account eca 
          ON (
                 (eca.id = p.entity_credit_id)
           )
     )
  JOIN company cmp 
    ON (
           (cmp.entity_id = eca.entity_id)
     )
)
WHERE (
     (
           (p.gl_id IS NOT NULL)
         AND (
                 (pl.type = 2)
                OR (pl.type = 0)
           )
     )
   AND (c.link ~~ &apos;%overpayment%&apos;::text)
)
GROUP BY p.id
, c.accno
, p.reference
, p.payment_class
, p.closed
, p.payment_date
, ac.chart_id
, c.description
, p.department_id
, cmp.legal_name
, eca.id
, eca.entity_id
, eca.discount
, eca.meta_number;</programlisting>
        </figure>



      </para>
    </section>

      <section id="public.table.parts"
               xreflabel="public.parts">
        <title id="public.table.parts-title">
         Table:
         
         <structname>parts</structname>
        </title>
 


        <para>
          <variablelist>
            <title>
              Structure of <structname>parts</structname>
            </title>


            <varlistentry>
              <term><structfield>id</structfield></term>
              <listitem><para>
                <type>serial</type>


                <literal>PRIMARY KEY</literal>













              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>partnumber</structfield></term>
              <listitem><para>
                <type>text</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>description</structfield></term>
              <listitem><para>
                <type>text</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>unit</structfield></term>
              <listitem><para>
                <type>character varying(5)</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>listprice</structfield></term>
              <listitem><para>
                <type>numeric</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>sellprice</structfield></term>
              <listitem><para>
                <type>numeric</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>lastcost</structfield></term>
              <listitem><para>
                <type>numeric</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>priceupdate</structfield></term>
              <listitem><para>
                <type>date</type>





                <literal>DEFAULT (&apos;now&apos;::text)::date</literal>



              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>weight</structfield></term>
              <listitem><para>
                <type>numeric</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>onhand</structfield></term>
              <listitem><para>
                <type>numeric</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>notes</structfield></term>
              <listitem><para>
                <type>text</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>makemodel</structfield></term>
              <listitem><para>
                <type>boolean</type>





                <literal>DEFAULT false</literal>



              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>assembly</structfield></term>
              <listitem><para>
                <type>boolean</type>





                <literal>DEFAULT false</literal>



              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>alternate</structfield></term>
              <listitem><para>
                <type>boolean</type>





                <literal>DEFAULT false</literal>



              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>rop</structfield></term>
              <listitem><para>
                <type>numeric</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>inventory_accno_id</structfield></term>
              <listitem><para>
                <type>integer</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>income_accno_id</structfield></term>
              <listitem><para>
                <type>integer</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>expense_accno_id</structfield></term>
              <listitem><para>
                <type>integer</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>bin</structfield></term>
              <listitem><para>
                <type>text</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>obsolete</structfield></term>
              <listitem><para>
                <type>boolean</type>





                <literal>DEFAULT false</literal>



              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>bom</structfield></term>
              <listitem><para>
                <type>boolean</type>





                <literal>DEFAULT false</literal>



              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>image</structfield></term>
              <listitem><para>
                <type>text</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>drawing</structfield></term>
              <listitem><para>
                <type>text</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>microfiche</structfield></term>
              <listitem><para>
                <type>text</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>partsgroup_id</structfield></term>
              <listitem><para>
                <type>integer</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>project_id</structfield></term>
              <listitem><para>
                <type>integer</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>avgcost</structfield></term>
              <listitem><para>
                <type>numeric</type>







              </para>

            </listitem>
          </varlistentry>

        </variablelist>





        <variablelist>
          <title>Indexes on parts</title>

          <varlistentry>
            <term>parts_description_key</term>
            <listitem><para>lower(description)</para></listitem>
          </varlistentry>



          <varlistentry>
            <term>parts_id_key</term>
            <listitem><para>id</para></listitem>
          </varlistentry>



          <varlistentry>
            <term>parts_partnumber_key</term>
            <listitem><para>lower(partnumber)</para></listitem>
          </varlistentry>

        </variablelist>





        <itemizedlist>
          <title>
            Tables referencing partstax via Foreign Key Constraints
          </title>

          <listitem>
            <para>
              <xref linkend="public.table.partstax"/>
            </para>
          </listitem>

        </itemizedlist>






      </para>
    </section>

      <section id="public.table.partscustomer"
               xreflabel="public.partscustomer">
        <title id="public.table.partscustomer-title">
         Table:
         
         <structname>partscustomer</structname>
        </title>
 


        <para>
          <variablelist>
            <title>
              Structure of <structname>partscustomer</structname>
            </title>


            <varlistentry>
              <term><structfield>parts_id</structfield></term>
              <listitem><para>
                <type>integer</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>customer_id</structfield></term>
              <listitem><para>
                <type>integer</type>







                <literal>NOT NULL</literal>






                <literal>REFERENCES</literal> <xref linkend="public.table.entity-credit-account"/>


              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>pricegroup_id</structfield></term>
              <listitem><para>
                <type>integer</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>pricebreak</structfield></term>
              <listitem><para>
                <type>numeric</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>sellprice</structfield></term>
              <listitem><para>
                <type>numeric</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>validfrom</structfield></term>
              <listitem><para>
                <type>date</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>validto</structfield></term>
              <listitem><para>
                <type>date</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>curr</structfield></term>
              <listitem><para>
                <type>character(3)</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>entry_id</structfield></term>
              <listitem><para>
                <type>serial</type>


                <literal>PRIMARY KEY</literal>













              </para>

            </listitem>
          </varlistentry>

        </variablelist>










      </para>
    </section>

      <section id="public.table.partsgroup"
               xreflabel="public.partsgroup">
        <title id="public.table.partsgroup-title">
         Table:
         
         <structname>partsgroup</structname>
        </title>
 


        <para>
          <variablelist>
            <title>
              Structure of <structname>partsgroup</structname>
            </title>


            <varlistentry>
              <term><structfield>id</structfield></term>
              <listitem><para>
                <type>serial</type>


                <literal>PRIMARY KEY</literal>













              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>partsgroup</structfield></term>
              <listitem><para>
                <type>text</type>







              </para>

            </listitem>
          </varlistentry>

        </variablelist>





        <variablelist>
          <title>Indexes on partsgroup</title>

          <varlistentry>
            <term>partsgroup_id_key</term>
            <listitem><para>id</para></listitem>
          </varlistentry>

        </variablelist>








      </para>
    </section>

      <section id="public.table.partstax"
               xreflabel="public.partstax">
        <title id="public.table.partstax-title">
         Table:
         
         <structname>partstax</structname>
        </title>
 


        <para>
          <variablelist>
            <title>
              Structure of <structname>partstax</structname>
            </title>


            <varlistentry>
              <term><structfield>parts_id</structfield></term>
              <listitem><para>
                <type>integer</type>






                <literal>PRIMARY KEY</literal>












                <literal>REFERENCES</literal> <xref linkend="public.table.parts"/>




              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>chart_id</structfield></term>
              <listitem><para>
                <type>integer</type>






                <literal>PRIMARY KEY</literal>












                <literal>REFERENCES</literal> <xref linkend="public.table.account"/>




              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>taxcategory_id</structfield></term>
              <listitem><para>
                <type>integer</type>












                <literal>REFERENCES</literal> <xref linkend="public.table.taxcategory"/>


              </para>

            </listitem>
          </varlistentry>

        </variablelist>





        <variablelist>
          <title>Indexes on partstax</title>

          <varlistentry>
            <term>partstax_parts_id_key</term>
            <listitem><para>parts_id</para></listitem>
          </varlistentry>

        </variablelist>








      </para>
    </section>

      <section id="public.table.partsvendor"
               xreflabel="public.partsvendor">
        <title id="public.table.partsvendor-title">
         Table:
         
         <structname>partsvendor</structname>
        </title>
 


        <para>
          <variablelist>
            <title>
              Structure of <structname>partsvendor</structname>
            </title>


            <varlistentry>
              <term><structfield>entity_id</structfield></term>
              <listitem><para>
                <type>integer</type>







                <literal>NOT NULL</literal>






                <literal>REFERENCES</literal> <xref linkend="public.table.entity-credit-account"/>


              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>parts_id</structfield></term>
              <listitem><para>
                <type>integer</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>partnumber</structfield></term>
              <listitem><para>
                <type>text</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>leadtime</structfield></term>
              <listitem><para>
                <type>smallint</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>lastcost</structfield></term>
              <listitem><para>
                <type>numeric</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>curr</structfield></term>
              <listitem><para>
                <type>character(3)</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>entry_id</structfield></term>
              <listitem><para>
                <type>serial</type>


                <literal>PRIMARY KEY</literal>













              </para>

            </listitem>
          </varlistentry>

        </variablelist>





        <variablelist>
          <title>Indexes on partsvendor</title>

          <varlistentry>
            <term>partsvendor_parts_id_key</term>
            <listitem><para>parts_id</para></listitem>
          </varlistentry>

        </variablelist>








      </para>
    </section>

      <section id="public.table.payment"
               xreflabel="public.payment">
        <title id="public.table.payment-title">
         Table:
         
         <structname>payment</structname>
        </title>
 

        <para>
           This table will store the main data on a payment, prepayment, overpayment, et
        </para>


        <para>
          <variablelist>
            <title>
              Structure of <structname>payment</structname>
            </title>


            <varlistentry>
              <term><structfield>id</structfield></term>
              <listitem><para>
                <type>serial</type>


                <literal>PRIMARY KEY</literal>













              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>reference</structfield></term>
              <listitem><para>
                <type>text</type>



                <literal>NOT NULL</literal>





              </para>

              <para>
                 This field will store the code for both receipts and payment order  
              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>gl_id</structfield></term>
              <listitem><para>
                <type>integer</type>












                <literal>REFERENCES</literal> <xref linkend="public.table.gl"/>


              </para>

              <para>
                 A payment should always be linked to a GL movement 
              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>payment_class</structfield></term>
              <listitem><para>
                <type>integer</type>



                <literal>NOT NULL</literal>





              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>payment_date</structfield></term>
              <listitem><para>
                <type>date</type>





                <literal>DEFAULT (&apos;now&apos;::text)::date</literal>



              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>closed</structfield></term>
              <listitem><para>
                <type>boolean</type>





                <literal>DEFAULT false</literal>



              </para>

              <para>
                 This will store the current state of a payment/receipt order 
              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>entity_credit_id</structfield></term>
              <listitem><para>
                <type>integer</type>












                <literal>REFERENCES</literal> <xref linkend="public.table.entity-credit-account"/>


              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>employee_id</structfield></term>
              <listitem><para>
                <type>integer</type>












                <literal>REFERENCES</literal> <xref linkend="public.table.person"/>


              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>currency</structfield></term>
              <listitem><para>
                <type>character(3)</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>notes</structfield></term>
              <listitem><para>
                <type>text</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>department_id</structfield></term>
              <listitem><para>
                <type>integer</type>







              </para>

            </listitem>
          </varlistentry>

        </variablelist>





        <variablelist>
          <title>Indexes on payment</title>

          <varlistentry>
            <term>payment_id_idx</term>
            <listitem><para>id</para></listitem>
          </varlistentry>

        </variablelist>





        <itemizedlist>
          <title>
            Tables referencing payment_links via Foreign Key Constraints
          </title>

          <listitem>
            <para>
              <xref linkend="public.table.payment-links"/>
            </para>
          </listitem>

        </itemizedlist>






      </para>
    </section>

      <section id="public.table.payment-links"
               xreflabel="public.payment_links">
        <title id="public.table.payment-links-title">
         Table:
         
         <structname>payment_links</structname>
        </title>
 

        <para>
            
 An explanation to the type field.
 * A type 0 means the link is referencing an ar/ap  and was created
   using an overpayment movement after the receipt was created 
 * A type 1 means the link is referencing an ar/ap and  was made 
   on the payment creation, its not the product of an overpayment movement 
 * A type 2 means the link is not referencing an ar/ap and its the product
   of the overpayment logic 

 With this ideas in order we can do the following

 To get the payment amount we will sum the entries with type &gt; 0.
 To get the linked amount we will sum the entries with type &lt; 2.
 The overpayment account can be obtained from the entries with type = 2.

 This reasoning is hacky and i hope it can dissapear when we get to 1.4 - D.M.

        </para>


        <para>
          <variablelist>
            <title>
              Structure of <structname>payment_links</structname>
            </title>


            <varlistentry>
              <term><structfield>payment_id</structfield></term>
              <listitem><para>
                <type>integer</type>












                <literal>REFERENCES</literal> <xref linkend="public.table.payment"/>


              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>entry_id</structfield></term>
              <listitem><para>
                <type>integer</type>












                <literal>REFERENCES</literal> <xref linkend="public.table.acc-trans"/>


              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>type</structfield></term>
              <listitem><para>
                <type>integer</type>







              </para>

            </listitem>
          </varlistentry>

        </variablelist>










      </para>
    </section>

      <section id="public.table.payment-type"
               xreflabel="public.payment_type">
        <title id="public.table.payment-type-title">
         Table:
         
         <structname>payment_type</structname>
        </title>
 


        <para>
          <variablelist>
            <title>
              Structure of <structname>payment_type</structname>
            </title>


            <varlistentry>
              <term><structfield>id</structfield></term>
              <listitem><para>
                <type>serial</type>




                      <literal>UNIQUE</literal>




                <literal>NOT NULL</literal>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>label</structfield></term>
              <listitem><para>
                <type>text</type>


                <literal>PRIMARY KEY</literal>













              </para>

            </listitem>
          </varlistentry>

        </variablelist>










      </para>
    </section>

      <section id="public.table.payments-queue"
               xreflabel="public.payments_queue">
        <title id="public.table.payments-queue-title">
         Table:
         
         <structname>payments_queue</structname>
        </title>
 

        <para>
           This is a holding table and hence not a candidate for normalization.
Jobs should be deleted from this table when they complete successfully.
        </para>


        <para>
          <variablelist>
            <title>
              Structure of <structname>payments_queue</structname>
            </title>


            <varlistentry>
              <term><structfield>transactions</structfield></term>
              <listitem><para>
                <type>numeric[]</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>batch_id</structfield></term>
              <listitem><para>
                <type>integer</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>source</structfield></term>
              <listitem><para>
                <type>text</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>total</structfield></term>
              <listitem><para>
                <type>numeric</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>ar_ap_accno</structfield></term>
              <listitem><para>
                <type>text</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>cash_accno</structfield></term>
              <listitem><para>
                <type>text</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>payment_date</structfield></term>
              <listitem><para>
                <type>date</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>account_class</structfield></term>
              <listitem><para>
                <type>integer</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>job_id</structfield></term>
              <listitem><para>
                <type>integer</type>









                <literal>DEFAULT currval(&apos;pending_job_id_seq&apos;::regclass)</literal>




                <literal>REFERENCES</literal> <xref linkend="public.table.pending-job"/>


              </para>

            </listitem>
          </varlistentry>

        </variablelist>





        <variablelist>
          <title>Indexes on payments_queue</title>

          <varlistentry>
            <term>payments_queue_job_id</term>
            <listitem><para>job_id</para></listitem>
          </varlistentry>

        </variablelist>








      </para>
    </section>

      <section id="public.table.pending-job"
               xreflabel="public.pending_job">
        <title id="public.table.pending-job-title">
         Table:
         
         <structname>pending_job</structname>
        </title>
 

        <para>
           Purpose:  This table stores pending/queued jobs to be processed async.
Additionally, this functions as a log of all such processing for purposes of 
internal audits, performance tuning, and the like. 
        </para>


        <para>
          <variablelist>
            <title>
              Structure of <structname>pending_job</structname>
            </title>


            <varlistentry>
              <term><structfield>id</structfield></term>
              <listitem><para>
                <type>serial</type>




                      <literal>UNIQUE</literal>




                <literal>NOT NULL</literal>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>batch_class</structfield></term>
              <listitem><para>
                <type>integer</type>












                <literal>REFERENCES</literal> <xref linkend="public.table.batch-class"/>


              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>entered_by</structfield></term>
              <listitem><para>
                <type>text</type>







                <literal>NOT NULL</literal>



                <literal>DEFAULT &quot;session_user&quot;()</literal>




                <literal>REFERENCES</literal> <xref linkend="public.table.users"/>


              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>entered_at</structfield></term>
              <listitem><para>
                <type>timestamp without time zone</type>





                <literal>DEFAULT now()</literal>



              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>batch_id</structfield></term>
              <listitem><para>
                <type>integer</type>












                <literal>REFERENCES</literal> <xref linkend="public.table.batch"/>


              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>completed_at</structfield></term>
              <listitem><para>
                <type>timestamp without time zone</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>success</structfield></term>
              <listitem><para>
                <type>boolean</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>error_condition</structfield></term>
              <listitem><para>
                <type>text</type>







              </para>

            </listitem>
          </varlistentry>

        </variablelist>



        <variablelist>
          <title>Constraints on pending_job</title>

          <varlistentry>
            <term>pending_job_check</term>
            <listitem><para>CHECK (((completed_at IS NULL) OR (success IS NOT NULL)))</para></listitem>
          </varlistentry>



          <varlistentry>
            <term>pending_job_check1</term>
            <listitem><para>CHECK (((success IS NOT FALSE) OR (error_condition IS NOT NULL)))</para></listitem>
          </varlistentry>

        </variablelist>





        <variablelist>
          <title>Indexes on pending_job</title>

          <varlistentry>
            <term>pending_job_batch_id_pending</term>
            <listitem><para>batch_id) WHERE (success IS NULL</para></listitem>
          </varlistentry>



          <varlistentry>
            <term>pending_job_entered_by</term>
            <listitem><para>entered_by</para></listitem>
          </varlistentry>

        </variablelist>





        <itemizedlist>
          <title>
            Tables referencing payments_queue via Foreign Key Constraints
          </title>

          <listitem>
            <para>
              <xref linkend="public.table.payments-queue"/>
            </para>
          </listitem>

        </itemizedlist>






      </para>
    </section>

      <section id="public.table.pending-reports"
               xreflabel="public.pending_reports">
        <title id="public.table.pending-reports-title">
         Table:
         
         <structname>pending_reports</structname>
        </title>
 


        <para>
          <variablelist>
            <title>
              Structure of <structname>pending_reports</structname>
            </title>


            <varlistentry>
              <term><structfield>id</structfield></term>
              <listitem><para>
                <type>bigserial</type>


                <literal>PRIMARY KEY</literal>













              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>report_id</structfield></term>
              <listitem><para>
                <type>integer</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>scn</structfield></term>
              <listitem><para>
                <type>integer</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>their_balance</structfield></term>
              <listitem><para>
                <type>integer</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>our_balance</structfield></term>
              <listitem><para>
                <type>integer</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>errorcode</structfield></term>
              <listitem><para>
                <type>integer</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>entered_by</structfield></term>
              <listitem><para>
                <type>integer</type>







                <literal>NOT NULL</literal>






                <literal>REFERENCES</literal> <xref linkend="public.table.entity"/>


              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>corrections</structfield></term>
              <listitem><para>
                <type>integer</type>



                <literal>NOT NULL</literal>





              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>clear_time</structfield></term>
              <listitem><para>
                <type>timestamp without time zone</type>



                <literal>NOT NULL</literal>





              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>insert_time</structfield></term>
              <listitem><para>
                <type>timestamp with time zone</type>



                <literal>NOT NULL</literal>



                <literal>DEFAULT now()</literal>



              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>ledger_id</structfield></term>
              <listitem><para>
                <type>integer</type>












                <literal>REFERENCES</literal> <xref linkend="public.table.acc-trans"/>


              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>overlook</structfield></term>
              <listitem><para>
                <type>boolean</type>



                <literal>NOT NULL</literal>



                <literal>DEFAULT false</literal>



              </para>

            </listitem>
          </varlistentry>

        </variablelist>







        <itemizedlist>
          <title>
            Tables referencing report_corrections via Foreign Key Constraints
          </title>

          <listitem>
            <para>
              <xref linkend="public.table.report-corrections"/>
            </para>
          </listitem>

        </itemizedlist>






      </para>
    </section>

      <section id="public.table.person"
               xreflabel="public.person">
        <title id="public.table.person-title">
         Table:
         
         <structname>person</structname>
        </title>
 

        <para>
           Every person, must have an entity to derive a common or display name. The correct way to get class information on a person would be person.entity_id-&gt;entity_class_to_entity.entity_id. 
        </para>


        <para>
          <variablelist>
            <title>
              Structure of <structname>person</structname>
            </title>


            <varlistentry>
              <term><structfield>id</structfield></term>
              <listitem><para>
                <type>serial</type>


                <literal>PRIMARY KEY</literal>













              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>entity_id</structfield></term>
              <listitem><para>
                <type>integer</type>







                <literal>NOT NULL</literal>






                <literal>REFERENCES</literal> <xref linkend="public.table.entity"/>


              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>salutation_id</structfield></term>
              <listitem><para>
                <type>integer</type>












                <literal>REFERENCES</literal> <xref linkend="public.table.salutation"/>


              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>first_name</structfield></term>
              <listitem><para>
                <type>text</type>



                <literal>NOT NULL</literal>





              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>middle_name</structfield></term>
              <listitem><para>
                <type>text</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>last_name</structfield></term>
              <listitem><para>
                <type>text</type>



                <literal>NOT NULL</literal>





              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>created</structfield></term>
              <listitem><para>
                <type>date</type>



                <literal>NOT NULL</literal>



                <literal>DEFAULT (&apos;now&apos;::text)::date</literal>



              </para>

            </listitem>
          </varlistentry>

        </variablelist>



        <variablelist>
          <title>Constraints on person</title>

          <varlistentry>
            <term>person_first_name_check</term>
            <listitem><para>CHECK ((first_name ~ &apos;[[:alnum:]_]&apos;::text))</para></listitem>
          </varlistentry>



          <varlistentry>
            <term>person_last_name_check</term>
            <listitem><para>CHECK ((last_name ~ &apos;[[:alnum:]_]&apos;::text))</para></listitem>
          </varlistentry>

        </variablelist>







        <itemizedlist>
          <title>
            Tables referencing audittrail via Foreign Key Constraints
          </title>

          <listitem>
            <para>
              <xref linkend="public.table.audittrail"/>
            </para>
          </listitem>



          <listitem>
            <para>
              <xref linkend="public.table.entity-credit-account"/>
            </para>
          </listitem>



          <listitem>
            <para>
              <xref linkend="public.table.gl"/>
            </para>
          </listitem>



          <listitem>
            <para>
              <xref linkend="public.table.jcitems"/>
            </para>
          </listitem>



          <listitem>
            <para>
              <xref linkend="public.table.oe"/>
            </para>
          </listitem>



          <listitem>
            <para>
              <xref linkend="public.table.payment"/>
            </para>
          </listitem>



          <listitem>
            <para>
              <xref linkend="public.table.person-to-company"/>
            </para>
          </listitem>



          <listitem>
            <para>
              <xref linkend="public.table.person-to-contact"/>
            </para>
          </listitem>



          <listitem>
            <para>
              <xref linkend="public.table.person-to-entity"/>
            </para>
          </listitem>



          <listitem>
            <para>
              <xref linkend="public.table.person-to-location"/>
            </para>
          </listitem>

        </itemizedlist>






      </para>
    </section>

      <section id="public.table.person-to-company"
               xreflabel="public.person_to_company">
        <title id="public.table.person-to-company-title">
         Table:
         
         <structname>person_to_company</structname>
        </title>
 


        <para>
          <variablelist>
            <title>
              Structure of <structname>person_to_company</structname>
            </title>


            <varlistentry>
              <term><structfield>location_id</structfield></term>
              <listitem><para>
                <type>integer</type>






                <literal>PRIMARY KEY</literal>












                <literal>REFERENCES</literal> <xref linkend="public.table.location"/>




              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>person_id</structfield></term>
              <listitem><para>
                <type>integer</type>






                <literal>PRIMARY KEY</literal>












                <literal>REFERENCES</literal> <xref linkend="public.table.person"/>




              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>company_id</structfield></term>
              <listitem><para>
                <type>integer</type>







                <literal>NOT NULL</literal>






                <literal>REFERENCES</literal> <xref linkend="public.table.company"/>


              </para>

            </listitem>
          </varlistentry>

        </variablelist>










      </para>
    </section>

      <section id="public.table.person-to-contact"
               xreflabel="public.person_to_contact">
        <title id="public.table.person-to-contact-title">
         Table:
         
         <structname>person_to_contact</structname>
        </title>
 

        <para>
           To keep track of the relationship between multiple contact methods and a single individual 
        </para>


        <para>
          <variablelist>
            <title>
              Structure of <structname>person_to_contact</structname>
            </title>


            <varlistentry>
              <term><structfield>person_id</structfield></term>
              <listitem><para>
                <type>integer</type>






                <literal>PRIMARY KEY</literal>












                <literal>REFERENCES</literal> <xref linkend="public.table.person"/>




              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>contact_class_id</structfield></term>
              <listitem><para>
                <type>integer</type>






                <literal>PRIMARY KEY</literal>












                <literal>REFERENCES</literal> <xref linkend="public.table.contact-class"/>




              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>contact</structfield></term>
              <listitem><para>
                <type>text</type>


                <literal>PRIMARY KEY</literal>













              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>description</structfield></term>
              <listitem><para>
                <type>text</type>







              </para>

            </listitem>
          </varlistentry>

        </variablelist>



        <variablelist>
          <title>Constraints on person_to_contact</title>

          <varlistentry>
            <term>person_to_contact_contact_check</term>
            <listitem><para>CHECK ((contact ~ &apos;[[:alnum:]_]&apos;::text))</para></listitem>
          </varlistentry>

        </variablelist>










      </para>
    </section>

      <section id="public.table.person-to-entity"
               xreflabel="public.person_to_entity">
        <title id="public.table.person-to-entity-title">
         Table:
         
         <structname>person_to_entity</structname>
        </title>
 


        <para>
          <variablelist>
            <title>
              Structure of <structname>person_to_entity</structname>
            </title>


            <varlistentry>
              <term><structfield>person_id</structfield></term>
              <listitem><para>
                <type>integer</type>






                <literal>PRIMARY KEY</literal>












                <literal>REFERENCES</literal> <xref linkend="public.table.person"/>




              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>entity_id</structfield></term>
              <listitem><para>
                <type>integer</type>






                <literal>PRIMARY KEY</literal>












                <literal>REFERENCES</literal> <xref linkend="public.table.entity"/>




              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>related_how</structfield></term>
              <listitem><para>
                <type>text</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>created</structfield></term>
              <listitem><para>
                <type>date</type>



                <literal>NOT NULL</literal>



                <literal>DEFAULT (&apos;now&apos;::text)::date</literal>



              </para>

            </listitem>
          </varlistentry>

        </variablelist>



        <variablelist>
          <title>Constraints on person_to_entity</title>

          <varlistentry>
            <term>person_to_entity_check</term>
            <listitem><para>CHECK ((entity_id &lt;&gt; person_id))</para></listitem>
          </varlistentry>

        </variablelist>










      </para>
    </section>

      <section id="public.table.person-to-location"
               xreflabel="public.person_to_location">
        <title id="public.table.person-to-location-title">
         Table:
         
         <structname>person_to_location</structname>
        </title>
 


        <para>
          <variablelist>
            <title>
              Structure of <structname>person_to_location</structname>
            </title>


            <varlistentry>
              <term><structfield>location_id</structfield></term>
              <listitem><para>
                <type>integer</type>






                <literal>PRIMARY KEY</literal>












                <literal>REFERENCES</literal> <xref linkend="public.table.location"/>




              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>location_class</structfield></term>
              <listitem><para>
                <type>integer</type>







                <literal>NOT NULL</literal>






                <literal>REFERENCES</literal> <xref linkend="public.table.location-class"/>


              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>person_id</structfield></term>
              <listitem><para>
                <type>integer</type>






                <literal>PRIMARY KEY</literal>












                <literal>REFERENCES</literal> <xref linkend="public.table.person"/>




              </para>

            </listitem>
          </varlistentry>

        </variablelist>










      </para>
    </section>

      <section id="public.table.pricegroup"
               xreflabel="public.pricegroup">
        <title id="public.table.pricegroup-title">
         Table:
         
         <structname>pricegroup</structname>
        </title>
 


        <para>
          <variablelist>
            <title>
              Structure of <structname>pricegroup</structname>
            </title>


            <varlistentry>
              <term><structfield>id</structfield></term>
              <listitem><para>
                <type>serial</type>


                <literal>PRIMARY KEY</literal>













              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>pricegroup</structfield></term>
              <listitem><para>
                <type>text</type>







              </para>

            </listitem>
          </varlistentry>

        </variablelist>





        <variablelist>
          <title>Indexes on pricegroup</title>

          <varlistentry>
            <term>pricegroup_id_key</term>
            <listitem><para>id</para></listitem>
          </varlistentry>



          <varlistentry>
            <term>pricegroup_pricegroup_key</term>
            <listitem><para>pricegroup</para></listitem>
          </varlistentry>

        </variablelist>





        <itemizedlist>
          <title>
            Tables referencing entity_credit_account via Foreign Key Constraints
          </title>

          <listitem>
            <para>
              <xref linkend="public.table.entity-credit-account"/>
            </para>
          </listitem>

        </itemizedlist>






      </para>
    </section>

      <section id="public.table.project"
               xreflabel="public.project">
        <title id="public.table.project-title">
         Table:
         
         <structname>project</structname>
        </title>
 


        <para>
          <variablelist>
            <title>
              Structure of <structname>project</structname>
            </title>


            <varlistentry>
              <term><structfield>id</structfield></term>
              <listitem><para>
                <type>serial</type>


                <literal>PRIMARY KEY</literal>













              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>projectnumber</structfield></term>
              <listitem><para>
                <type>text</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>description</structfield></term>
              <listitem><para>
                <type>text</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>startdate</structfield></term>
              <listitem><para>
                <type>date</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>enddate</structfield></term>
              <listitem><para>
                <type>date</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>parts_id</structfield></term>
              <listitem><para>
                <type>integer</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>production</structfield></term>
              <listitem><para>
                <type>numeric</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>completed</structfield></term>
              <listitem><para>
                <type>numeric</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>credit_id</structfield></term>
              <listitem><para>
                <type>integer</type>












                <literal>REFERENCES</literal> <xref linkend="public.table.entity-credit-account"/>


              </para>

            </listitem>
          </varlistentry>

        </variablelist>





        <variablelist>
          <title>Indexes on project</title>

          <varlistentry>
            <term>project_id_key</term>
            <listitem><para>id</para></listitem>
          </varlistentry>

        </variablelist>








      </para>
    </section>

      <section id="public.table.recurring"
               xreflabel="public.recurring">
        <title id="public.table.recurring-title">
         Table:
         
         <structname>recurring</structname>
        </title>
 


        <para>
          <variablelist>
            <title>
              Structure of <structname>recurring</structname>
            </title>


            <varlistentry>
              <term><structfield>id</structfield></term>
              <listitem><para>
                <type>integer</type>


                <literal>PRIMARY KEY</literal>









                <literal>DEFAULT nextval(&apos;id&apos;::regclass)</literal>





              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>reference</structfield></term>
              <listitem><para>
                <type>text</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>startdate</structfield></term>
              <listitem><para>
                <type>date</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>nextdate</structfield></term>
              <listitem><para>
                <type>date</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>enddate</structfield></term>
              <listitem><para>
                <type>date</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>repeat</structfield></term>
              <listitem><para>
                <type>smallint</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>unit</structfield></term>
              <listitem><para>
                <type>character varying(6)</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>howmany</structfield></term>
              <listitem><para>
                <type>integer</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>payment</structfield></term>
              <listitem><para>
                <type>boolean</type>





                <literal>DEFAULT false</literal>



              </para>

            </listitem>
          </varlistentry>

        </variablelist>










      </para>
    </section>

      <section id="public.table.recurringemail"
               xreflabel="public.recurringemail">
        <title id="public.table.recurringemail-title">
         Table:
         
         <structname>recurringemail</structname>
        </title>
 


        <para>
          <variablelist>
            <title>
              Structure of <structname>recurringemail</structname>
            </title>


            <varlistentry>
              <term><structfield>id</structfield></term>
              <listitem><para>
                <type>integer</type>


                <literal>PRIMARY KEY</literal>













              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>formname</structfield></term>
              <listitem><para>
                <type>text</type>


                <literal>PRIMARY KEY</literal>













              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>format</structfield></term>
              <listitem><para>
                <type>text</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>message</structfield></term>
              <listitem><para>
                <type>text</type>







              </para>

            </listitem>
          </varlistentry>

        </variablelist>










      </para>
    </section>

      <section id="public.table.recurringprint"
               xreflabel="public.recurringprint">
        <title id="public.table.recurringprint-title">
         Table:
         
         <structname>recurringprint</structname>
        </title>
 


        <para>
          <variablelist>
            <title>
              Structure of <structname>recurringprint</structname>
            </title>


            <varlistentry>
              <term><structfield>id</structfield></term>
              <listitem><para>
                <type>integer</type>


                <literal>PRIMARY KEY</literal>













              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>formname</structfield></term>
              <listitem><para>
                <type>text</type>


                <literal>PRIMARY KEY</literal>













              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>format</structfield></term>
              <listitem><para>
                <type>text</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>printer</structfield></term>
              <listitem><para>
                <type>text</type>







              </para>

            </listitem>
          </varlistentry>

        </variablelist>










      </para>
    </section>

      <section id="public.table.report-corrections"
               xreflabel="public.report_corrections">
        <title id="public.table.report-corrections-title">
         Table:
         
         <structname>report_corrections</structname>
        </title>
 


        <para>
          <variablelist>
            <title>
              Structure of <structname>report_corrections</structname>
            </title>


            <varlistentry>
              <term><structfield>id</structfield></term>
              <listitem><para>
                <type>serial</type>


                <literal>PRIMARY KEY</literal>













              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>correction_id</structfield></term>
              <listitem><para>
                <type>integer</type>



                <literal>NOT NULL</literal>



                <literal>DEFAULT 1</literal>



              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>entry_in</structfield></term>
              <listitem><para>
                <type>integer</type>







                <literal>NOT NULL</literal>






                <literal>REFERENCES</literal> <xref linkend="public.table.pending-reports"/>


              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>entered_by</structfield></term>
              <listitem><para>
                <type>integer</type>



                <literal>NOT NULL</literal>





              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>reason</structfield></term>
              <listitem><para>
                <type>text</type>



                <literal>NOT NULL</literal>





              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>insert_time</structfield></term>
              <listitem><para>
                <type>timestamp with time zone</type>



                <literal>NOT NULL</literal>



                <literal>DEFAULT now()</literal>



              </para>

            </listitem>
          </varlistentry>

        </variablelist>










      </para>
    </section>

      <section id="public.view.role-view"
               xreflabel="public.role_view">
        <title id="public.view.role-view-title">
         View:
         
         <structname>role_view</structname>
        </title>
 


        <para>
          <variablelist>
            <title>
              Structure of <structname>role_view</structname>
            </title>


            <varlistentry>
              <term><structfield>roleid</structfield></term>
              <listitem><para>
                <type>oid</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>member</structfield></term>
              <listitem><para>
                <type>oid</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>grantor</structfield></term>
              <listitem><para>
                <type>oid</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>admin_option</structfield></term>
              <listitem><para>
                <type>boolean</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>rolname</structfield></term>
              <listitem><para>
                <type>name</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>rolsuper</structfield></term>
              <listitem><para>
                <type>boolean</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>rolinherit</structfield></term>
              <listitem><para>
                <type>boolean</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>rolcreaterole</structfield></term>
              <listitem><para>
                <type>boolean</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>rolcreatedb</structfield></term>
              <listitem><para>
                <type>boolean</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>rolcatupdate</structfield></term>
              <listitem><para>
                <type>boolean</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>rolcanlogin</structfield></term>
              <listitem><para>
                <type>boolean</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>rolconnlimit</structfield></term>
              <listitem><para>
                <type>integer</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>rolpassword</structfield></term>
              <listitem><para>
                <type>text</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>rolvaliduntil</structfield></term>
              <listitem><para>
                <type>timestamp with time zone</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>rolconfig</structfield></term>
              <listitem><para>
                <type>text[]</type>







              </para>

            </listitem>
          </varlistentry>

        </variablelist>








        <figure>
         <title>Definition of view role_view</title>
         <programlisting>
SELECT m.roleid
, m.member
, m.grantor
, m.admin_option
, a.rolname
, a.rolsuper
, a.rolinherit
, a.rolcreaterole
, a.rolcreatedb
, a.rolcatupdate
, a.rolcanlogin
, a.rolconnlimit
, a.rolpassword
, a.rolvaliduntil
, a.rolconfig 
FROM (pg_auth_members m 
  JOIN pg_authid a 
    ON (
           (m.roleid = a.oid)
     )
);</programlisting>
        </figure>



      </para>
    </section>

      <section id="public.table.salutation"
               xreflabel="public.salutation">
        <title id="public.table.salutation-title">
         Table:
         
         <structname>salutation</structname>
        </title>
 


        <para>
          <variablelist>
            <title>
              Structure of <structname>salutation</structname>
            </title>


            <varlistentry>
              <term><structfield>id</structfield></term>
              <listitem><para>
                <type>serial</type>




                      <literal>UNIQUE</literal>




                <literal>NOT NULL</literal>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>salutation</structfield></term>
              <listitem><para>
                <type>text</type>


                <literal>PRIMARY KEY</literal>













              </para>

            </listitem>
          </varlistentry>

        </variablelist>







        <itemizedlist>
          <title>
            Tables referencing person via Foreign Key Constraints
          </title>

          <listitem>
            <para>
              <xref linkend="public.table.person"/>
            </para>
          </listitem>

        </itemizedlist>






      </para>
    </section>

      <section id="public.table.session"
               xreflabel="public.session">
        <title id="public.table.session-title">
         Table:
         
         <structname>session</structname>
        </title>
 


        <para>
          <variablelist>
            <title>
              Structure of <structname>session</structname>
            </title>


            <varlistentry>
              <term><structfield>session_id</structfield></term>
              <listitem><para>
                <type>serial</type>


                <literal>PRIMARY KEY</literal>













              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>token</structfield></term>
              <listitem><para>
                <type>character varying(32)</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>last_used</structfield></term>
              <listitem><para>
                <type>timestamp without time zone</type>





                <literal>DEFAULT now()</literal>



              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>ttl</structfield></term>
              <listitem><para>
                <type>integer</type>



                <literal>NOT NULL</literal>



                <literal>DEFAULT 3600</literal>



              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>users_id</structfield></term>
              <listitem><para>
                <type>integer</type>







                <literal>NOT NULL</literal>






                <literal>REFERENCES</literal> <xref linkend="public.table.users"/>


              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>transaction_id</structfield></term>
              <listitem><para>
                <type>integer</type>



                <literal>NOT NULL</literal>





              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>notify_pasword</structfield></term>
              <listitem><para>
                <type>interval</type>



                <literal>NOT NULL</literal>



                <literal>DEFAULT &apos;7 days&apos;::interval</literal>



              </para>

            </listitem>
          </varlistentry>

        </variablelist>



        <variablelist>
          <title>Constraints on session</title>

          <varlistentry>
            <term>session_token_check</term>
            <listitem><para>CHECK ((length((token)::text) = 32))</para></listitem>
          </varlistentry>

        </variablelist>







        <itemizedlist>
          <title>
            Tables referencing batch via Foreign Key Constraints
          </title>

          <listitem>
            <para>
              <xref linkend="public.table.batch"/>
            </para>
          </listitem>



          <listitem>
            <para>
              <xref linkend="public.table.open-forms"/>
            </para>
          </listitem>



          <listitem>
            <para>
              <xref linkend="public.table.transactions"/>
            </para>
          </listitem>

        </itemizedlist>






      </para>
    </section>

      <section id="public.table.shipto"
               xreflabel="public.shipto">
        <title id="public.table.shipto-title">
         Table:
         
         <structname>shipto</structname>
        </title>
 


        <para>
          <variablelist>
            <title>
              Structure of <structname>shipto</structname>
            </title>


            <varlistentry>
              <term><structfield>trans_id</structfield></term>
              <listitem><para>
                <type>integer</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>shiptoname</structfield></term>
              <listitem><para>
                <type>character varying(64)</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>shiptoaddress1</structfield></term>
              <listitem><para>
                <type>character varying(32)</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>shiptoaddress2</structfield></term>
              <listitem><para>
                <type>character varying(32)</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>shiptocity</structfield></term>
              <listitem><para>
                <type>character varying(32)</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>shiptostate</structfield></term>
              <listitem><para>
                <type>character varying(32)</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>shiptozipcode</structfield></term>
              <listitem><para>
                <type>character varying(10)</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>shiptocountry</structfield></term>
              <listitem><para>
                <type>character varying(32)</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>shiptocontact</structfield></term>
              <listitem><para>
                <type>character varying(64)</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>shiptophone</structfield></term>
              <listitem><para>
                <type>character varying(20)</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>shiptofax</structfield></term>
              <listitem><para>
                <type>character varying(20)</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>shiptoemail</structfield></term>
              <listitem><para>
                <type>text</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>entry_id</structfield></term>
              <listitem><para>
                <type>serial</type>


                <literal>PRIMARY KEY</literal>













              </para>

            </listitem>
          </varlistentry>

        </variablelist>





        <variablelist>
          <title>Indexes on shipto</title>

          <varlistentry>
            <term>shipto_trans_id_key</term>
            <listitem><para>trans_id</para></listitem>
          </varlistentry>

        </variablelist>








      </para>
    </section>

      <section id="public.table.sic"
               xreflabel="public.sic">
        <title id="public.table.sic-title">
         Table:
         
         <structname>sic</structname>
        </title>
 


        <para>
          <variablelist>
            <title>
              Structure of <structname>sic</structname>
            </title>


            <varlistentry>
              <term><structfield>code</structfield></term>
              <listitem><para>
                <type>character varying(6)</type>


                <literal>PRIMARY KEY</literal>













              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>sictype</structfield></term>
              <listitem><para>
                <type>character(1)</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>description</structfield></term>
              <listitem><para>
                <type>text</type>







              </para>

            </listitem>
          </varlistentry>

        </variablelist>










      </para>
    </section>

      <section id="public.table.status"
               xreflabel="public.status">
        <title id="public.table.status-title">
         Table:
         
         <structname>status</structname>
        </title>
 


        <para>
          <variablelist>
            <title>
              Structure of <structname>status</structname>
            </title>


            <varlistentry>
              <term><structfield>trans_id</structfield></term>
              <listitem><para>
                <type>integer</type>


                <literal>PRIMARY KEY</literal>













              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>formname</structfield></term>
              <listitem><para>
                <type>text</type>


                <literal>PRIMARY KEY</literal>













              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>printed</structfield></term>
              <listitem><para>
                <type>boolean</type>





                <literal>DEFAULT false</literal>



              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>emailed</structfield></term>
              <listitem><para>
                <type>boolean</type>





                <literal>DEFAULT false</literal>



              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>spoolfile</structfield></term>
              <listitem><para>
                <type>text</type>







              </para>

            </listitem>
          </varlistentry>

        </variablelist>





        <variablelist>
          <title>Indexes on status</title>

          <varlistentry>
            <term>status_trans_id_key</term>
            <listitem><para>trans_id</para></listitem>
          </varlistentry>

        </variablelist>








      </para>
    </section>

      <section id="public.table.tax"
               xreflabel="public.tax">
        <title id="public.table.tax-title">
         Table:
         
         <structname>tax</structname>
        </title>
 


        <para>
          <variablelist>
            <title>
              Structure of <structname>tax</structname>
            </title>


            <varlistentry>
              <term><structfield>chart_id</structfield></term>
              <listitem><para>
                <type>integer</type>






                <literal>PRIMARY KEY</literal>












                <literal>REFERENCES</literal> <xref linkend="public.table.account"/>




              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>rate</structfield></term>
              <listitem><para>
                <type>numeric</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>taxnumber</structfield></term>
              <listitem><para>
                <type>text</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>validto</structfield></term>
              <listitem><para>
                <type>timestamp without time zone</type>


                <literal>PRIMARY KEY</literal>









                <literal>DEFAULT &apos;infinity&apos;::timestamp without time zone</literal>





              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>pass</structfield></term>
              <listitem><para>
                <type>integer</type>



                <literal>NOT NULL</literal>





              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>taxmodule_id</structfield></term>
              <listitem><para>
                <type>integer</type>







                <literal>NOT NULL</literal>



                <literal>DEFAULT 1</literal>




                <literal>REFERENCES</literal> <xref linkend="public.table.taxmodule"/>


              </para>

            </listitem>
          </varlistentry>

        </variablelist>










      </para>
    </section>

      <section id="public.table.taxcategory"
               xreflabel="public.taxcategory">
        <title id="public.table.taxcategory-title">
         Table:
         
         <structname>taxcategory</structname>
        </title>
 


        <para>
          <variablelist>
            <title>
              Structure of <structname>taxcategory</structname>
            </title>


            <varlistentry>
              <term><structfield>taxcategory_id</structfield></term>
              <listitem><para>
                <type>serial</type>


                <literal>PRIMARY KEY</literal>













              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>taxcategoryname</structfield></term>
              <listitem><para>
                <type>text</type>



                <literal>NOT NULL</literal>





              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>taxmodule_id</structfield></term>
              <listitem><para>
                <type>integer</type>







                <literal>NOT NULL</literal>






                <literal>REFERENCES</literal> <xref linkend="public.table.taxmodule"/>


              </para>

            </listitem>
          </varlistentry>

        </variablelist>







        <itemizedlist>
          <title>
            Tables referencing partstax via Foreign Key Constraints
          </title>

          <listitem>
            <para>
              <xref linkend="public.table.partstax"/>
            </para>
          </listitem>

        </itemizedlist>






      </para>
    </section>

      <section id="public.table.taxmodule"
               xreflabel="public.taxmodule">
        <title id="public.table.taxmodule-title">
         Table:
         
         <structname>taxmodule</structname>
        </title>
 


        <para>
          <variablelist>
            <title>
              Structure of <structname>taxmodule</structname>
            </title>


            <varlistentry>
              <term><structfield>taxmodule_id</structfield></term>
              <listitem><para>
                <type>serial</type>


                <literal>PRIMARY KEY</literal>













              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>taxmodulename</structfield></term>
              <listitem><para>
                <type>text</type>



                <literal>NOT NULL</literal>





              </para>

            </listitem>
          </varlistentry>

        </variablelist>







        <itemizedlist>
          <title>
            Tables referencing tax via Foreign Key Constraints
          </title>

          <listitem>
            <para>
              <xref linkend="public.table.tax"/>
            </para>
          </listitem>



          <listitem>
            <para>
              <xref linkend="public.table.taxcategory"/>
            </para>
          </listitem>

        </itemizedlist>






      </para>
    </section>

      <section id="public.table.transactions"
               xreflabel="public.transactions">
        <title id="public.table.transactions-title">
         Table:
         
         <structname>transactions</structname>
        </title>
 

        <para>
           This table tracks basic transactions across AR, AP, and GL related tables.  
It provies a referential integrity enforcement mechanism for the financial data
and also some common features such as discretionary (and pessimistic) locking 
for long batch workflows. 
        </para>


        <para>
          <variablelist>
            <title>
              Structure of <structname>transactions</structname>
            </title>


            <varlistentry>
              <term><structfield>id</structfield></term>
              <listitem><para>
                <type>integer</type>


                <literal>PRIMARY KEY</literal>













              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>table_name</structfield></term>
              <listitem><para>
                <type>text</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>locked_by</structfield></term>
              <listitem><para>
                <type>integer</type>












                <literal>REFERENCES</literal> <xref linkend="public.table.session"/>


              </para>

              <para>
                 This should only be used in pessimistic locking measures as required by large
batch work flows. 
              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>approved_by</structfield></term>
              <listitem><para>
                <type>integer</type>












                <literal>REFERENCES</literal> <xref linkend="public.table.entity"/>


              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>approved_at</structfield></term>
              <listitem><para>
                <type>timestamp without time zone</type>







              </para>

            </listitem>
          </varlistentry>

        </variablelist>





        <variablelist>
          <title>Indexes on transactions</title>

          <varlistentry>
            <term>transactions_locked_by_i</term>
            <listitem><para>locked_by</para></listitem>
          </varlistentry>

        </variablelist>





        <itemizedlist>
          <title>
            Tables referencing acc_trans via Foreign Key Constraints
          </title>

          <listitem>
            <para>
              <xref linkend="public.table.acc-trans"/>
            </para>
          </listitem>



          <listitem>
            <para>
              <xref linkend="public.table.ap"/>
            </para>
          </listitem>



          <listitem>
            <para>
              <xref linkend="public.table.ar"/>
            </para>
          </listitem>



          <listitem>
            <para>
              <xref linkend="public.table.gl"/>
            </para>
          </listitem>



          <listitem>
            <para>
              <xref linkend="public.table.new-shipto"/>
            </para>
          </listitem>



          <listitem>
            <para>
              <xref linkend="public.table.voucher"/>
            </para>
          </listitem>

        </itemizedlist>






      </para>
    </section>

      <section id="public.table.translation"
               xreflabel="public.translation">
        <title id="public.table.translation-title">
         Table:
         
         <structname>translation</structname>
        </title>
 


        <para>
          <variablelist>
            <title>
              Structure of <structname>translation</structname>
            </title>


            <varlistentry>
              <term><structfield>trans_id</structfield></term>
              <listitem><para>
                <type>integer</type>


                <literal>PRIMARY KEY</literal>













              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>language_code</structfield></term>
              <listitem><para>
                <type>character varying(6)</type>


                <literal>PRIMARY KEY</literal>













              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>description</structfield></term>
              <listitem><para>
                <type>text</type>







              </para>

            </listitem>
          </varlistentry>

        </variablelist>





        <variablelist>
          <title>Indexes on translation</title>

          <varlistentry>
            <term>translation_trans_id_key</term>
            <listitem><para>trans_id</para></listitem>
          </varlistentry>

        </variablelist>








      </para>
    </section>

      <section id="public.view.user-listable"
               xreflabel="public.user_listable">
        <title id="public.view.user-listable-title">
         View:
         
         <structname>user_listable</structname>
        </title>
 


        <para>
          <variablelist>
            <title>
              Structure of <structname>user_listable</structname>
            </title>


            <varlistentry>
              <term><structfield>id</structfield></term>
              <listitem><para>
                <type>integer</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>username</structfield></term>
              <listitem><para>
                <type>character varying(30)</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>created</structfield></term>
              <listitem><para>
                <type>date</type>







              </para>

            </listitem>
          </varlistentry>

        </variablelist>








        <figure>
         <title>Definition of view user_listable</title>
         <programlisting>
SELECT u.id
, u.username
, e.created 
FROM (entity e 
  JOIN users u 
    ON (
           (u.entity_id = e.id)
     )
);</programlisting>
        </figure>



      </para>
    </section>

      <section id="public.table.user-preference"
               xreflabel="public.user_preference">
        <title id="public.table.user-preference-title">
         Table:
         
         <structname>user_preference</structname>
        </title>
 

        <para>
           This table sets the basic preferences for formats, languages, printers, and user-selected stylesheets.
        </para>


        <para>
          <variablelist>
            <title>
              Structure of <structname>user_preference</structname>
            </title>


            <varlistentry>
              <term><structfield>id</structfield></term>
              <listitem><para>
                <type>integer</type>






                <literal>PRIMARY KEY</literal>












                <literal>REFERENCES</literal> <xref linkend="public.table.users"/>




              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>language</structfield></term>
              <listitem><para>
                <type>character varying(6)</type>












                <literal>REFERENCES</literal> <xref linkend="public.table.language"/>


              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>stylesheet</structfield></term>
              <listitem><para>
                <type>text</type>



                <literal>NOT NULL</literal>



                <literal>DEFAULT &apos;ledgersmb.css&apos;::text</literal>



              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>printer</structfield></term>
              <listitem><para>
                <type>text</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>dateformat</structfield></term>
              <listitem><para>
                <type>text</type>



                <literal>NOT NULL</literal>



                <literal>DEFAULT &apos;yyyy-mm-dd&apos;::text</literal>



              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>numberformat</structfield></term>
              <listitem><para>
                <type>text</type>



                <literal>NOT NULL</literal>



                <literal>DEFAULT &apos;1000.00&apos;::text</literal>



              </para>

            </listitem>
          </varlistentry>

        </variablelist>










      </para>
    </section>

      <section id="public.table.users"
               xreflabel="public.users">
        <title id="public.table.users-title">
         Table:
         
         <structname>users</structname>
        </title>
 

        <para>
          username is the actual primary key here because we do not want duplicate users
        </para>


        <para>
          <variablelist>
            <title>
              Structure of <structname>users</structname>
            </title>


            <varlistentry>
              <term><structfield>id</structfield></term>
              <listitem><para>
                <type>serial</type>




                      <literal>UNIQUE</literal>




                <literal>NOT NULL</literal>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>username</structfield></term>
              <listitem><para>
                <type>character varying(30)</type>


                <literal>PRIMARY KEY</literal>













              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>notify_password</structfield></term>
              <listitem><para>
                <type>interval</type>



                <literal>NOT NULL</literal>



                <literal>DEFAULT &apos;7 days&apos;::interval</literal>



              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>entity_id</structfield></term>
              <listitem><para>
                <type>integer</type>







                <literal>NOT NULL</literal>






                <literal>REFERENCES</literal> <xref linkend="public.table.entity"/>


              </para>

            </listitem>
          </varlistentry>

        </variablelist>







        <itemizedlist>
          <title>
            Tables referencing lsmb_roles via Foreign Key Constraints
          </title>

          <listitem>
            <para>
              <xref linkend="public.table.lsmb-roles"/>
            </para>
          </listitem>



          <listitem>
            <para>
              <xref linkend="public.table.pending-job"/>
            </para>
          </listitem>



          <listitem>
            <para>
              <xref linkend="public.table.session"/>
            </para>
          </listitem>



          <listitem>
            <para>
              <xref linkend="public.table.user-preference"/>
            </para>
          </listitem>

        </itemizedlist>






      </para>
    </section>

      <section id="public.view.vendor"
               xreflabel="public.vendor">
        <title id="public.view.vendor-title">
         View:
         
         <structname>vendor</structname>
        </title>
 


        <para>
          <variablelist>
            <title>
              Structure of <structname>vendor</structname>
            </title>


            <varlistentry>
              <term><structfield>id</structfield></term>
              <listitem><para>
                <type>integer</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>entity_id</structfield></term>
              <listitem><para>
                <type>integer</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>entity_class</structfield></term>
              <listitem><para>
                <type>integer</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>discount</structfield></term>
              <listitem><para>
                <type>numeric</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>taxincluded</structfield></term>
              <listitem><para>
                <type>boolean</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>creditlimit</structfield></term>
              <listitem><para>
                <type>numeric</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>terms</structfield></term>
              <listitem><para>
                <type>smallint</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>vendornumber</structfield></term>
              <listitem><para>
                <type>character varying(32)</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>cc</structfield></term>
              <listitem><para>
                <type>text</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>bcc</structfield></term>
              <listitem><para>
                <type>text</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>business_id</structfield></term>
              <listitem><para>
                <type>integer</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>language_code</structfield></term>
              <listitem><para>
                <type>character varying(6)</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>pricegroup_id</structfield></term>
              <listitem><para>
                <type>integer</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>curr</structfield></term>
              <listitem><para>
                <type>character(3)</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>startdate</structfield></term>
              <listitem><para>
                <type>date</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>enddate</structfield></term>
              <listitem><para>
                <type>date</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>bic</structfield></term>
              <listitem><para>
                <type>character varying</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>iban</structfield></term>
              <listitem><para>
                <type>character varying</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>invoice_notes</structfield></term>
              <listitem><para>
                <type>text</type>







              </para>

            </listitem>
          </varlistentry>

        </variablelist>








        <figure>
         <title>Definition of view vendor</title>
         <programlisting>
SELECT c.id
, emd.entity_id
, emd.entity_class
, emd.discount
, emd.taxincluded
, emd.creditlimit
, emd.terms
, emd.meta_number AS vendornumber
, emd.cc
, emd.bcc
, emd.business_id
, emd.language_code
, emd.pricegroup_id
, emd.curr
, emd.startdate
, emd.enddate
, eba.bic
, eba.iban
, ein.note AS invoice_notes 
FROM (
     (
           (entity_credit_account emd 
         LEFT JOIN entity_bank_account eba 
                ON (
                       (emd.entity_id = eba.entity_id)
                 )
           )
   LEFT JOIN entity_note ein 
          ON (
                 (ein.ref_key = emd.entity_id)
           )
     )
  JOIN company c 
    ON (
           (c.entity_id = emd.entity_id)
     )
)
WHERE (emd.entity_class = 1);</programlisting>
        </figure>



      </para>
    </section>

      <section id="public.table.vendortax"
               xreflabel="public.vendortax">
        <title id="public.table.vendortax-title">
         Table:
         
         <structname>vendortax</structname>
        </title>
 


        <para>
          <variablelist>
            <title>
              Structure of <structname>vendortax</structname>
            </title>


            <varlistentry>
              <term><structfield>vendor_id</structfield></term>
              <listitem><para>
                <type>integer</type>


                <literal>PRIMARY KEY</literal>


















                <literal>REFERENCES</literal> <xref linkend="public.table.entity-credit-account"/>


              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>chart_id</structfield></term>
              <listitem><para>
                <type>integer</type>






                <literal>PRIMARY KEY</literal>












                <literal>REFERENCES</literal> <xref linkend="public.table.account"/>




              </para>

            </listitem>
          </varlistentry>

        </variablelist>










      </para>
    </section>

      <section id="public.table.voucher"
               xreflabel="public.voucher">
        <title id="public.table.voucher-title">
         Table:
         
         <structname>voucher</structname>
        </title>
 


        <para>
          <variablelist>
            <title>
              Structure of <structname>voucher</structname>
            </title>


            <varlistentry>
              <term><structfield>trans_id</structfield></term>
              <listitem><para>
                <type>integer</type>







                <literal>NOT NULL</literal>






                <literal>REFERENCES</literal> <xref linkend="public.table.transactions"/>


              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>batch_id</structfield></term>
              <listitem><para>
                <type>integer</type>







                <literal>NOT NULL</literal>






                <literal>REFERENCES</literal> <xref linkend="public.table.batch"/>


              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>id</structfield></term>
              <listitem><para>
                <type>serial</type>


                <literal>PRIMARY KEY</literal>













              </para>

              <para>
                 This is simply a surrogate key for easy reference.
              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>batch_class</structfield></term>
              <listitem><para>
                <type>integer</type>







                <literal>NOT NULL</literal>






                <literal>REFERENCES</literal> <xref linkend="public.table.batch-class"/>


              </para>

              <para>
                 This is the authoritative class of the 
voucher. 
              </para>

            </listitem>
          </varlistentry>

        </variablelist>







        <itemizedlist>
          <title>
            Tables referencing acc_trans via Foreign Key Constraints
          </title>

          <listitem>
            <para>
              <xref linkend="public.table.acc-trans"/>
            </para>
          </listitem>



          <listitem>
            <para>
              <xref linkend="public.table.cr-report-line"/>
            </para>
          </listitem>

        </itemizedlist>






      </para>
    </section>

      <section id="public.table.warehouse"
               xreflabel="public.warehouse">
        <title id="public.table.warehouse-title">
         Table:
         
         <structname>warehouse</structname>
        </title>
 


        <para>
          <variablelist>
            <title>
              Structure of <structname>warehouse</structname>
            </title>


            <varlistentry>
              <term><structfield>id</structfield></term>
              <listitem><para>
                <type>serial</type>


                <literal>PRIMARY KEY</literal>













              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>description</structfield></term>
              <listitem><para>
                <type>text</type>







              </para>

            </listitem>
          </varlistentry>

        </variablelist>







        <itemizedlist>
          <title>
            Tables referencing asset_item via Foreign Key Constraints
          </title>

          <listitem>
            <para>
              <xref linkend="public.table.asset-item"/>
            </para>
          </listitem>



          <listitem>
            <para>
              <xref linkend="public.table.asset-report-line"/>
            </para>
          </listitem>

        </itemizedlist>






      </para>
    </section>

      <section id="public.table.yearend"
               xreflabel="public.yearend">
        <title id="public.table.yearend-title">
         Table:
         
         <structname>yearend</structname>
        </title>
 


        <para>
          <variablelist>
            <title>
              Structure of <structname>yearend</structname>
            </title>


            <varlistentry>
              <term><structfield>trans_id</structfield></term>
              <listitem><para>
                <type>integer</type>


                <literal>PRIMARY KEY</literal>













              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>reversed</structfield></term>
              <listitem><para>
                <type>boolean</type>





                <literal>DEFAULT false</literal>



              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>transdate</structfield></term>
              <listitem><para>
                <type>date</type>







              </para>

            </listitem>
          </varlistentry>

        </variablelist>










      </para>
    </section>



<!-- Function _entity_location_save(in_country_code integer, in_mail_code integer, in_state integer, in_city text, in_line_three text, in_line_two text, in_line_one text, in_location_class text, in_location_id text, in_entity_id integer) -->
    <section id="public.function.-entity-location-save-in-country-code-integer-in-mail-code-integer-in-state-integer-in-city-text-in-line-three-text-in-line-two-text-in-line-one-text-in-location-class-text-in-location-id-text-in-entity-id-integer"
             xreflabel="public_entity_location_save(in_country_code integer, in_mail_code integer, in_state integer, in_city text, in_line_three text, in_line_two text, in_line_one text, in_location_class text, in_location_id text, in_entity_id integer)">
      <title id="public.function.-entity-location-save-in-country-code-integer-in-mail-code-integer-in-state-integer-in-city-text-in-line-three-text-in-line-two-text-in-line-one-text-in-location-class-text-in-location-id-text-in-entity-id-integer-title">
       _entity_location_save(in_country_code integer, in_mail_code integer, in_state integer, in_city text, in_line_three text, in_line_two text, in_line_one text, in_location_class text, in_location_id text, in_entity_id integer)
      </title>
      <titleabbrev id="public.function.-entity-location-save-in-country-code-integer-in-mail-code-integer-in-state-integer-in-city-text-in-line-three-text-in-line-two-text-in-line-one-text-in-location-class-text-in-location-id-text-in-entity-id-integer-titleabbrev">
       _entity_location_save(in_country_code integer, in_mail_code integer, in_state integer, in_city text, in_line_three text, in_line_two text, in_line_one text, in_location_class text, in_location_id text, in_entity_id integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>integer</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>

    DECLARE
        l_row location;
        l_id INT;
	t_company_id int;
    BEGIN
	SELECT id INTO t_company_id
	FROM company WHERE entity_id = in_entity_id;

	DELETE FROM company_to_location
	WHERE company_id = t_company_id
		AND location_class = in_location_class
		AND location_id = in_location_id;

	SELECT location_save(NULL, in_line_one, in_line_two, in_line_three, in_city,
		in_state, in_mail_code, in_country_code) 
	INTO l_id;

	INSERT INTO company_to_location 
		(company_id, location_class, location_id)
	VALUES  (t_company_id, in_location_class, l_id);

	RETURN l_id;    
    END;

</programlisting>
      </para>
    </section>

<!-- Function _get_parser_from_curcfg() -->
    <section id="public.function.-get-parser-from-curcfg"
             xreflabel="public_get_parser_from_curcfg()">
      <title id="public.function.-get-parser-from-curcfg-title">
       _get_parser_from_curcfg()
      </title>
      <titleabbrev id="public.function.-get-parser-from-curcfg-titleabbrev">
       _get_parser_from_curcfg()
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>text</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>select prsname::text from pg_catalog.pg_ts_parser p join pg_ts_config c on cfgparser = p.oid where c.oid = show_curcfg();</programlisting>
      </para>
    </section>

<!-- Function account__get_from_accno(in_accno text) -->
    <section id="public.function.account-get-from-accno-in-accno-text"
             xreflabel="publicaccount__get_from_accno(in_accno text)">
      <title id="public.function.account-get-from-accno-in-accno-text-title">
       account__get_from_accno(in_accno text)
      </title>
      <titleabbrev id="public.function.account-get-from-accno-in-accno-text-titleabbrev">
       account__get_from_accno(in_accno text)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>account</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
     select * from account where accno = $1;
</programlisting>
      </para>
    </section>

<!-- Function account__get_taxes() -->
    <section id="public.function.account-get-taxes"
             xreflabel="publicaccount__get_taxes()">
      <title id="public.function.account-get-taxes-title">
       account__get_taxes()
      </title>
      <titleabbrev id="public.function.account-get-taxes-titleabbrev">
       account__get_taxes()
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>SET OF account</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
SELECT * FROM account 
 WHERE id IN (select account_id from account_link 
               where description ilike &#39;%tax%&#39;)
ORDER BY accno;
</programlisting>
      </para>
    </section>

<!-- Function account_get(in_id integer) -->
    <section id="public.function.account-get-in-id-integer"
             xreflabel="publicaccount_get(in_id integer)">
      <title id="public.function.account-get-in-id-integer-title">
       account_get(in_id integer)
      </title>
      <titleabbrev id="public.function.account-get-in-id-integer-titleabbrev">
       account_get(in_id integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>chart</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
DECLARE
	account chart%ROWTYPE;
BEGIN
	SELECT * INTO account FROM chart WHERE id = in_id;
	RETURN account;
END;
</programlisting>
      </para>
    </section>

<!-- Function account_has_transactions(in_id integer) -->
    <section id="public.function.account-has-transactions-in-id-integer"
             xreflabel="publicaccount_has_transactions(in_id integer)">
      <title id="public.function.account-has-transactions-in-id-integer-title">
       account_has_transactions(in_id integer)
      </title>
      <titleabbrev id="public.function.account-has-transactions-in-id-integer-titleabbrev">
       account_has_transactions(in_id integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>boolean</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
BEGIN
	PERFORM trans_id FROM acc_trans WHERE chart_id = in_id LIMIT 1;
	IF FOUND THEN
		RETURN true;
	ELSE
		RETURN false;
	END IF;
END;
</programlisting>
      </para>
    </section>

<!-- Function account_heading_list() -->
    <section id="public.function.account-heading-list"
             xreflabel="publicaccount_heading_list()">
      <title id="public.function.account-heading-list-title">
       account_heading_list()
      </title>
      <titleabbrev id="public.function.account-heading-list-titleabbrev">
       account_heading_list()
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>SET OF account_heading</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
SELECT * FROM account_heading order by accno;
</programlisting>
      </para>
    </section>

<!-- Function account_heading_save(in_parent integer, in_description text, in_accno text, in_id integer) -->
    <section id="public.function.account-heading-save-in-parent-integer-in-description-text-in-accno-text-in-id-integer"
             xreflabel="publicaccount_heading_save(in_parent integer, in_description text, in_accno text, in_id integer)">
      <title id="public.function.account-heading-save-in-parent-integer-in-description-text-in-accno-text-in-id-integer-title">
       account_heading_save(in_parent integer, in_description text, in_accno text, in_id integer)
      </title>
      <titleabbrev id="public.function.account-heading-save-in-parent-integer-in-description-text-in-accno-text-in-id-integer-titleabbrev">
       account_heading_save(in_parent integer, in_description text, in_accno text, in_id integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>integer</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
BEGIN
	UPDATE account_heading
	SET accno = in_accno,
		description = in_description,
		parent_id = in_parent
	WHERE id = in_id;

	IF FOUND THEN
		RETURN in_id;
	END IF;
	INSERT INTO account_heading (accno, description, parent_id)
	VALUES (in_accno, in_description, in_parent);

	RETURN currval(&#39;account_heading_id_seq&#39;);
END;
</programlisting>
      </para>
    </section>

<!-- Function account_save(in_link integer, in_contra text, in_heading text, in_gifi bpchar, in_category text, in_description integer, in_accno boolean, in_id text[]) -->
    <section id="public.function.account-save-in-link-integer-in-contra-text-in-heading-text-in-gifi-bpchar-in-category-text-in-description-integer-in-accno-boolean-in-id-textARRAY"
             xreflabel="publicaccount_save(in_link integer, in_contra text, in_heading text, in_gifi bpchar, in_category text, in_description integer, in_accno boolean, in_id text[])">
      <title id="public.function.account-save-in-link-integer-in-contra-text-in-heading-text-in-gifi-bpchar-in-category-text-in-description-integer-in-accno-boolean-in-id-textARRAY-title">
       account_save(in_link integer, in_contra text, in_heading text, in_gifi bpchar, in_category text, in_description integer, in_accno boolean, in_id text[])
      </title>
      <titleabbrev id="public.function.account-save-in-link-integer-in-contra-text-in-heading-text-in-gifi-bpchar-in-category-text-in-description-integer-in-accno-boolean-in-id-textARRAY-titleabbrev">
       account_save(in_link integer, in_contra text, in_heading text, in_gifi bpchar, in_category text, in_description integer, in_accno boolean, in_id text[])
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>integer</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
DECLARE 
	t_summary_links TEXT[] = &#39;{AR,AP,IC}&#39;;
	t_heading_id int;
	t_text record;
	t_id int;
BEGIN
	-- check to ensure summary accounts are exclusive
        -- necessary for proper handling by legacy code
	FOR t_text IN 
		select t_summary_links[generate_series] AS val 
		FROM generate_series(array_lower(t_summary_links, 1), 
			array_upper(t_summary_links, 1))
	LOOP
		IF t_text.val = ANY (in_link) and array_upper(in_link, 1) &gt; 1 THEN
			RAISE EXCEPTION &#39;Invalid link settings:  Summary&#39;;
		END IF;
	END LOOP;
	-- heading settings
	IF in_heading IS NULL THEN
		SELECT id INTO t_heading_id FROM account_heading 
		WHERE accno &lt; in_accno order by accno desc limit 1;
	ELSE
		t_heading_id := in_heading;
	END IF;

	DELETE FROM account_link WHERE account_id = in_id;

	UPDATE account 
	SET accno = in_accno,
		description = in_description,
		category = in_category,
		gifi_accno = in_gifi,
		heading = t_heading_id,
		contra = in_contra
	WHERE id = in_id;

	IF FOUND THEN
		t_id := in_id;
	ELSE
		INSERT INTO account (accno, description, category, gifi_accno,
			heading, contra)
		VALUES (in_accno, in_description, in_category, in_gifi,
			t_heading_id, in_contra);

		t_id := currval(&#39;account_id_seq&#39;);
	END IF;

	FOR t_text IN 
		select in_link[generate_series] AS val
		FROM generate_series(array_lower(in_link, 1), 
			array_upper(in_link, 1))
	LOOP
		INSERT INTO account_link (account_id, description)
		VALUES (t_id, t_text.val);
	END LOOP;

	
	RETURN t_id;
END;
</programlisting>
      </para>
    </section>

<!-- Function add_custom_field(character varying, character varying, character varying) -->
    <section id="public.function.add-custom-field-character-varying-character-varying-character-varying"
             xreflabel="publicadd_custom_field(character varying, character varying, character varying)">
      <title id="public.function.add-custom-field-character-varying-character-varying-character-varying-title">
       add_custom_field(character varying, character varying, character varying)
      </title>
      <titleabbrev id="public.function.add-custom-field-character-varying-character-varying-character-varying-titleabbrev">
       add_custom_field(character varying, character varying, character varying)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>boolean</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
DECLARE
table_name ALIAS FOR $1;
new_field_name ALIAS FOR $2;
field_datatype ALIAS FOR $3;

BEGIN
	EXECUTE &#39;SELECT TABLE_ID FROM custom_table_catalog 
		WHERE extends = &#39;&#39;&#39; || table_name || &#39;&#39;&#39; &#39;;
	IF NOT FOUND THEN
		BEGIN
			INSERT INTO custom_table_catalog (extends) 
				VALUES (table_name);
			EXECUTE &#39;CREATE TABLE custom_&#39;||table_name || 
				&#39; (row_id INT PRIMARY KEY)&#39;;
		EXCEPTION WHEN duplicate_table THEN
			-- do nothing
		END;
	END IF;
	EXECUTE &#39;INSERT INTO custom_field_catalog (field_name, table_id)
	VALUES ( &#39;&#39;&#39; || new_field_name ||&#39;&#39;&#39;, (SELECT table_id FROM custom_table_catalog
		WHERE extends = &#39;&#39;&#39;|| table_name || &#39;&#39;&#39;))&#39;;
	EXECUTE &#39;ALTER TABLE custom_&#39;||table_name || &#39; ADD COLUMN &#39; 
		|| new_field_name || &#39; &#39; || field_datatype;
	RETURN TRUE;
END;
</programlisting>
      </para>
    </section>

<!-- Function admin__add_function_to_group(in_role text, in_func text) -->
    <section id="public.function.admin-add-function-to-group-in-role-text-in-func-text"
             xreflabel="publicadmin__add_function_to_group(in_role text, in_func text)">
      <title id="public.function.admin-add-function-to-group-in-role-text-in-func-text-title">
       admin__add_function_to_group(in_role text, in_func text)
      </title>
      <titleabbrev id="public.function.admin-add-function-to-group-in-role-text-in-func-text-titleabbrev">
       admin__add_function_to_group(in_role text, in_func text)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>integer</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
    
    declare
        stmt TEXT;
        a_role name;
        a_user name;
    BEGIN
    
        -- Issue the grant
        select rolname into a_role from pg_roles where rolname = in_role;
        
        IF NOT FOUND THEN
            RAISE EXCEPTION &#39;Cannot grant permissions of a non-existant role.&#39;;
        END IF;
        
        select rolname into a_user from pg_roles where rolname = in_username;
        
        IF NOT FOUND THEN
            RAISE EXCEPTION &#39;Cannot grant permissions to a non-existant user.&#39;;
        END IF;
        
        stmt := &#39;GRANT EXECUTE ON FUNCTION &#39;|| quote_ident(in_func) ||&#39; to &#39;|| quote_ident(in_role);
        
        EXECUTE stmt;
        
        return 1;
    END;
    
</programlisting>
      </para>
    </section>

<!-- Function admin__add_user_to_role(in_role text, in_username text) -->
    <section id="public.function.admin-add-user-to-role-in-role-text-in-username-text"
             xreflabel="publicadmin__add_user_to_role(in_role text, in_username text)">
      <title id="public.function.admin-add-user-to-role-in-role-text-in-username-text-title">
       admin__add_user_to_role(in_role text, in_username text)
      </title>
      <titleabbrev id="public.function.admin-add-user-to-role-in-role-text-in-username-text-titleabbrev">
       admin__add_user_to_role(in_role text, in_username text)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>integer</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
    
    declare
        stmt TEXT;
        a_role name;
        a_user name;
    BEGIN
    
        -- Issue the grant
        select rolname into a_role from pg_roles where rolname = in_role;
        
        IF NOT FOUND THEN
            RAISE EXCEPTION &#39;Cannot grant permissions of a non-existant role.&#39;;
        END IF;
        
        select rolname into a_user from pg_roles where rolname = in_username;
        
        IF NOT FOUND THEN
            RAISE EXCEPTION &#39;Cannot grant permissions to a non-existant user.&#39;;
        END IF;
        
        stmt := &#39;GRANT &#39;|| quote_ident(in_role) ||&#39; to &#39;|| quote_ident(in_username);
        
        EXECUTE stmt;
        insert into lsmb_roles (user_id, role) 
        SELECT id, in_role from users where username = in_username;
        return 1;
    END;
    
</programlisting>
      </para>
    </section>

<!-- Function admin__create_group(in_group_name text) -->
    <section id="public.function.admin-create-group-in-group-name-text"
             xreflabel="publicadmin__create_group(in_group_name text)">
      <title id="public.function.admin-create-group-in-group-name-text-title">
       admin__create_group(in_group_name text)
      </title>
      <titleabbrev id="public.function.admin-create-group-in-group-name-text-titleabbrev">
       admin__create_group(in_group_name text)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>integer</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
    
    DECLARE
        
        stmt text;
        t_dbname text;
    BEGIN
	t_dbname := current_database();
        stmt := &#39;create role lsmb_&#39;|| quote_ident(t_dbname || &#39;__&#39; || in_group_name);
        execute stmt;
        return 1;
    END;
    
</programlisting>
      </para>
    </section>

<!-- Function admin__delete_group(in_group_name text) -->
    <section id="public.function.admin-delete-group-in-group-name-text"
             xreflabel="publicadmin__delete_group(in_group_name text)">
      <title id="public.function.admin-delete-group-in-group-name-text-title">
       admin__delete_group(in_group_name text)
      </title>
      <titleabbrev id="public.function.admin-delete-group-in-group-name-text-titleabbrev">
       admin__delete_group(in_group_name text)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>boolean</seg>
        </seglistitem>
       </segmentedlist>
 
        
    Deletes the input group from the database. Not designed to be used to 
    remove a login-capable user.

        <programlisting>
    
    DECLARE
        stmt text;
        a_role role_view;
        t_dbname text;
    BEGIN
        t_dbname := current_database();
        

        select * into a_role from role_view where rolname = in_group_name;
        
        if not found then
            return &#39;f&#39;::bool;
        else
            stmt := &#39;drop role lsmb_&#39; || quote_ident(t_dbname || &#39;__&#39; || in_group_name);
            execute stmt;
            return &#39;t&#39;::bool;
        end if;
    END;
</programlisting>
      </para>
    </section>

<!-- Function admin__delete_user(in_username text) -->
    <section id="public.function.admin-delete-user-in-username-text"
             xreflabel="publicadmin__delete_user(in_username text)">
      <title id="public.function.admin-delete-user-in-username-text-title">
       admin__delete_user(in_username text)
      </title>
      <titleabbrev id="public.function.admin-delete-user-in-username-text-titleabbrev">
       admin__delete_user(in_username text)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>integer</seg>
        </seglistitem>
       </segmentedlist>
 
        
    Drops the provided user, as well as deletes the user configuration data.
It leaves the entity and person references.

        <programlisting>
    
    DECLARE
        stmt text;
        a_user users;
    BEGIN
    
        select * into a_user from users where username = in_username;
        
        IF NOT FOUND THEN
        
            raise exception &#39;User not found.&#39;;
        ELSIF FOUND THEN
    
            stmt := &#39; drop user &#39; || quote_ident(a_user.username);
            execute stmt;
            
            -- also gets user_connection
            delete from entity where id = a_user.entity_id;
                                        
        END IF;   
    END;
    
</programlisting>
      </para>
    </section>

<!-- Function admin__drop_session(in_session_id integer) -->
    <section id="public.function.admin-drop-session-in-session-id-integer"
             xreflabel="publicadmin__drop_session(in_session_id integer)">
      <title id="public.function.admin-drop-session-in-session-id-integer-title">
       admin__drop_session(in_session_id integer)
      </title>
      <titleabbrev id="public.function.admin-drop-session-in-session-id-integer-titleabbrev">
       admin__drop_session(in_session_id integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>boolean</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
BEGIN
	DELETE FROM &quot;session&quot; WHERE session_id = in_session_id;
	RETURN FOUND;
END;
</programlisting>
      </para>
    </section>

<!-- Function admin__get_roles() -->
    <section id="public.function.admin-get-roles"
             xreflabel="publicadmin__get_roles()">
      <title id="public.function.admin-get-roles-title">
       admin__get_roles()
      </title>
      <titleabbrev id="public.function.admin-get-roles-titleabbrev">
       admin__get_roles()
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>SET OF pg_roles</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
DECLARE
    v_rol record;
    t_dbname text;
BEGIN
    t_dbname := current_database();
    FOR v_rol in 
        SELECT 
            *
        from 
            pg_roles
        where 
            rolname ~ (&#39;^lsmb_&#39; || t_dbname || &#39;__&#39;) 
            and rolcanlogin is false
        order by rolname ASC
    LOOP
        RETURN NEXT v_rol;
    END LOOP;
END;
</programlisting>
      </para>
    </section>

<!-- Function admin__get_roles_for_user(in_user_id integer) -->
    <section id="public.function.admin-get-roles-for-user-in-user-id-integer"
             xreflabel="publicadmin__get_roles_for_user(in_user_id integer)">
      <title id="public.function.admin-get-roles-for-user-in-user-id-integer-title">
       admin__get_roles_for_user(in_user_id integer)
      </title>
      <titleabbrev id="public.function.admin-get-roles-for-user-in-user-id-integer-titleabbrev">
       admin__get_roles_for_user(in_user_id integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>SET OF text</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
    
    declare
        u_role record;
        a_user users;
    begin
        select * into a_user from admin__get_user(in_user_id);
        
        FOR u_role IN 
        select r.rolname 
        from 
            pg_roles r,
            (select 
                m.roleid 
             from 
                pg_auth_members m, pg_roles b 
             where 
                m.member = b.oid 
             and 
                b.rolname = a_user.username
            ) as ar
         where 
            r.oid = ar.roleid
         LOOP
        
            RETURN NEXT u_role.rolname::text;
        
        END LOOP;
        RETURN;
    end;
    
</programlisting>
      </para>
    </section>

<!-- Function admin__get_user(in_user_id integer) -->
    <section id="public.function.admin-get-user-in-user-id-integer"
             xreflabel="publicadmin__get_user(in_user_id integer)">
      <title id="public.function.admin-get-user-in-user-id-integer-title">
       admin__get_user(in_user_id integer)
      </title>
      <titleabbrev id="public.function.admin-get-user-in-user-id-integer-titleabbrev">
       admin__get_user(in_user_id integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>SET OF users</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
    
    DECLARE
        a_user users;
    BEGIN
        
        select * into a_user from users where id = in_user_id;
        IF NOT FOUND THEN
            RAISE EXCEPTION &#39;cannot find user %&#39;, in_user_id;
        END IF;
        
        return next a_user;
        return;
    
    END;    
</programlisting>
      </para>
    </section>

<!-- Function admin__is_group(in_group_name text) -->
    <section id="public.function.admin-is-group-in-group-name-text"
             xreflabel="publicadmin__is_group(in_group_name text)">
      <title id="public.function.admin-is-group-in-group-name-text-title">
       admin__is_group(in_group_name text)
      </title>
      <titleabbrev id="public.function.admin-is-group-in-group-name-text-titleabbrev">
       admin__is_group(in_group_name text)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>boolean</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
    -- This needs some work.  CT 
    DECLARE
        
        existant_role pg_roles;
        stmt text;
        
    BEGIN
        select * into existant_role from pg_roles 
        where rolname = in_group_name AND rolcanlogin is false;
        
        if not found then
            return &#39;f&#39;::bool;
            
        else
            return &#39;t&#39;::bool;
        end if;            
    END;
    
</programlisting>
      </para>
    </section>

<!-- Function admin__is_user(in_user text) -->
    <section id="public.function.admin-is-user-in-user-text"
             xreflabel="publicadmin__is_user(in_user text)">
      <title id="public.function.admin-is-user-in-user-text-title">
       admin__is_user(in_user text)
      </title>
      <titleabbrev id="public.function.admin-is-user-in-user-text-titleabbrev">
       admin__is_user(in_user text)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>boolean</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
    DECLARE
        pg_user pg_roles;
    
    BEGIN
    
        select * into pg_user from pg_roles where rolname = in_user;
        RETURN found;     
    
    END;
    
</programlisting>
      </para>
    </section>

<!-- Function admin__list_roles(in_username text) -->
    <section id="public.function.admin-list-roles-in-username-text"
             xreflabel="publicadmin__list_roles(in_username text)">
      <title id="public.function.admin-list-roles-in-username-text-title">
       admin__list_roles(in_username text)
      </title>
      <titleabbrev id="public.function.admin-list-roles-in-username-text-titleabbrev">
       admin__list_roles(in_username text)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>SET OF text</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
DECLARE out_rolename RECORD;
BEGIN
	FOR out_rolename IN 
		SELECT rolname FROM pg_authid 
		WHERE oid IN (SELECT id FROM connectby (
			&#39;(SELECT m.member, m.roleid, r.oid FROM pg_authid r 
			LEFT JOIN pg_auth_members m ON (r.oid = m.roleid)) a&#39;,
			&#39;oid&#39;, &#39;member&#39;, &#39;oid&#39;, &#39;320461&#39;, &#39;0&#39;, &#39;,&#39;
			) c(id integer, parent integer, &quot;level&quot; integer, 
				path text, list_order integer)
			)
	LOOP
		RETURN NEXT out_rolename.rolname;
	END LOOP;
END;
</programlisting>
      </para>
    </section>

<!-- Function admin__list_sessions() -->
    <section id="public.function.admin-list-sessions"
             xreflabel="publicadmin__list_sessions()">
      <title id="public.function.admin-list-sessions-title">
       admin__list_sessions()
      </title>
      <titleabbrev id="public.function.admin-list-sessions-titleabbrev">
       admin__list_sessions()
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>SET OF session_result</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
SELECT s.session_id, u.username, s.last_used, count(t.id)
FROM &quot;session&quot; s
JOIN users u ON (s.users_id = u.id)
LEFT JOIN transactions t ON (t.locked_by = s.session_id)
GROUP BY s.session_id, u.username, s.last_used
ORDER BY u.username;
</programlisting>
      </para>
    </section>

<!-- Function admin__remove_function_from_group(in_role text, in_func text) -->
    <section id="public.function.admin-remove-function-from-group-in-role-text-in-func-text"
             xreflabel="publicadmin__remove_function_from_group(in_role text, in_func text)">
      <title id="public.function.admin-remove-function-from-group-in-role-text-in-func-text-title">
       admin__remove_function_from_group(in_role text, in_func text)
      </title>
      <titleabbrev id="public.function.admin-remove-function-from-group-in-role-text-in-func-text-titleabbrev">
       admin__remove_function_from_group(in_role text, in_func text)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>integer</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
    
    declare
        stmt TEXT;
        a_role name;
        a_user name;
    BEGIN
    
        -- Issue the grant
        select rolname into a_role from pg_roles where rolname = in_role;
        
        IF NOT FOUND THEN
            RAISE EXCEPTION &#39;Cannot revoke permissions of a non-existant role.&#39;;
        END IF;
        
        select rolname into a_user from pg_roles where rolname = in_username;
        
        IF NOT FOUND THEN
            RAISE EXCEPTION &#39;Cannot revoke permissions from a non-existant function.&#39;;
        END IF;
        
        stmt := &#39;REVOKE EXECUTE ON FUNCTION &#39;|| quote_ident(in_func) ||&#39; FROM &#39;|| quote_ident(in_role);
        
        EXECUTE stmt;
        
        return 1;    
    END;
    
    
</programlisting>
      </para>
    </section>

<!-- Function admin__remove_user_from_role(in_role text, in_username text) -->
    <section id="public.function.admin-remove-user-from-role-in-role-text-in-username-text"
             xreflabel="publicadmin__remove_user_from_role(in_role text, in_username text)">
      <title id="public.function.admin-remove-user-from-role-in-role-text-in-username-text-title">
       admin__remove_user_from_role(in_role text, in_username text)
      </title>
      <titleabbrev id="public.function.admin-remove-user-from-role-in-role-text-in-username-text-titleabbrev">
       admin__remove_user_from_role(in_role text, in_username text)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>integer</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
    
    declare
        stmt TEXT;
        a_role name;
        a_user name;
    BEGIN
    
        -- Issue the grant
        select rolname into a_role from pg_roles where rolname = in_role;
        
        IF NOT FOUND THEN
            RAISE EXCEPTION &#39;Cannot revoke permissions of a non-existant role.&#39;;
        END IF;
        
        select rolname into a_user from pg_roles where rolname = in_username;
        
        IF NOT FOUND THEN
            RAISE EXCEPTION &#39;Cannot revoke permissions from a non-existant user.&#39;;
        END IF;
        
        stmt := &#39;REVOKE &#39;|| quote_ident(in_role) ||&#39; FROM &#39;|| quote_ident(in_username);
        
        EXECUTE stmt;
        
        return 1;    
    END;
    
</programlisting>
      </para>
    </section>

<!-- Function admin__save_user(in_password integer, in_username integer, in_entity_id text, in_id text) -->
    <section id="public.function.admin-save-user-in-password-integer-in-username-integer-in-entity-id-text-in-id-text"
             xreflabel="publicadmin__save_user(in_password integer, in_username integer, in_entity_id text, in_id text)">
      <title id="public.function.admin-save-user-in-password-integer-in-username-integer-in-entity-id-text-in-id-text-title">
       admin__save_user(in_password integer, in_username integer, in_entity_id text, in_id text)
      </title>
      <titleabbrev id="public.function.admin-save-user-in-password-integer-in-username-integer-in-entity-id-text-in-id-text-titleabbrev">
       admin__save_user(in_password integer, in_username integer, in_entity_id text, in_id text)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>integer</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
    DECLARE
    
        a_user users;
        v_user_id int;
        p_id int;
        l_id int;
        stmt text;
    BEGIN
        -- WARNING TO PROGRAMMERS:  This function runs as the definer and runs
        -- utility statements via EXECUTE.
        -- PLEASE BE VERY CAREFUL ABOUT SQL-INJECTION INSIDE THIS FUNCTION.
    
        if admin__is_user(in_username) then
                
                execute &#39;ALTER USER &#39; || quote_ident( in_username ) || 
                     &#39; WITH ENCRYPTED PASSWORD &#39; || quote_literal (in_password)
                     || $e$ valid until $e$ || quote_literal(now() + &#39;1 day&#39;::interval);
        else
            if in_password IS NULL THEN
                RAISE EXCEPTION &#39;Must create password when adding new users!&#39;;
            end if;
           
            -- create an actual user
                execute &#39;CREATE USER &#39; || quote_ident( in_username ) || 
                     &#39; WITH ENCRYPTED PASSWORD &#39; || quote_literal (in_password)
                     || $e$ valid until $e$ || quote_literal(now() + &#39;1 day&#39;::interval);
            end if;         
        
        select * into a_user from users lu where lu.id = in_id;
        IF FOUND THEN 
            return a_user.id;
        ELSE
            -- Insert cycle
            
            --- The entity is expected to already BE created. See admin.pm.
            
            
            v_user_id := nextval(&#39;users_id_seq&#39;);
            insert into users (id, username, entity_id) VALUES (
                v_user_id,
                in_username,
                in_entity_id
            );
            
            insert into user_preference (id) values (v_user_id);

            -- Finally, issue the create user statement
            
            return v_user_id ;

            
        
        END IF;
    
    END;
</programlisting>
      </para>
    </section>

<!-- Function admin__search_users(in_dob text, in_ssn text, in_last_name text, in_first_name text, in_username date) -->
    <section id="public.function.admin-search-users-in-dob-text-in-ssn-text-in-last-name-text-in-first-name-text-in-username-date"
             xreflabel="publicadmin__search_users(in_dob text, in_ssn text, in_last_name text, in_first_name text, in_username date)">
      <title id="public.function.admin-search-users-in-dob-text-in-ssn-text-in-last-name-text-in-first-name-text-in-username-date-title">
       admin__search_users(in_dob text, in_ssn text, in_last_name text, in_first_name text, in_username date)
      </title>
      <titleabbrev id="public.function.admin-search-users-in-dob-text-in-ssn-text-in-last-name-text-in-first-name-text-in-username-date-titleabbrev">
       admin__search_users(in_dob text, in_ssn text, in_last_name text, in_first_name text, in_username date)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>SET OF user_result</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
DECLARE t_return_row user_result;
BEGIN
	FOR t_return_row IN
		SELECT u.id, u.username, p.first_name, p.last_name, e.ssn, e.dob
		FROM users u
		JOIN person p ON (u.entity_id = p.entity_id)
		JOIN entity_employee e ON (e.entity_id = p.entity_id)
		WHERE u.username LIKE &#39;%&#39; || coalesce(in_username,&#39;&#39;) || &#39;%&#39; AND
			(p.first_name = in_first_name or in_first_name is null)
			AND (p.last_name = in_last_name or in_last_name is null)
			AND (in_ssn is NULL or in_ssn = e.ssn) 
			AND (e.dob = in_dob or in_dob is NULL)
	LOOP
		RETURN NEXT t_return_row;
	END LOOP;
END;
</programlisting>
      </para>
    </section>

<!-- Function as_array(anyelement) -->
    <section id="public.function.as-array-anyelement"
             xreflabel="publicas_array(anyelement)">
      <title id="public.function.as-array-anyelement-title">
       as_array(anyelement)
      </title>
      <titleabbrev id="public.function.as-array-anyelement-titleabbrev">
       as_array(anyelement)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>INTERNAL</seg>
         <seg>anyarray</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>aggregate_dummy</programlisting>
      </para>
    </section>

<!-- Function asset__get(in_tag integer, in_id text) -->
    <section id="public.function.asset-get-in-tag-integer-in-id-text"
             xreflabel="publicasset__get(in_tag integer, in_id text)">
      <title id="public.function.asset-get-in-tag-integer-in-id-text-title">
       asset__get(in_tag integer, in_id text)
      </title>
      <titleabbrev id="public.function.asset-get-in-tag-integer-in-id-text-titleabbrev">
       asset__get(in_tag integer, in_id text)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>asset_item</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
DECLARE ret_val asset_item;
BEGIN
	SELECT * into ret_val from asset_item WHERE id = in_id OR in_tag = tag
        ORDER BY id desc limit 1;
	return ret_val;
END;
</programlisting>
      </para>
    </section>

<!-- Function asset__search(in_salvage_value integer, in_usable_life text, in_purchase_value text, in_purchase_date date, in_tag numeric, in_description numeric, in_asset_class numeric) -->
    <section id="public.function.asset-search-in-salvage-value-integer-in-usable-life-text-in-purchase-value-text-in-purchase-date-date-in-tag-numeric-in-description-numeric-in-asset-class-numeric"
             xreflabel="publicasset__search(in_salvage_value integer, in_usable_life text, in_purchase_value text, in_purchase_date date, in_tag numeric, in_description numeric, in_asset_class numeric)">
      <title id="public.function.asset-search-in-salvage-value-integer-in-usable-life-text-in-purchase-value-text-in-purchase-date-date-in-tag-numeric-in-description-numeric-in-asset-class-numeric-title">
       asset__search(in_salvage_value integer, in_usable_life text, in_purchase_value text, in_purchase_date date, in_tag numeric, in_description numeric, in_asset_class numeric)
      </title>
      <titleabbrev id="public.function.asset-search-in-salvage-value-integer-in-usable-life-text-in-purchase-value-text-in-purchase-date-date-in-tag-numeric-in-description-numeric-in-asset-class-numeric-titleabbrev">
       asset__search(in_salvage_value integer, in_usable_life text, in_purchase_value text, in_purchase_date date, in_tag numeric, in_description numeric, in_asset_class numeric)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>SET OF asset_item</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
DECLARE out_val asset_item;
BEGIN
	FOR out_val IN
		SELECT * FROM asset_item
		WHERE (in_asset_class is null 
			or asset_class_id = in_asset_class)
			AND (in_description is null or description 
				LIKE &#39;%&#39; || in_description || &#39;%&#39;)
			and (in_tag is not null or tag like &#39;%&#39;||in_tag||&#39;%&#39;)
			AND (in_purchase_date is null 
				or purchase_date = in_purchase_date)
			AND (in_purchase_value is null
				or in_purchase_value = purchase_value)
			AND (in_usable_life is null
				or in_usable_life = usable_life)
			AND (in_salvage_value is null
				OR in_salvage_value = salvage_value)
	LOOP
		RETURN NEXT out_val;
	END LOOP;
END;
</programlisting>
      </para>
    </section>

<!-- Function asset_class__get(in_id integer) -->
    <section id="public.function.asset-class-get-in-id-integer"
             xreflabel="publicasset_class__get(in_id integer)">
      <title id="public.function.asset-class-get-in-id-integer-title">
       asset_class__get(in_id integer)
      </title>
      <titleabbrev id="public.function.asset-class-get-in-id-integer-titleabbrev">
       asset_class__get(in_id integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>asset_class</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
DECLARE ret_val asset_class;
BEGIN 
	SELECT * INTO ret_val FROM asset_class WHERE id = in_id;
	RETURN ret_val;
END;
</programlisting>
      </para>
    </section>

<!-- Function asset_class__get_asset_accounts() -->
    <section id="public.function.asset-class-get-asset-accounts"
             xreflabel="publicasset_class__get_asset_accounts()">
      <title id="public.function.asset-class-get-asset-accounts-title">
       asset_class__get_asset_accounts()
      </title>
      <titleabbrev id="public.function.asset-class-get-asset-accounts-titleabbrev">
       asset_class__get_asset_accounts()
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>SET OF account</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
SELECT * FROM account 
WHERE id IN 
	(select account_id from account_link where description = &#39;Fixed_Asset&#39;)
ORDER BY accno;
</programlisting>
      </para>
    </section>

<!-- Function asset_class__get_dep_accounts() -->
    <section id="public.function.asset-class-get-dep-accounts"
             xreflabel="publicasset_class__get_dep_accounts()">
      <title id="public.function.asset-class-get-dep-accounts-title">
       asset_class__get_dep_accounts()
      </title>
      <titleabbrev id="public.function.asset-class-get-dep-accounts-titleabbrev">
       asset_class__get_dep_accounts()
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>SET OF account</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
SELECT * FROM account 
WHERE id IN 
	(select account_id from account_link where description = &#39;Asset_Dep&#39;)
ORDER BY accno;
</programlisting>
      </para>
    </section>

<!-- Function asset_class__get_dep_method(in_asset_class integer) -->
    <section id="public.function.asset-class-get-dep-method-in-asset-class-integer"
             xreflabel="publicasset_class__get_dep_method(in_asset_class integer)">
      <title id="public.function.asset-class-get-dep-method-in-asset-class-integer-title">
       asset_class__get_dep_method(in_asset_class integer)
      </title>
      <titleabbrev id="public.function.asset-class-get-dep-method-in-asset-class-integer-titleabbrev">
       asset_class__get_dep_method(in_asset_class integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>asset_dep_method</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
SELECT * from asset_dep_method 
WHERE id = (select method from asset_class where id = $1);
</programlisting>
      </para>
    </section>

<!-- Function asset_class__get_dep_methods() -->
    <section id="public.function.asset-class-get-dep-methods"
             xreflabel="publicasset_class__get_dep_methods()">
      <title id="public.function.asset-class-get-dep-methods-title">
       asset_class__get_dep_methods()
      </title>
      <titleabbrev id="public.function.asset-class-get-dep-methods-titleabbrev">
       asset_class__get_dep_methods()
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>SET OF asset_dep_method</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
SELECT * FROM asset_dep_method ORDER BY method;
</programlisting>
      </para>
    </section>

<!-- Function asset_class__list() -->
    <section id="public.function.asset-class-list"
             xreflabel="publicasset_class__list()">
      <title id="public.function.asset-class-list-title">
       asset_class__list()
      </title>
      <titleabbrev id="public.function.asset-class-list-titleabbrev">
       asset_class__list()
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>SET OF asset_class</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
SELECT * FROM asset_class ORDER BY label;
</programlisting>
      </para>
    </section>

<!-- Function asset_class__save(in_unit_label integer, in_label integer, in_method integer, in_dep_account_id integer, in_asset_account_id text, in_id text) -->
    <section id="public.function.asset-class-save-in-unit-label-integer-in-label-integer-in-method-integer-in-dep-account-id-integer-in-asset-account-id-text-in-id-text"
             xreflabel="publicasset_class__save(in_unit_label integer, in_label integer, in_method integer, in_dep_account_id integer, in_asset_account_id text, in_id text)">
      <title id="public.function.asset-class-save-in-unit-label-integer-in-label-integer-in-method-integer-in-dep-account-id-integer-in-asset-account-id-text-in-id-text-title">
       asset_class__save(in_unit_label integer, in_label integer, in_method integer, in_dep_account_id integer, in_asset_account_id text, in_id text)
      </title>
      <titleabbrev id="public.function.asset-class-save-in-unit-label-integer-in-label-integer-in-method-integer-in-dep-account-id-integer-in-asset-account-id-text-in-id-text-titleabbrev">
       asset_class__save(in_unit_label integer, in_label integer, in_method integer, in_dep_account_id integer, in_asset_account_id text, in_id text)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>asset_class</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
DECLARE ret_val asset_class;
BEGIN
	UPDATE asset_class 
	SET asset_account_id = in_asset_account_id,
		dep_account_id = in_dep_account_id,
		method = in_method,
		label = in_label
	WHERE id = in_id;

	IF FOUND THEN
		SELECT * INTO ret_val FROM asset_class where id = in_id;
		RETURN ret_val;
	END IF;

	INSERT INTO asset_class (asset_account_id, dep_account_id, method,
		label)
	VALUES (in_asset_account_id, in_dep_account_id, in_method, 
		in_label);

	SELECT * INTO ret_val FROM asset_class 
	WHERE id = currval(&#39;asset_class_id_seq&#39;);

	RETURN ret_val;
END;
</programlisting>
      </para>
    </section>

<!-- Function asset_class__search(in_label integer, in_method integer, in_dep_account_id integer, in_asset_account_id text) -->
    <section id="public.function.asset-class-search-in-label-integer-in-method-integer-in-dep-account-id-integer-in-asset-account-id-text"
             xreflabel="publicasset_class__search(in_label integer, in_method integer, in_dep_account_id integer, in_asset_account_id text)">
      <title id="public.function.asset-class-search-in-label-integer-in-method-integer-in-dep-account-id-integer-in-asset-account-id-text-title">
       asset_class__search(in_label integer, in_method integer, in_dep_account_id integer, in_asset_account_id text)
      </title>
      <titleabbrev id="public.function.asset-class-search-in-label-integer-in-method-integer-in-dep-account-id-integer-in-asset-account-id-text-titleabbrev">
       asset_class__search(in_label integer, in_method integer, in_dep_account_id integer, in_asset_account_id text)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>SET OF asset_class_result</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
DECLARE out_var asset_class_result;
BEGIN
	FOR out_var IN
		SELECT ac.id, ac.asset_account_id, aa.accno, aa.description, 
			ad.accno, ad.description, m.method, ac.method,
			ac.label
		FROM asset_class ac
		JOIN account aa ON (aa.id = ac.asset_account_id)
		JOIN account ad ON (ad.id = ac.dep_account_id)
		JOIN asset_dep_method m ON (ac.method = m.id)
		WHERE 
			(in_asset_account_id is null 
				or in_asset_account_id = ac.asset_account_id)
			AND (in_dep_account_id is null OR
				in_dep_account_id = ac.dep_account_id)
			AND (in_method is null OR in_method = ac.method)
			AND (in_label IS NULL OR ac.label LIKE 
				&#39;%&#39; || in_label || &#39;%&#39;)
	LOOP
		RETURN NEXT out_var;
	END LOOP;
END;
</programlisting>
      </para>
    </section>

<!-- Function asset_dep__straight_line_base(in_dep_to_date numeric, in_basis numeric, in_used numeric, in_life numeric, in_base_life numeric) -->
    <section id="public.function.asset-dep-straight-line-base-in-dep-to-date-numeric-in-basis-numeric-in-used-numeric-in-life-numeric-in-base-life-numeric"
             xreflabel="publicasset_dep__straight_line_base(in_dep_to_date numeric, in_basis numeric, in_used numeric, in_life numeric, in_base_life numeric)">
      <title id="public.function.asset-dep-straight-line-base-in-dep-to-date-numeric-in-basis-numeric-in-used-numeric-in-life-numeric-in-base-life-numeric-title">
       asset_dep__straight_line_base(in_dep_to_date numeric, in_basis numeric, in_used numeric, in_life numeric, in_base_life numeric)
      </title>
      <titleabbrev id="public.function.asset-dep-straight-line-base-in-dep-to-date-numeric-in-basis-numeric-in-used-numeric-in-life-numeric-in-base-life-numeric-titleabbrev">
       asset_dep__straight_line_base(in_dep_to_date numeric, in_basis numeric, in_used numeric, in_life numeric, in_base_life numeric)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>numeric</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
SELECT CASE WHEN $2 &gt; $3 THEN $3/$1 * $4 
            ELSE $4 - $5
            END;
</programlisting>
      </para>
    </section>

<!-- Function asset_dep__used_months(in_usable_life date, in_dep_date date, in_last_dep numeric) -->
    <section id="public.function.asset-dep-used-months-in-usable-life-date-in-dep-date-date-in-last-dep-numeric"
             xreflabel="publicasset_dep__used_months(in_usable_life date, in_dep_date date, in_last_dep numeric)">
      <title id="public.function.asset-dep-used-months-in-usable-life-date-in-dep-date-date-in-last-dep-numeric-title">
       asset_dep__used_months(in_usable_life date, in_dep_date date, in_last_dep numeric)
      </title>
      <titleabbrev id="public.function.asset-dep-used-months-in-usable-life-date-in-dep-date-date-in-last-dep-numeric-titleabbrev">
       asset_dep__used_months(in_usable_life date, in_dep_date date, in_last_dep numeric)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>numeric</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
select CASE WHEN extract(&#39;MONTHS&#39; FROM (date_trunc(&#39;day&#39;, $2) - date_trunc(&#39;day&#39;, $1))) 
                 &gt; $3
            THEN $3
            ELSE extract(&#39;MONTHS&#39; FROM (date_trunc(&#39;day&#39;, $2) - date_trunc(&#39;day&#39;, $1)))::numeric
            END;
</programlisting>
      </para>
    </section>

<!-- Function asset_dep_straight_line_yr_m(in_report_id integer[], in_report_date date, in_asset_ids integer) -->
    <section id="public.function.asset-dep-straight-line-yr-m-in-report-id-integerARRAY-in-report-date-date-in-asset-ids-integer"
             xreflabel="publicasset_dep_straight_line_yr_m(in_report_id integer[], in_report_date date, in_asset_ids integer)">
      <title id="public.function.asset-dep-straight-line-yr-m-in-report-id-integerARRAY-in-report-date-date-in-asset-ids-integer-title">
       asset_dep_straight_line_yr_m(in_report_id integer[], in_report_date date, in_asset_ids integer)
      </title>
      <titleabbrev id="public.function.asset-dep-straight-line-yr-m-in-report-id-integerARRAY-in-report-date-date-in-asset-ids-integer-titleabbrev">
       asset_dep_straight_line_yr_m(in_report_id integer[], in_report_date date, in_asset_ids integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>boolean</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
     INSERT INTO asset_report_line (asset_id, report_id, amount, department_id, 
                                   warehouse_id)
     SELECT ai.id, $3, 
            asset_dep__straight_line_base(
                  ai.usable_life * 12,
                  ai.usable_life * 12 --months
                  - months_passed(coalesce(start_depreciation, purchase_date),
                                  coalesce(max(report_date),
                                           start_depreciation,
                                           purchase_date)),
                  months_passed(coalesce(max(report_date),
                                         start_depreciation,
                                         purchase_date),
                                $2),
                  purchase_value - salvage_value,
                  coalesce(sum(l.amount), 0)), 
            ai.department_id, ai.location_id
       FROM asset_item ai
  LEFT JOIN asset_report_line l ON (l.asset_id = ai.id)
  LEFT JOIN asset_report r ON (l.report_id = r.id)
      WHERE ai.id = ANY($1) 
   GROUP BY ai.id, ai.start_depreciation, ai.purchase_date, ai.purchase_value,
            ai.salvage_value, ai.department_id, ai.location_id, ai.usable_life;
                                                      
    UPDATE asset_report SET report_class = 1 WHERE id = $3;

    select true;
</programlisting>
      </para>
    </section>

<!-- Function asset_depreciation__approve(in_expense_acct integer, in_report_id integer) -->
    <section id="public.function.asset-depreciation-approve-in-expense-acct-integer-in-report-id-integer"
             xreflabel="publicasset_depreciation__approve(in_expense_acct integer, in_report_id integer)">
      <title id="public.function.asset-depreciation-approve-in-expense-acct-integer-in-report-id-integer-title">
       asset_depreciation__approve(in_expense_acct integer, in_report_id integer)
      </title>
      <titleabbrev id="public.function.asset-depreciation-approve-in-expense-acct-integer-in-report-id-integer-titleabbrev">
       asset_depreciation__approve(in_expense_acct integer, in_report_id integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>asset_report</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
declare retval asset_report;
begin

retval := asset_report__record_approve(in_report_id);

INSERT INTO gl (reference, description, approved)
select &#39;Asset Report &#39; || in_id, &#39;Asset Depreciation Report for &#39; || report_date,
       false
 FROM asset_report where id = in_id;

INSERT INTO acc_trans (amount, chart_id, transdate, approved, trans_id)
SELECT l.amount, a.dep_account_id, r.report_date, true, currval(&#39;id&#39;)
  FROM asset_report r
  JOIN asset_report_line l ON (r.id = l.report_id)
  JOIN asset_item a ON (a.id = l.asset_id)
 WHERE r.id = in_id;

INSERT INTO acc_trans (amount, chart_id, transdate, approved, trans_id)
SELECT sum(l.amount) * -1, in_expense_acct, r.report_date, approved, 
       currval(&#39;id&#39;)
  FROM asset_report r
  JOIN asset_report_line l ON (r.id = l.report_id)
  JOIN asset_item a ON (a.id = l.asset_id)
 WHERE r.id = in_id
 GROUP BY r.report_date;


return retval;

end;
</programlisting>
      </para>
    </section>

<!-- Function asset_disposal__approve(in_asset_acct integer, in_loss_acct integer, in_gain_acct integer, in_report_id integer) -->
    <section id="public.function.asset-disposal-approve-in-asset-acct-integer-in-loss-acct-integer-in-gain-acct-integer-in-report-id-integer"
             xreflabel="publicasset_disposal__approve(in_asset_acct integer, in_loss_acct integer, in_gain_acct integer, in_report_id integer)">
      <title id="public.function.asset-disposal-approve-in-asset-acct-integer-in-loss-acct-integer-in-gain-acct-integer-in-report-id-integer-title">
       asset_disposal__approve(in_asset_acct integer, in_loss_acct integer, in_gain_acct integer, in_report_id integer)
      </title>
      <titleabbrev id="public.function.asset-disposal-approve-in-asset-acct-integer-in-loss-acct-integer-in-gain-acct-integer-in-report-id-integer-titleabbrev">
       asset_disposal__approve(in_asset_acct integer, in_loss_acct integer, in_gain_acct integer, in_report_id integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>asset_report</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
DECLARE 
   retval asset_report;
   iter record;
begin

retval := asset_report__record_approve(in_report_id);

INSERT INTO gl (reference, description, approved)
select &#39;Asset Report &#39; || in_id, &#39;Asset Depreciation Report for &#39; || report_date,
       false
 FROM asset_report where id = in_id;

-- REMOVING ASSETS FROM ACCOUNT
insert into acc_trans (trans_id, chart_id, amount, approved, transdate)
SELECT currval(&#39;id&#39;), a.asset_account_id, a.purchase_value, true, r.report_date
 FROM  asset_item a
 JOIN  asset_report_line l ON (l.asset_id = a.id)
 JOIN  asset_report r ON (r.id = l.report_id)
 WHERE r.id = in_id;

-- REMOVING ACCUM DEP.
INSERT into acc_trans (trans_id, chart_id, amount, approved, transdate)
SELECT currval(&#39;id&#39;, a.dep_account_id, sum(dl.amount) * -1, true, r.report_date)
 FROM  asset_item a
 JOIN  asset_report_line l ON (l.asset_id = a.id)
 JOIN  asset_report r ON (r.id = l.report_id)
 JOIN  asset_report_line dl ON (l.asset_id = dl.asset_id)
 JOIN  asset_report dr ON (dl.report_id = dr.id 
                           and dr.depreciation is true 
                           and dr.approved_at is not null)
 WHERE r.id = in_id;

-- INSERT asset change
INSERT INTO acc_trans (trans_id, chart_id, amount, approved, transdate)
SELECT currval(&#39;id&#39;), in_asset_act, l.amount * -1, true, r.report_date
 FROM  asset_item a
 JOIN  asset_report_line l ON (l.asset_id = a.id)
 JOIN  asset_report r ON (r.id = l.report_id)
 WHERE r.id = in_id;

-- INSERT GAIN/LOSS

for iter in select sum(dl.amount) as dep, a.purchase_price , l.amount
     FROM  asset_item a
     JOIN  asset_report_line l ON (l.asset_id = a.id)
     JOIN  asset_report r ON (r.id = l.report_id)
     JOIN  asset_report_line dl ON (l.asset_id = dl.asset_id)
     JOIN  asset_report dr ON (dl.report_id = dr.id 
                               and dr.depreciation is true 
                               and dr.approved_at is not null)
     WHERE r.id = in_id
loop
   IF (iter.dep &gt; iter.purchase_price - iter.amount)

   THEN
      INSERT INTO acc_trans (trans_id, chart_id, amount, approved, transdate)
      values (currval(&#39;id&#39;), in_loss_acct, 
              iter.purchase_price - iter.dep - iter.amount, true, 
              retval.report_date);
   ELSE
      INSERT INTO acc_trans (trans_id, chart_id, amount, approved, transdate)
      values (currval(&#39;id&#39;), in_gain_acct, 
              iter.purchase_price - iter.dep - iter.amount, true, 
              retval.report_date);
   END IF;

END LOOP;

return retval;
end;
</programlisting>
      </para>
    </section>

<!-- Function asset_item__add_note(in_note integer, in_subject text, in_id text) -->
    <section id="public.function.asset-item-add-note-in-note-integer-in-subject-text-in-id-text"
             xreflabel="publicasset_item__add_note(in_note integer, in_subject text, in_id text)">
      <title id="public.function.asset-item-add-note-in-note-integer-in-subject-text-in-id-text-title">
       asset_item__add_note(in_note integer, in_subject text, in_id text)
      </title>
      <titleabbrev id="public.function.asset-item-add-note-in-note-integer-in-subject-text-in-id-text-titleabbrev">
       asset_item__add_note(in_note integer, in_subject text, in_id text)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>asset_note</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
INSERT INTO asset_note (ref_key, subject, note) values ($1, $2, $3);
SELECT * FROM asset_note WHERE id = currval(&#39;note_id_seq&#39;);
</programlisting>
      </para>
    </section>

<!-- Function asset_item__search(in_dep_account_id integer, in_asset_account_id integer, in_invoice_id text, in_department_id text, in_warehouse_id date, in_start_depreciation numeric, in_salvage_value numeric, in_usable_life numeric, in_purchase_value date, in_purchase_date integer, in_tag integer, in_description integer, in_asset_class integer, in_id integer) -->
    <section id="public.function.asset-item-search-in-dep-account-id-integer-in-asset-account-id-integer-in-invoice-id-text-in-department-id-text-in-warehouse-id-date-in-start-depreciation-numeric-in-salvage-value-numeric-in-usable-life-numeric-in-purchase-value-date-in-purchase-date-integer-in-tag-integer-in-description-integer-in-asset-class-integer-in-id-integer"
             xreflabel="publicasset_item__search(in_dep_account_id integer, in_asset_account_id integer, in_invoice_id text, in_department_id text, in_warehouse_id date, in_start_depreciation numeric, in_salvage_value numeric, in_usable_life numeric, in_purchase_value date, in_purchase_date integer, in_tag integer, in_description integer, in_asset_class integer, in_id integer)">
      <title id="public.function.asset-item-search-in-dep-account-id-integer-in-asset-account-id-integer-in-invoice-id-text-in-department-id-text-in-warehouse-id-date-in-start-depreciation-numeric-in-salvage-value-numeric-in-usable-life-numeric-in-purchase-value-date-in-purchase-date-integer-in-tag-integer-in-description-integer-in-asset-class-integer-in-id-integer-title">
       asset_item__search(in_dep_account_id integer, in_asset_account_id integer, in_invoice_id text, in_department_id text, in_warehouse_id date, in_start_depreciation numeric, in_salvage_value numeric, in_usable_life numeric, in_purchase_value date, in_purchase_date integer, in_tag integer, in_description integer, in_asset_class integer, in_id integer)
      </title>
      <titleabbrev id="public.function.asset-item-search-in-dep-account-id-integer-in-asset-account-id-integer-in-invoice-id-text-in-department-id-text-in-warehouse-id-date-in-start-depreciation-numeric-in-salvage-value-numeric-in-usable-life-numeric-in-purchase-value-date-in-purchase-date-integer-in-tag-integer-in-description-integer-in-asset-class-integer-in-id-integer-titleabbrev">
       asset_item__search(in_dep_account_id integer, in_asset_account_id integer, in_invoice_id text, in_department_id text, in_warehouse_id date, in_start_depreciation numeric, in_salvage_value numeric, in_usable_life numeric, in_purchase_value date, in_purchase_date integer, in_tag integer, in_description integer, in_asset_class integer, in_id integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>SET OF asset_item</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
DECLARE retval asset_item;
BEGIN
    FOR retval IN
         SELECT * FROM asset_item
          WHERE (id = in_id or in_id is null)
                and (asset_class_id = in_asset_class or in_asset_class is null)
                and (description like &#39;%&#39;||in_description||&#39;%&#39;
                     or in_description is null)
                and (tag like &#39;%&#39; || in_tag || &#39;%&#39; or in_tag is null)
                and (purchase_value = in_purchase_value 
                    or in_purchase_value is null)
                and (in_purchase_date = purchase_date 
                    or in_purchase_date is null)
                and (start_depreciation = in_start_depreciation
                    or in_start_depreciation is null)
                and (in_warehouse_id = location_id OR in_warehouse_id is null)
                and (department_id = in_department_id 
                    or in_department_id is null)
                and (in_invoice_id = invoice_id OR in_invoice_id IS NULL)
                and (asset_account_id = in_asset_account_id
                    or in_asset_account_id is null)
                and (dep_account_id = in_dep_account_id
                    or in_dep_account_id is null)
   LOOP
       return next retval;
   end loop;
END;
</programlisting>
      </para>
    </section>

<!-- Function asset_report__approve(in_expense_acct integer, in_id integer) -->
    <section id="public.function.asset-report-approve-in-expense-acct-integer-in-id-integer"
             xreflabel="publicasset_report__approve(in_expense_acct integer, in_id integer)">
      <title id="public.function.asset-report-approve-in-expense-acct-integer-in-id-integer-title">
       asset_report__approve(in_expense_acct integer, in_id integer)
      </title>
      <titleabbrev id="public.function.asset-report-approve-in-expense-acct-integer-in-id-integer-titleabbrev">
       asset_report__approve(in_expense_acct integer, in_id integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>asset_report</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
DECLARE ret_val asset_report;
BEGIN
        UPDATE asset_report 
           SET approved_at = now(),
               approved_by = person__get_my_entity_id()
         where id = in_id;
	SELECT * INTO ret_val FROM asset_report WHERE id = in_id;
        if ret_val.dont_approve is not true then 
                PERFORM asset_report__generate_gl(in_id, in_expense_acct);
        end if;
	SELECT * INTO ret_val FROM asset_report WHERE id = in_id;
	RETURN ret_val;
end;
</programlisting>
      </para>
    </section>

<!-- Function asset_report__begin_disposal(in_report_date integer, in_asset_class date) -->
    <section id="public.function.asset-report-begin-disposal-in-report-date-integer-in-asset-class-date"
             xreflabel="publicasset_report__begin_disposal(in_report_date integer, in_asset_class date)">
      <title id="public.function.asset-report-begin-disposal-in-report-date-integer-in-asset-class-date-title">
       asset_report__begin_disposal(in_report_date integer, in_asset_class date)
      </title>
      <titleabbrev id="public.function.asset-report-begin-disposal-in-report-date-integer-in-asset-class-date-titleabbrev">
       asset_report__begin_disposal(in_report_date integer, in_asset_class date)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>asset_report</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
DECLARE retval asset_report;

begin

INSERT INTO asset_report (asset_class, report_date, entered_at, entered_by)
   VALUES (in_asset_class, in_report_date, now(), person__get_my_entity_id());

SELECT * INTO retval FROM asset_report where id = currval(&#39;asset_report_id_seq&#39;);

return retval;

end;

</programlisting>
      </para>
    </section>

<!-- Function asset_report__dispose(in_amount integer, in_asset_id integer, in_id numeric) -->
    <section id="public.function.asset-report-dispose-in-amount-integer-in-asset-id-integer-in-id-numeric"
             xreflabel="publicasset_report__dispose(in_amount integer, in_asset_id integer, in_id numeric)">
      <title id="public.function.asset-report-dispose-in-amount-integer-in-asset-id-integer-in-id-numeric-title">
       asset_report__dispose(in_amount integer, in_asset_id integer, in_id numeric)
      </title>
      <titleabbrev id="public.function.asset-report-dispose-in-amount-integer-in-asset-id-integer-in-id-numeric-titleabbrev">
       asset_report__dispose(in_amount integer, in_asset_id integer, in_id numeric)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>boolean</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
INSERT INTO asset_report_line (report_id, asset_id, amount)
                     values   ($1, $2, $3);

SELECT TRUE;
</programlisting>
      </para>
    </section>

<!-- Function asset_report__get(in_id integer) -->
    <section id="public.function.asset-report-get-in-id-integer"
             xreflabel="publicasset_report__get(in_id integer)">
      <title id="public.function.asset-report-get-in-id-integer-title">
       asset_report__get(in_id integer)
      </title>
      <titleabbrev id="public.function.asset-report-get-in-id-integer-titleabbrev">
       asset_report__get(in_id integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>asset_report</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
select * from asset_report where id = $1;
</programlisting>
      </para>
    </section>

<!-- Function asset_report__get_lines(in_id integer) -->
    <section id="public.function.asset-report-get-lines-in-id-integer"
             xreflabel="publicasset_report__get_lines(in_id integer)">
      <title id="public.function.asset-report-get-lines-in-id-integer-title">
       asset_report__get_lines(in_id integer)
      </title>
      <titleabbrev id="public.function.asset-report-get-lines-in-id-integer-titleabbrev">
       asset_report__get_lines(in_id integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>SET OF asset_report_line_result</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
   select ai.tag, coalesce(ai.start_depreciation, ai.purchase_date), ai.purchase_value, m.short_name, 
          ai.usable_life, 
          ai.purchase_value - ai.salvage_value, max(pr.report_date),
          sum(case when pr.report_date &lt; r.report_date then prl.amount
                   else 0
                end), 
          rl.amount, 
          sum (case when extract(year from pr.report_date)
                         = extract(year from r.report_date)
                         AND pr.report_date &lt; r.report_date
                    then prl.amount
                    else 0
                end), 
          sum(prl.amount), 
          ai.description, ai.purchase_date
     FROM asset_item ai
     JOIN asset_class c ON (ai.asset_class_id = c.id)
     JOIN asset_dep_method m ON (c.method = m.id)
     JOIN asset_report_line rl ON (rl.asset_id = ai.id)
     JOIN asset_report r ON (rl.report_id = r.id)
LEFT JOIN asset_report_line prl ON (prl.asset_id = ai.id)
LEFT JOIN asset_report pr ON (prl.report_id = pr.id)
    WHERE rl.report_id = $1
 GROUP BY ai.tag, ai.start_depreciation, ai.purchase_value, m.short_name,
          ai.usable_life, ai.salvage_value, r.report_date, rl.amount,
          ai.description, ai.purchase_date;
</programlisting>
      </para>
    </section>

<!-- Function asset_report__record_approve(in_id integer) -->
    <section id="public.function.asset-report-record-approve-in-id-integer"
             xreflabel="publicasset_report__record_approve(in_id integer)">
      <title id="public.function.asset-report-record-approve-in-id-integer-title">
       asset_report__record_approve(in_id integer)
      </title>
      <titleabbrev id="public.function.asset-report-record-approve-in-id-integer-titleabbrev">
       asset_report__record_approve(in_id integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>asset_report</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
UPDATE asset_report 
   set approved_by = person__get_my_entity_id(),
       approved_at = now()
 where id = $1;

select * from asset_report where id = $1;

</programlisting>
      </para>
    </section>

<!-- Function asset_report__save(in_submit integer, in_asset_class date, in_report_class integer, in_report_date integer, in_id boolean) -->
    <section id="public.function.asset-report-save-in-submit-integer-in-asset-class-date-in-report-class-integer-in-report-date-integer-in-id-boolean"
             xreflabel="publicasset_report__save(in_submit integer, in_asset_class date, in_report_class integer, in_report_date integer, in_id boolean)">
      <title id="public.function.asset-report-save-in-submit-integer-in-asset-class-date-in-report-class-integer-in-report-date-integer-in-id-boolean-title">
       asset_report__save(in_submit integer, in_asset_class date, in_report_class integer, in_report_date integer, in_id boolean)
      </title>
      <titleabbrev id="public.function.asset-report-save-in-submit-integer-in-asset-class-date-in-report-class-integer-in-report-date-integer-in-id-boolean-titleabbrev">
       asset_report__save(in_submit integer, in_asset_class date, in_report_class integer, in_report_date integer, in_id boolean)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>asset_report</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
DECLARE 
	ret_val asset_report;
	item record;
	method_text text;
BEGIN
	DELETE FROM asset_report_line where report_id = in_id;

	UPDATE asset_report 
	set asset_class = in_asset_class,
		report_class = in_report_class,
		report_date = in_report_date,
		submitted = (in_submit or submitted)
	WHERE id = in_id;

	IF FOUND THEN
		SELECT * INTO ret_val FROM asset_report WHERE id = in_id;
	ELSE 
		INSERT INTO asset_report(report_class, asset_class, report_date,
			submitted)
		values (in_report_class, in_asset_class, in_report_date, 
			coalesce(in_submit, true));

		SELECT * INTO ret_val FROM asset_report 
		WHERE id = currval(&#39;asset_report_id_seq&#39;);
                
	END IF;
        RETURN ret_val;

END;
</programlisting>
      </para>
    </section>

<!-- Function asset_report__search(in_entered_by date, in_approved date, in_asset_class integer, in_end_date boolean, in_start_date integer) -->
    <section id="public.function.asset-report-search-in-entered-by-date-in-approved-date-in-asset-class-integer-in-end-date-boolean-in-start-date-integer"
             xreflabel="publicasset_report__search(in_entered_by date, in_approved date, in_asset_class integer, in_end_date boolean, in_start_date integer)">
      <title id="public.function.asset-report-search-in-entered-by-date-in-approved-date-in-asset-class-integer-in-end-date-boolean-in-start-date-integer-title">
       asset_report__search(in_entered_by date, in_approved date, in_asset_class integer, in_end_date boolean, in_start_date integer)
      </title>
      <titleabbrev id="public.function.asset-report-search-in-entered-by-date-in-approved-date-in-asset-class-integer-in-end-date-boolean-in-start-date-integer-titleabbrev">
       asset_report__search(in_entered_by date, in_approved date, in_asset_class integer, in_end_date boolean, in_start_date integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>SET OF asset_report_result</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>

  SELECT r.id, r.report_date, r.gl_id, r.asset_class, r.report_class, 
         r.entered_by, r.approved_by, r.entered_at, r.approved_at, 
         r.depreciated_qty, r.dont_approve, r.submitted, sum(l.amount)
    FROM asset_report r
    JOIN asset_report_line l ON (l.report_id = r.id)
   where ($1 is null or $1 &lt;= report_date)
         and ($2 is null or $2 &gt;= report_date)
         and ($3 is null or $3 = asset_class)
         and ($4 is null 
              or ($4 is true and approved_by is not null)
              or ($4 is false and approved_by is null))
         and ($5 is null or $5 = entered_by)
GROUP BY r.id, r.report_date, r.gl_id, r.asset_class, r.report_class,
         r.entered_by, r.approved_by, r.entered_at, r.approved_at,
         r.depreciated_qty, r.dont_approve, r.submitted;
</programlisting>
      </para>
    </section>

<!-- Function avgcost(integer) -->
    <section id="public.function.avgcost-integer"
             xreflabel="publicavgcost(integer)">
      <title id="public.function.avgcost-integer-title">
       avgcost(integer)
      </title>
      <titleabbrev id="public.function.avgcost-integer-titleabbrev">
       avgcost(integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>double precision</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>

DECLARE

v_cost float;
v_qty float;
v_parts_id alias for $1;

BEGIN

  SELECT INTO v_cost, v_qty SUM(i.sellprice * i.qty), SUM(i.qty)
  FROM invoice i
  JOIN ap a ON (a.id = i.trans_id)
  WHERE i.parts_id = v_parts_id;
  
  IF v_cost IS NULL THEN
    v_cost := 0;
  END IF;

  IF NOT v_qty IS NULL THEN
    IF v_qty = 0 THEN
      v_cost := 0;
    ELSE
      v_cost := v_cost/v_qty;
    END IF;
  END IF;

RETURN v_cost;
END;
</programlisting>
      </para>
    </section>

<!-- Function batch_create(in_batch_date text, in_batch_class text, in_description text, in_batch_number date) -->
    <section id="public.function.batch-create-in-batch-date-text-in-batch-class-text-in-description-text-in-batch-number-date"
             xreflabel="publicbatch_create(in_batch_date text, in_batch_class text, in_description text, in_batch_number date)">
      <title id="public.function.batch-create-in-batch-date-text-in-batch-class-text-in-description-text-in-batch-number-date-title">
       batch_create(in_batch_date text, in_batch_class text, in_description text, in_batch_number date)
      </title>
      <titleabbrev id="public.function.batch-create-in-batch-date-text-in-batch-class-text-in-description-text-in-batch-number-date-titleabbrev">
       batch_create(in_batch_date text, in_batch_class text, in_description text, in_batch_number date)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>integer</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
BEGIN
	INSERT INTO 
		batch (batch_class_id, default_date, description, control_code,
			created_by)
	VALUES ((SELECT id FROM batch_class WHERE class = in_batch_class),
		in_batch_date, in_description, in_batch_number, 
			(select entity_id FROM users WHERE username = session_user));

	return currval(&#39;batch_id_seq&#39;);
END;	
</programlisting>
      </para>
    </section>

<!-- Function batch_delete(in_batch_id integer) -->
    <section id="public.function.batch-delete-in-batch-id-integer"
             xreflabel="publicbatch_delete(in_batch_id integer)">
      <title id="public.function.batch-delete-in-batch-id-integer-title">
       batch_delete(in_batch_id integer)
      </title>
      <titleabbrev id="public.function.batch-delete-in-batch-id-integer-titleabbrev">
       batch_delete(in_batch_id integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>integer</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
DECLARE 
	t_transaction_ids int[];
BEGIN
	-- Adjust AR/AP tables for payment and payment reversal vouchers
	-- voucher_id is only set in acc_trans on payment/receipt vouchers and
	-- their reversals. -CT
	update ar set paid = amount + 
		(select sum(amount) from acc_trans 
		join chart ON (acc_trans.chart_id = chart.id)
		where link = &#39;AR&#39; AND trans_id = ar.id
			AND (voucher_id IS NULL OR voucher_id NOT IN 
				(select id from voucher 
				WHERE batch_id = in_batch_id))) 
	where id in (select trans_id from acc_trans where voucher_id IN 
		(select id from voucher where batch_id = in_batch_id));

	update ap set paid = amount - (select sum(amount) from acc_trans 
		join chart ON (acc_trans.chart_id = chart.id)
		where link = &#39;AP&#39; AND trans_id = ap.id
			AND (voucher_id IS NULL OR voucher_id NOT IN 
				(select id from voucher 
				WHERE batch_id = in_batch_id))) 
	where id in (select trans_id from acc_trans where voucher_id IN 
		(select id from voucher where batch_id = in_batch_id));

	DELETE FROM acc_trans WHERE voucher_id IN 
		(select id FROM voucher where batch_id = in_batch_id);

	-- The rest of this function involves the deletion of actual
	-- transactions, vouchers, and batches, and jobs which are in progress.
	-- -CT
	SELECT as_array(trans_id) INTO t_transaction_ids
	FROM voucher WHERE batch_id = in_batch_id AND batch_class IN (1, 2, 5);

	DELETE FROM acc_trans WHERE trans_id = ANY(t_transaction_ids);
	DELETE FROM ap WHERE id = ANY(t_transaction_ids);
	DELETE FROM gl WHERE id = ANY(t_transaction_ids);
	DELETE FROM voucher WHERE batch_id = in_batch_id;
	DELETE FROM payments_queue WHERE batch_id = in_batch_id;
	DELETE FROM pending_job WHERE batch_id = in_batch_id;
	DELETE FROM batch WHERE id = in_batch_id;
	DELETE FROM transactions WHERE id = ANY(t_transaction_ids);

	RETURN 1;
END;
</programlisting>
      </para>
    </section>

<!-- Function batch_get_class_id(in_type text) -->
    <section id="public.function.batch-get-class-id-in-type-text"
             xreflabel="publicbatch_get_class_id(in_type text)">
      <title id="public.function.batch-get-class-id-in-type-text-title">
       batch_get_class_id(in_type text)
      </title>
      <titleabbrev id="public.function.batch-get-class-id-in-type-text-titleabbrev">
       batch_get_class_id(in_type text)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>integer</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
SELECT id FROM batch_class WHERE class = $1;
</programlisting>
      </para>
    </section>

<!-- Function batch_get_users() -->
    <section id="public.function.batch-get-users"
             xreflabel="publicbatch_get_users()">
      <title id="public.function.batch-get-users-title">
       batch_get_users()
      </title>
      <titleabbrev id="public.function.batch-get-users-titleabbrev">
       batch_get_users()
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>SET OF users</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
DECLARE out_record users%ROWTYPE;
BEGIN
	FOR out_record IN
		SELECT * from users WHERE entity_id IN (select created_by from batch)
	LOOP
		RETURN NEXT out_record;
	END LOOP;
END;
</programlisting>
      </para>
    </section>

<!-- Function batch_list_classes() -->
    <section id="public.function.batch-list-classes"
             xreflabel="publicbatch_list_classes()">
      <title id="public.function.batch-list-classes-title">
       batch_list_classes()
      </title>
      <titleabbrev id="public.function.batch-list-classes-titleabbrev">
       batch_list_classes()
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>SET OF batch_class</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
DECLARE out_val record;
BEGIN
	FOR out_val IN select * from batch_class
 	LOOP
		return next out_val;
	END LOOP;
END;
</programlisting>
      </para>
    </section>

<!-- Function batch_post(in_batch_id integer) -->
    <section id="public.function.batch-post-in-batch-id-integer"
             xreflabel="publicbatch_post(in_batch_id integer)">
      <title id="public.function.batch-post-in-batch-id-integer-title">
       batch_post(in_batch_id integer)
      </title>
      <titleabbrev id="public.function.batch-post-in-batch-id-integer-titleabbrev">
       batch_post(in_batch_id integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>date</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
BEGIN
	UPDATE ar SET approved = true 
	WHERE id IN (select trans_id FROM voucher 
		WHERE batch_id = in_batch_id
		AND batch_class = 2);
	
	UPDATE ap SET approved = true 
	WHERE id IN (select trans_id FROM voucher 
		WHERE batch_id = in_batch_id
		AND batch_class = 1);

	UPDATE gl SET approved = true 
	WHERE id IN (select trans_id FROM voucher 
		WHERE batch_id = in_batch_id
		AND batch_class = 5);

	UPDATE acc_trans SET approved = true 
	WHERE voucher_id IN (select id FROM voucher 
		WHERE batch_id = in_batch_id
		AND batch_class IN (3, 4, 7, 8));

	UPDATE batch 
	SET approved_on = now(),
		approved_by = (select entity_id FROM users 
			WHERE username = SESSION_USER)
	WHERE id = in_batch_id;

	RETURN now()::date;
END;
</programlisting>
      </para>
    </section>

<!-- Function batch_search(in_approved integer, in_amount_lt text, in_amount_gt integer, in_date_to date, in_date_from date, in_created_by_eid numeric, in_description numeric, in_class_id boolean) -->
    <section id="public.function.batch-search-in-approved-integer-in-amount-lt-text-in-amount-gt-integer-in-date-to-date-in-date-from-date-in-created-by-eid-numeric-in-description-numeric-in-class-id-boolean"
             xreflabel="publicbatch_search(in_approved integer, in_amount_lt text, in_amount_gt integer, in_date_to date, in_date_from date, in_created_by_eid numeric, in_description numeric, in_class_id boolean)">
      <title id="public.function.batch-search-in-approved-integer-in-amount-lt-text-in-amount-gt-integer-in-date-to-date-in-date-from-date-in-created-by-eid-numeric-in-description-numeric-in-class-id-boolean-title">
       batch_search(in_approved integer, in_amount_lt text, in_amount_gt integer, in_date_to date, in_date_from date, in_created_by_eid numeric, in_description numeric, in_class_id boolean)
      </title>
      <titleabbrev id="public.function.batch-search-in-approved-integer-in-amount-lt-text-in-amount-gt-integer-in-date-to-date-in-date-from-date-in-created-by-eid-numeric-in-description-numeric-in-class-id-boolean-titleabbrev">
       batch_search(in_approved integer, in_amount_lt text, in_amount_gt integer, in_date_to date, in_date_from date, in_created_by_eid numeric, in_description numeric, in_class_id boolean)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>SET OF batch_list_item</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
DECLARE out_value batch_list_item;
BEGIN
	FOR out_value IN
		SELECT b.id, c.class, b.control_code, b.description, u.username,
			b.created_on,
			sum(
				CASE WHEN vc.id = 5 AND al.amount &lt; 0 -- GL
				     THEN al.amount 
				     WHEN vc.id  = 1
				     THEN ap.amount 
				     WHEN vc.id = 2
                                     THEN ap.amount
				     ELSE 0
                                END) AS transaction_total,
			sum(
				CASE WHEN alc.link = &#39;AR&#39; AND vc.id IN (6, 7)
				     THEN al.amount
				     WHEN alc.link = &#39;AP&#39; AND vc.id IN (3, 4)
				     THEN al.amount * -1
				     ELSE 0
				END
			   ) AS payment_total
		FROM batch b
		JOIN batch_class c ON (b.batch_class_id = c.id)
		LEFT JOIN users u ON (u.entity_id = b.created_by)
		JOIN voucher v ON (v.batch_id = b.id)
		JOIN batch_class vc ON (v.batch_class = vc.id)
		LEFT JOIN ar ON (vc.id = 2 AND v.trans_id = ar.id)
		LEFT JOIN ap ON (vc.id = 1 AND v.trans_id = ap.id)
		LEFT JOIN acc_trans al ON 
			((vc.id = 5 AND v.trans_id = al.trans_id) OR
				(vc.id IN (3, 4, 6, 7) 
					AND al.voucher_id = v.id))
		LEFT JOIN chart alc ON (al.chart_id = alc.id)
		WHERE (c.id = in_class_id OR in_class_id IS NULL) AND 
			(b.description LIKE 
				&#39;%&#39; || in_description || &#39;%&#39; OR
				in_description IS NULL) AND
			(in_created_by_eid = b.created_by OR
				in_created_by_eid IS NULL) AND
			((in_approved = false OR in_approved IS NULL AND
				approved_on IS NULL) OR
				(in_approved = true AND approved_on IS NOT NULL)
			) 
			and (in_date_from IS NULL 
				or b.default_date &gt;= in_date_from)
			and (in_date_to IS NULL
				or b.default_date &lt;= in_date_to)
		GROUP BY b.id, c.class, b.description, u.username, b.created_on,
			b.control_code
		HAVING  
			(in_amount_gt IS NULL OR
			sum(coalesce(ar.amount - ar.paid, ap.amount - ap.paid, 
				al.amount)) 
			&gt;= in_amount_gt) 
			AND 
			(in_amount_lt IS NULL OR
			sum(coalesce(ar.amount - ar.paid, ap.amount - ap.paid, 
				al.amount))
			&lt;= in_amount_lt)
		ORDER BY b.control_code, b.description
		
	LOOP
		RETURN NEXT out_value;
	END LOOP;
END;
</programlisting>
      </para>
    </section>

<!-- Function batch_search_empty(in_approved integer, in_amount_lt text, in_amount_gt integer, in_created_by_eid numeric, in_description numeric, in_class_id boolean) -->
    <section id="public.function.batch-search-empty-in-approved-integer-in-amount-lt-text-in-amount-gt-integer-in-created-by-eid-numeric-in-description-numeric-in-class-id-boolean"
             xreflabel="publicbatch_search_empty(in_approved integer, in_amount_lt text, in_amount_gt integer, in_created_by_eid numeric, in_description numeric, in_class_id boolean)">
      <title id="public.function.batch-search-empty-in-approved-integer-in-amount-lt-text-in-amount-gt-integer-in-created-by-eid-numeric-in-description-numeric-in-class-id-boolean-title">
       batch_search_empty(in_approved integer, in_amount_lt text, in_amount_gt integer, in_created_by_eid numeric, in_description numeric, in_class_id boolean)
      </title>
      <titleabbrev id="public.function.batch-search-empty-in-approved-integer-in-amount-lt-text-in-amount-gt-integer-in-created-by-eid-numeric-in-description-numeric-in-class-id-boolean-titleabbrev">
       batch_search_empty(in_approved integer, in_amount_lt text, in_amount_gt integer, in_created_by_eid numeric, in_description numeric, in_class_id boolean)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>SET OF batch_list_item</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
DECLARE out_value batch_list_item;
BEGIN
	FOR out_value IN
		SELECT b.id, c.class, b.control_code, b.description, u.username,
			b.created_on,
			sum(
				CASE WHEN vc.id = 5 AND al.amount &lt; 0 -- GL
				     THEN al.amount 
				     WHEN vc.id  = 1
				     THEN ap.amount 
				     WHEN vc.id = 2
                                     THEN ap.amount
				     ELSE 0
                                END) AS transaction_total,
			sum(
				CASE WHEN alc.link = &#39;AR&#39; AND vc.id IN (6, 7)
				     THEN al.amount
				     WHEN alc.link = &#39;AP&#39; AND vc.id IN (3, 4)
				     THEN al.amount * -1
				     ELSE 0
				END
			   ) AS payment_total
		FROM batch b
		JOIN batch_class c ON (b.batch_class_id = c.id)
		LEFT JOIN users u ON (u.entity_id = b.created_by)
		LEFT JOIN voucher v ON (v.batch_id = b.id)
		LEFT JOIN batch_class vc ON (v.batch_class = vc.id)
		LEFT JOIN ar ON (vc.id = 2 AND v.trans_id = ar.id)
		LEFT JOIN ap ON (vc.id = 1 AND v.trans_id = ap.id)
		LEFT JOIN acc_trans al ON 
			((vc.id = 5 AND v.trans_id = al.trans_id) OR
				(vc.id IN (3, 4, 6, 7) 
					AND al.voucher_id = v.id))
		LEFT JOIN chart alc ON (al.chart_id = alc.id)
		WHERE (c.id = in_class_id OR in_class_id IS NULL) AND 
			(b.description LIKE 
				&#39;%&#39; || in_description || &#39;%&#39; OR
				in_description IS NULL) AND
			(in_created_by_eid = b.created_by OR
				in_created_by_eid IS NULL) AND
			((in_approved = false OR in_approved IS NULL AND
				approved_on IS NULL) OR
				(in_approved = true AND approved_on IS NOT NULL)
			)
		GROUP BY b.id, c.class, b.description, u.username, b.created_on,
			b.control_code
		HAVING  
			(in_amount_gt IS NULL OR
			sum(coalesce(ar.amount - ar.paid, ap.amount - ap.paid, 
				al.amount)) 
			&gt;= in_amount_gt) 
			AND 
			(in_amount_lt IS NULL OR
			sum(coalesce(ar.amount - ar.paid, ap.amount - ap.paid, 
				al.amount))
			&lt;= in_amount_lt)
			AND count(v.*) = 0
		ORDER BY b.control_code, b.description
		
	LOOP
		RETURN NEXT out_value;
	END LOOP;
END;
</programlisting>
      </para>
    </section>

<!-- Function batch_search_mini(in_approved integer, in_created_by_eid text, in_description integer, in_class_id boolean) -->
    <section id="public.function.batch-search-mini-in-approved-integer-in-created-by-eid-text-in-description-integer-in-class-id-boolean"
             xreflabel="publicbatch_search_mini(in_approved integer, in_created_by_eid text, in_description integer, in_class_id boolean)">
      <title id="public.function.batch-search-mini-in-approved-integer-in-created-by-eid-text-in-description-integer-in-class-id-boolean-title">
       batch_search_mini(in_approved integer, in_created_by_eid text, in_description integer, in_class_id boolean)
      </title>
      <titleabbrev id="public.function.batch-search-mini-in-approved-integer-in-created-by-eid-text-in-description-integer-in-class-id-boolean-titleabbrev">
       batch_search_mini(in_approved integer, in_created_by_eid text, in_description integer, in_class_id boolean)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>SET OF batch_list_item</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
DECLARE out_value batch_list_item;
BEGIN
	FOR out_value IN
		SELECT b.id, c.class, b.control_code, b.description, u.username,
			b.created_on, NULL
		FROM batch b
		JOIN batch_class c ON (b.batch_class_id = c.id)
		LEFT JOIN users u ON (u.entity_id = b.created_by)
		WHERE (c.id = in_class_id OR in_class_id IS NULL) AND 
			(b.description LIKE 
				&#39;%&#39; || in_description || &#39;%&#39; OR
				in_description IS NULL) AND
			(in_created_by_eid = b.created_by OR
				in_created_by_eid IS NULL) AND
			((in_approved = false OR in_approved IS NULL AND
				approved_on IS NULL) OR
				(in_approved = true AND approved_on IS NOT NULL)
			)
		GROUP BY b.id, c.class, b.description, u.username, b.created_on,
			b.control_code
	LOOP
		RETURN NEXT out_value;
	END LOOP;
END;
</programlisting>
      </para>
    </section>

<!-- Function batch_update(in_id text, in_description character varying, in_batch_number date, in_entered text, in_login text, in_batch integer) -->
    <section id="public.function.batch-update-in-id-text-in-description-character-varying-in-batch-number-date-in-entered-text-in-login-text-in-batch-integer"
             xreflabel="publicbatch_update(in_id text, in_description character varying, in_batch_number date, in_entered text, in_login text, in_batch integer)">
      <title id="public.function.batch-update-in-id-text-in-description-character-varying-in-batch-number-date-in-entered-text-in-login-text-in-batch-integer-title">
       batch_update(in_id text, in_description character varying, in_batch_number date, in_entered text, in_login text, in_batch integer)
      </title>
      <titleabbrev id="public.function.batch-update-in-id-text-in-description-character-varying-in-batch-number-date-in-entered-text-in-login-text-in-batch-integer-titleabbrev">
       batch_update(in_id text, in_description character varying, in_batch_number date, in_entered text, in_login text, in_batch integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>integer</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
BEGIN
	UPDATE batch
	SET batch_number = in_batch_number,
		description = in_description,
		entered = in_entered
	WHERE id = in_id;

	IF FOUND THEN 
		RETURN in_id;
	END IF;

	INSERT INTO batch (batch, employee_id, batch_number, description, 
		entered)
	VALUES (in_batch, (SELECT id FROM employees WHERE login = in_login),
		in_batch_number, description);

	RETURN currval(&#39;id&#39;);
END;
</programlisting>
      </para>
    </section>

<!-- Function business_type__list() -->
    <section id="public.function.business-type-list"
             xreflabel="publicbusiness_type__list()">
      <title id="public.function.business-type-list-title">
       business_type__list()
      </title>
      <titleabbrev id="public.function.business-type-list-titleabbrev">
       business_type__list()
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>SET OF business</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
DECLARE out_row business%ROWTYPE;
BEGIN
	FOR out_row IN SELECT * FROM business LOOP
		RETURN NEXT out_row;
	END LOOP;
END;
</programlisting>
      </para>
    </section>

<!-- Function chart_get_ar_ap(in_account_class integer) -->
    <section id="public.function.chart-get-ar-ap-in-account-class-integer"
             xreflabel="publicchart_get_ar_ap(in_account_class integer)">
      <title id="public.function.chart-get-ar-ap-in-account-class-integer-title">
       chart_get_ar_ap(in_account_class integer)
      </title>
      <titleabbrev id="public.function.chart-get-ar-ap-in-account-class-integer-titleabbrev">
       chart_get_ar_ap(in_account_class integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>SET OF chart</seg>
        </seglistitem>
       </segmentedlist>
 
        This function returns the cash account acording with in_account_class which must be 1 or 2 
        <programlisting>
DECLARE out_row chart%ROWTYPE;
BEGIN
	IF in_account_class NOT IN (1, 2) THEN
		RAISE EXCEPTION &#39;Bad Account Type&#39;;
	END IF;
       FOR out_row IN
               SELECT * FROM chart 
               WHERE link = CASE WHEN in_account_class = 1 THEN &#39;AP&#39;
                               WHEN in_account_class = 2 THEN &#39;AR&#39;
                               END
               ORDER BY accno
       LOOP
               RETURN NEXT out_row;
       END LOOP;
END;
</programlisting>
      </para>
    </section>

<!-- Function chart_list_all() -->
    <section id="public.function.chart-list-all"
             xreflabel="publicchart_list_all()">
      <title id="public.function.chart-list-all-title">
       chart_list_all()
      </title>
      <titleabbrev id="public.function.chart-list-all-titleabbrev">
       chart_list_all()
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>SET OF chart</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
DECLARE out_row chart%ROWTYPE;
BEGIN
	FOR out_row IN 
		SELECT * FROM chart ORDER BY accno
	LOOP
		RETURN next out_row;
	END LOOP;
END;
</programlisting>
      </para>
    </section>

<!-- Function chart_list_cash(in_account_class integer) -->
    <section id="public.function.chart-list-cash-in-account-class-integer"
             xreflabel="publicchart_list_cash(in_account_class integer)">
      <title id="public.function.chart-list-cash-in-account-class-integer-title">
       chart_list_cash(in_account_class integer)
      </title>
      <titleabbrev id="public.function.chart-list-cash-in-account-class-integer-titleabbrev">
       chart_list_cash(in_account_class integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>SET OF chart</seg>
        </seglistitem>
       </segmentedlist>
 
        This function returns the overpayment accounts acording with in_account_class which must be 1 or 2 
        <programlisting>
 DECLARE resultrow record;
         link_string text;
 BEGIN
         IF in_account_class = 1 THEN
            link_string := &#39;%AP_paid%&#39;;
         ELSE 
            link_string := &#39;%AR_paid%&#39;;
         END IF;
 
         FOR resultrow IN
           SELECT *  FROM chart
           WHERE link LIKE link_string
           ORDER BY accno
           LOOP
           return next resultrow;
         END LOOP;
 END;
</programlisting>
      </para>
    </section>

<!-- Function chart_list_discount(in_account_class integer) -->
    <section id="public.function.chart-list-discount-in-account-class-integer"
             xreflabel="publicchart_list_discount(in_account_class integer)">
      <title id="public.function.chart-list-discount-in-account-class-integer-title">
       chart_list_discount(in_account_class integer)
      </title>
      <titleabbrev id="public.function.chart-list-discount-in-account-class-integer-titleabbrev">
       chart_list_discount(in_account_class integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>SET OF chart</seg>
        </seglistitem>
       </segmentedlist>
 
        This function returns the discount accounts acording with in_account_class which must be 1 or 2 
        <programlisting>
DECLARE resultrow record;
        link_string text;
BEGIN
        IF in_account_class = 1 THEN
           link_string := &#39;%AP_discount%&#39;;
        ELSE
           link_string := &#39;%AR_discount%&#39;;
        END IF;

        FOR resultrow IN
          SELECT *  FROM chart
          WHERE link LIKE link_string
          ORDER BY accno
          LOOP
          return next resultrow;
        END LOOP;
END;
</programlisting>
      </para>
    </section>

<!-- Function chart_list_overpayment(in_account_class integer) -->
    <section id="public.function.chart-list-overpayment-in-account-class-integer"
             xreflabel="publicchart_list_overpayment(in_account_class integer)">
      <title id="public.function.chart-list-overpayment-in-account-class-integer-title">
       chart_list_overpayment(in_account_class integer)
      </title>
      <titleabbrev id="public.function.chart-list-overpayment-in-account-class-integer-titleabbrev">
       chart_list_overpayment(in_account_class integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>SET OF chart</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
DECLARE resultrow record;
        link_string text;
BEGIN
        IF in_account_class = 1 THEN
           link_string := &#39;%AP_overpayment%&#39;;
        ELSE 
           link_string := &#39;%AR_overpayment%&#39;;
        END IF;

        FOR resultrow IN
          SELECT *  FROM chart
          WHERE link LIKE link_string
          ORDER BY accno
          LOOP
          return next resultrow;
        END LOOP;
END;
</programlisting>
      </para>
    </section>

<!-- Function chart_list_search(search text) -->
    <section id="public.function.chart-list-search-search-text"
             xreflabel="publicchart_list_search(search text)">
      <title id="public.function.chart-list-search-search-text-title">
       chart_list_search(search text)
      </title>
      <titleabbrev id="public.function.chart-list-search-search-text-titleabbrev">
       chart_list_search(search text)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>SET OF chart</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
DECLARE out_row chart%ROWTYPE;
BEGIN
	FOR out_row IN 
		SELECT * FROM chart WHERE accno ~* (&#39;^&#39;||search) OR description ~* (&#39;^&#39;||search) ORDER BY accno
	LOOP
		RETURN next out_row;
	END LOOP;
END;</programlisting>
      </para>
    </section>

<!-- Function check_department() -->
    <section id="public.function.check-department"
             xreflabel="publiccheck_department()">
      <title id="public.function.check-department-title">
       check_department()
      </title>
      <titleabbrev id="public.function.check-department-titleabbrev">
       check_department()
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>trigger</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>

declare
  dpt_id int;

begin
 
  if new.department_id = 0 then
    delete from dpt_trans where trans_id = new.id;
    return NULL;
  end if;

  select into dpt_id trans_id from dpt_trans where trans_id = new.id;
  
  if dpt_id &gt; 0 then
    update dpt_trans set department_id = new.department_id where trans_id = dpt_id;
  else
    insert into dpt_trans (trans_id, department_id) values (new.id, new.department_id);
  end if;
return NULL;

end;
</programlisting>
      </para>
    </section>

<!-- Function check_expiration() -->
    <section id="public.function.check-expiration"
             xreflabel="publiccheck_expiration()">
      <title id="public.function.check-expiration-title">
       check_expiration()
      </title>
      <titleabbrev id="public.function.check-expiration-titleabbrev">
       check_expiration()
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>boolean</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
DECLARE test_result BOOL;
	expires_in interval;
	notify_again interval;
BEGIN
	expires_in := user__check_my_expiration();

	SELECT expires_in &lt; notify_password INTO test_result
	FROM users WHERE username = SESSION_USER;

	IF test_result THEN 
		IF expires_in &lt; &#39;1 week&#39; THEN
			notify_again := &#39;1 hour&#39;;
		ELSE
			notify_again := &#39;1 day&#39;;
		END IF;

		UPDATE users 
		SET notify_password = expires_in - notify_again
		WHERE username = SESSION_USER;
	END IF;
	RETURN test_result;
END;
</programlisting>
      </para>
    </section>

<!-- Function company__list_bank_account(in_entity_id integer) -->
    <section id="public.function.company-list-bank-account-in-entity-id-integer"
             xreflabel="publiccompany__list_bank_account(in_entity_id integer)">
      <title id="public.function.company-list-bank-account-in-entity-id-integer-title">
       company__list_bank_account(in_entity_id integer)
      </title>
      <titleabbrev id="public.function.company-list-bank-account-in-entity-id-integer-titleabbrev">
       company__list_bank_account(in_entity_id integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>SET OF entity_bank_account</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
DECLARE out_row entity_bank_account%ROWTYPE;
BEGIN
	FOR out_row IN
		SELECT * from entity_bank_account where entity_id = in_entity_id
	LOOP
		RETURN NEXT out_row;
	END LOOP;
END;
</programlisting>
      </para>
    </section>

<!-- Function company__list_contacts(in_entity_id integer) -->
    <section id="public.function.company-list-contacts-in-entity-id-integer"
             xreflabel="publiccompany__list_contacts(in_entity_id integer)">
      <title id="public.function.company-list-contacts-in-entity-id-integer-title">
       company__list_contacts(in_entity_id integer)
      </title>
      <titleabbrev id="public.function.company-list-contacts-in-entity-id-integer-titleabbrev">
       company__list_contacts(in_entity_id integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>SET OF contact_list</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
DECLARE out_row contact_list;
BEGIN
	FOR out_row IN
		SELECT cl.class, cl.id, c.description, c.contact
		FROM company_to_contact c
		JOIN contact_class cl ON (c.contact_class_id = cl.id)
		WHERE company_id = 
			(select id FROM company 
			WHERE entity_id = in_entity_id)
	LOOP
		return next out_row;
	END LOOP;
END;
</programlisting>
      </para>
    </section>

<!-- Function company__list_locations(in_entity_id integer) -->
    <section id="public.function.company-list-locations-in-entity-id-integer"
             xreflabel="publiccompany__list_locations(in_entity_id integer)">
      <title id="public.function.company-list-locations-in-entity-id-integer-title">
       company__list_locations(in_entity_id integer)
      </title>
      <titleabbrev id="public.function.company-list-locations-in-entity-id-integer-titleabbrev">
       company__list_locations(in_entity_id integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>SET OF location_result</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
DECLARE out_row RECORD;
BEGIN
	FOR out_row IN
		SELECT l.id, l.line_one, l.line_two, l.line_three, l.city, 
			l.state, l.mail_code, c.name, lc.class
		FROM location l
		JOIN company_to_location ctl ON (ctl.location_id = l.id)
		JOIN location_class lc ON (ctl.location_class = lc.id)
		JOIN country c ON (c.id = l.country_id)
		WHERE ctl.company_id = (select id from company where entity_id = in_entity_id)
		ORDER BY lc.id, l.id, c.name
	LOOP
		RETURN NEXT out_row;
	END LOOP;
END;
</programlisting>
      </para>
    </section>

<!-- Function company__list_notes(in_entity_id integer) -->
    <section id="public.function.company-list-notes-in-entity-id-integer"
             xreflabel="publiccompany__list_notes(in_entity_id integer)">
      <title id="public.function.company-list-notes-in-entity-id-integer-title">
       company__list_notes(in_entity_id integer)
      </title>
      <titleabbrev id="public.function.company-list-notes-in-entity-id-integer-titleabbrev">
       company__list_notes(in_entity_id integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>SET OF entity_note</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
DECLARE out_row record;
BEGIN
	FOR out_row IN
		SELECT *
		FROM entity_note
		WHERE ref_key = in_entity_id
		ORDER BY created
	LOOP
		RETURN NEXT out_row;
	END LOOP;
END;
</programlisting>
      </para>
    </section>

<!-- Function company__location_save(in_created integer, in_country_code integer, in_mail_code integer, in_state text, in_city text, in_line_two text, in_line_one text, in_location_class text, in_location_id integer, in_entity_id date) -->
    <section id="public.function.company-location-save-in-created-integer-in-country-code-integer-in-mail-code-integer-in-state-text-in-city-text-in-line-two-text-in-line-one-text-in-location-class-text-in-location-id-integer-in-entity-id-date"
             xreflabel="publiccompany__location_save(in_created integer, in_country_code integer, in_mail_code integer, in_state text, in_city text, in_line_two text, in_line_one text, in_location_class text, in_location_id integer, in_entity_id date)">
      <title id="public.function.company-location-save-in-created-integer-in-country-code-integer-in-mail-code-integer-in-state-text-in-city-text-in-line-two-text-in-line-one-text-in-location-class-text-in-location-id-integer-in-entity-id-date-title">
       company__location_save(in_created integer, in_country_code integer, in_mail_code integer, in_state text, in_city text, in_line_two text, in_line_one text, in_location_class text, in_location_id integer, in_entity_id date)
      </title>
      <titleabbrev id="public.function.company-location-save-in-created-integer-in-country-code-integer-in-mail-code-integer-in-state-text-in-city-text-in-line-two-text-in-line-one-text-in-location-class-text-in-location-id-integer-in-entity-id-date-titleabbrev">
       company__location_save(in_created integer, in_country_code integer, in_mail_code integer, in_state text, in_city text, in_line_two text, in_line_one text, in_location_class text, in_location_id integer, in_entity_id date)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>integer</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
    BEGIN
    return _entity_location_save(
        in_entity_id, in_location_id,
        in_location_class, in_line_one, in_line_two, 
        &#39;&#39;, in_city , in_state, in_mail_code, in_country_code);
    END;

</programlisting>
      </para>
    </section>

<!-- Function company__next_id() -->
    <section id="public.function.company-next-id"
             xreflabel="publiccompany__next_id()">
      <title id="public.function.company-next-id-title">
       company__next_id()
      </title>
      <titleabbrev id="public.function.company-next-id-titleabbrev">
       company__next_id()
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>bigint</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
    
    select nextval(&#39;company_id_seq&#39;);
    
</programlisting>
      </para>
    </section>

<!-- Function company__save_contact(in_contact integer, in_description integer, in_contact_class text, in_entity_id text) -->
    <section id="public.function.company-save-contact-in-contact-integer-in-description-integer-in-contact-class-text-in-entity-id-text"
             xreflabel="publiccompany__save_contact(in_contact integer, in_description integer, in_contact_class text, in_entity_id text)">
      <title id="public.function.company-save-contact-in-contact-integer-in-description-integer-in-contact-class-text-in-entity-id-text-title">
       company__save_contact(in_contact integer, in_description integer, in_contact_class text, in_entity_id text)
      </title>
      <titleabbrev id="public.function.company-save-contact-in-contact-integer-in-description-integer-in-contact-class-text-in-entity-id-text-titleabbrev">
       company__save_contact(in_contact integer, in_description integer, in_contact_class text, in_entity_id text)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>integer</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
DECLARE out_id int;
BEGIN
	INSERT INTO company_to_contact(company_id, contact_class_id, 
		description, contact)
	SELECT id, in_contact_class, in_description, in_contact FROM company
	WHERE entity_id = in_entity_id;

	RETURN 1;
END;
</programlisting>
      </para>
    </section>

<!-- Function company__search(in_control_code integer, in_legal_name text, in_business_id text[], in_date_to text, in_date_from text, in_country text, in_mail_code text, in_state text, in_city text, in_address date, in_meta_number date, in_contact_info integer, in_contact text, in_account_class text) -->
    <section id="public.function.company-search-in-control-code-integer-in-legal-name-text-in-business-id-textARRAY-in-date-to-text-in-date-from-text-in-country-text-in-mail-code-text-in-state-text-in-city-text-in-address-date-in-meta-number-date-in-contact-info-integer-in-contact-text-in-account-class-text"
             xreflabel="publiccompany__search(in_control_code integer, in_legal_name text, in_business_id text[], in_date_to text, in_date_from text, in_country text, in_mail_code text, in_state text, in_city text, in_address date, in_meta_number date, in_contact_info integer, in_contact text, in_account_class text)">
      <title id="public.function.company-search-in-control-code-integer-in-legal-name-text-in-business-id-textARRAY-in-date-to-text-in-date-from-text-in-country-text-in-mail-code-text-in-state-text-in-city-text-in-address-date-in-meta-number-date-in-contact-info-integer-in-contact-text-in-account-class-text-title">
       company__search(in_control_code integer, in_legal_name text, in_business_id text[], in_date_to text, in_date_from text, in_country text, in_mail_code text, in_state text, in_city text, in_address date, in_meta_number date, in_contact_info integer, in_contact text, in_account_class text)
      </title>
      <titleabbrev id="public.function.company-search-in-control-code-integer-in-legal-name-text-in-business-id-textARRAY-in-date-to-text-in-date-from-text-in-country-text-in-mail-code-text-in-state-text-in-city-text-in-address-date-in-meta-number-date-in-contact-info-integer-in-contact-text-in-account-class-text-titleabbrev">
       company__search(in_control_code integer, in_legal_name text, in_business_id text[], in_date_to text, in_date_from text, in_country text, in_mail_code text, in_state text, in_city text, in_address date, in_meta_number date, in_contact_info integer, in_contact text, in_account_class text)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>SET OF company_search_result</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
DECLARE
	out_row company_search_result;
	loop_count int;
	t_contact_info text[];
BEGIN
	t_contact_info = in_contact_info;


	FOR out_row IN
		SELECT e.id, e.control_code, c.id, ec.id, ec.meta_number, 
			ec.description, ec.entity_class, 
			c.legal_name, c.sic_code, b.description , ec.curr::text
		FROM entity e
		JOIN company c ON (e.id = c.entity_id)
		JOIN entity_credit_account ec ON (ec.entity_id = e.id)
		LEFT JOIN business b ON (ec.business_id = b.id)
		WHERE ec.entity_class = in_account_class
			AND (e.control_code = in_control_code 
				or in_control_code IS NULL)
			AND (c.id IN (select company_id FROM company_to_contact
				WHERE contact LIKE ALL(t_contact_info))
				OR &#39;&#39; LIKE ALL(t_contact_info))
			
			AND (ec.meta_number = in_meta_number 
				OR in_meta_number IS NULL)
			AND (c.legal_name like &#39;%&#39; || in_legal_name || &#39;%&#39;
				OR in_legal_name IS NULL)
			AND ((in_address IS NULL AND in_city IS NULL 
					AND in_state IS NULL 
					AND in_country IS NULL)
				OR (c.id IN 
				(select company_id FROM company_to_location
				WHERE location_id IN 
					(SELECT id FROM location
					WHERE line_one 
						ilike &#39;%&#39; || 
							coalesce(in_address, &#39;&#39;)
							|| &#39;%&#39;
						AND city ILIKE 
							&#39;%&#39; || 
							coalesce(in_city, &#39;&#39;) 
							|| &#39;%&#39;
						AND state ILIKE
							&#39;%&#39; || 
							coalesce(in_state, &#39;&#39;) 
							|| &#39;%&#39;
						AND mail_code ILIKE
							&#39;%&#39; || 
							coalesce(in_mail_code,
								&#39;&#39;)
							|| &#39;%&#39;
						AND country_id IN 
							(SELECT id FROM country
							WHERE name LIKE &#39;%&#39; ||
								in_country ||&#39;%&#39;
								OR short_name
								ilike 
								in_country)))))
			AND (ec.business_id = 
				coalesce(in_business_id, ec.business_id)
				OR (ec.business_id IS NULL 
					AND in_business_id IS NULL))
			AND (ec.startdate &lt;= coalesce(in_date_to, 
						ec.startdate)
				OR (ec.startdate IS NULL))
			AND (ec.enddate &gt;= coalesce(in_date_from, ec.enddate)
				OR (ec.enddate IS NULL))
	LOOP
		RETURN NEXT out_row;
	END LOOP;
END;
</programlisting>
      </para>
    </section>

<!-- Function company_get_billing_info(in_id integer) -->
    <section id="public.function.company-get-billing-info-in-id-integer"
             xreflabel="publiccompany_get_billing_info(in_id integer)">
      <title id="public.function.company-get-billing-info-in-id-integer-title">
       company_get_billing_info(in_id integer)
      </title>
      <titleabbrev id="public.function.company-get-billing-info-in-id-integer-titleabbrev">
       company_get_billing_info(in_id integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>company_billing_info</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
DECLARE out_var company_billing_info;
	t_id INT;
BEGIN
	select coalesce(eca.pay_to_name, c.legal_name), eca.meta_number, 
		e.control_code, c.tax_id, a.line_one, a.line_two, a.line_three, 
		a.city, a.state, a.mail_code, cc.name
	into out_var
	FROM company c
	JOIN entity e ON (c.entity_id = e.id)
	JOIN entity_credit_account eca ON (eca.entity_id = e.id)
	LEFT JOIN eca_to_location cl ON (eca.id = cl.credit_id)
	LEFT JOIN location a ON (a.id = cl.location_id)
	LEFT JOIN country cc ON (cc.id = a.country_id)
	WHERE eca.id = in_id AND (location_class = 1 or location_class is null);

	RETURN out_var;
END;
</programlisting>
      </para>
    </section>

<!-- Function company_retrieve(in_entity_id integer) -->
    <section id="public.function.company-retrieve-in-entity-id-integer"
             xreflabel="publiccompany_retrieve(in_entity_id integer)">
      <title id="public.function.company-retrieve-in-entity-id-integer-title">
       company_retrieve(in_entity_id integer)
      </title>
      <titleabbrev id="public.function.company-retrieve-in-entity-id-integer-titleabbrev">
       company_retrieve(in_entity_id integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>company</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
DECLARE t_company company;
BEGIN
	SELECT * INTO t_company FROM company WHERE entity_id = in_entity_id;
	RETURN t_company;
END;
</programlisting>
      </para>
    </section>

<!-- Function company_save(in_country_id_t integer, in_sic_code text, in_entity_id integer, in_tax_id text, in_name text, in_entity_class integer, in_control_code text, in_id integer) -->
    <section id="public.function.company-save-in-country-id-t-integer-in-sic-code-text-in-entity-id-integer-in-tax-id-text-in-name-text-in-entity-class-integer-in-control-code-text-in-id-integer"
             xreflabel="publiccompany_save(in_country_id_t integer, in_sic_code text, in_entity_id integer, in_tax_id text, in_name text, in_entity_class integer, in_control_code text, in_id integer)">
      <title id="public.function.company-save-in-country-id-t-integer-in-sic-code-text-in-entity-id-integer-in-tax-id-text-in-name-text-in-entity-class-integer-in-control-code-text-in-id-integer-title">
       company_save(in_country_id_t integer, in_sic_code text, in_entity_id integer, in_tax_id text, in_name text, in_entity_class integer, in_control_code text, in_id integer)
      </title>
      <titleabbrev id="public.function.company-save-in-country-id-t-integer-in-sic-code-text-in-entity-id-integer-in-tax-id-text-in-name-text-in-entity-class-integer-in-control-code-text-in-id-integer-titleabbrev">
       company_save(in_country_id_t integer, in_sic_code text, in_entity_id integer, in_tax_id text, in_name text, in_entity_class integer, in_control_code text, in_id integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>integer</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
DECLARE t_entity_id INT;
	t_company_id INT;
	t_control_code TEXT;
BEGIN
	t_company_id := in_id;

	IF in_control_code IS NULL THEN
		t_control_code := setting_increment(&#39;company_control&#39;);
	ELSE
		t_control_code := in_control_code;
	END IF;

	UPDATE entity 
	SET name = in_name, 
		entity_class = in_entity_class,
		control_code = in_control_code
	WHERE id = in_entity_id;

	IF FOUND THEN
		t_entity_id = in_entity_id;
	ELSE
		INSERT INTO entity (name, entity_class, control_code,country_id)
		VALUES (in_name, in_entity_class, t_control_code,in_country_id_t);
		t_entity_id := currval(&#39;entity_id_seq&#39;);
	END IF;

	UPDATE company
	SET legal_name = in_name,
		tax_id = in_tax_id,
		sic_code = in_sic_code
	WHERE id = t_company_id;


	IF NOT FOUND THEN
		INSERT INTO company(entity_id, legal_name, tax_id, sic_code)
		VALUES (t_entity_id, in_name, in_tax_id, in_sic_code);

	END IF;
	RETURN t_entity_id;
END;
</programlisting>
      </para>
    </section>

<!-- Function compound_array(anyarray) -->
    <section id="public.function.compound-array-anyarray"
             xreflabel="publiccompound_array(anyarray)">
      <title id="public.function.compound-array-anyarray-title">
       compound_array(anyarray)
      </title>
      <titleabbrev id="public.function.compound-array-anyarray-titleabbrev">
       compound_array(anyarray)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>INTERNAL</seg>
         <seg>anyarray</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>aggregate_dummy</programlisting>
      </para>
    </section>

<!-- Function concat(tsvector, tsvector) -->
    <section id="public.function.concat-tsvector-tsvector"
             xreflabel="publicconcat(tsvector, tsvector)">
      <title id="public.function.concat-tsvector-tsvector-title">
       concat(tsvector, tsvector)
      </title>
      <titleabbrev id="public.function.concat-tsvector-tsvector-titleabbrev">
       concat(tsvector, tsvector)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>INTERNAL</seg>
         <seg>tsvector</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>tsvector_concat</programlisting>
      </para>
    </section>

<!-- Function concat_colon(text) -->
    <section id="public.function.concat-colon-text"
             xreflabel="publicconcat_colon(text)">
      <title id="public.function.concat-colon-text-title">
       concat_colon(text)
      </title>
      <titleabbrev id="public.function.concat-colon-text-titleabbrev">
       concat_colon(text)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>INTERNAL</seg>
         <seg>text</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>aggregate_dummy</programlisting>
      </para>
    </section>

<!-- Function concat_colon(text, text) -->
    <section id="public.function.concat-colon-text-text"
             xreflabel="publicconcat_colon(text, text)">
      <title id="public.function.concat-colon-text-text-title">
       concat_colon(text, text)
      </title>
      <titleabbrev id="public.function.concat-colon-text-text-titleabbrev">
       concat_colon(text, text)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>text</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
select CASE WHEN $1 IS NULL THEN $2 ELSE $1 || &#39;:&#39; || $2 END;
</programlisting>
      </para>
    </section>

<!-- Function connectby(text, text, text, text, integer) -->
    <section id="public.function.connectby-text-text-text-text-integer"
             xreflabel="publicconnectby(text, text, text, text, integer)">
      <title id="public.function.connectby-text-text-text-text-integer-title">
       connectby(text, text, text, text, integer)
      </title>
      <titleabbrev id="public.function.connectby-text-text-text-text-integer-titleabbrev">
       connectby(text, text, text, text, integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>SET OF record</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>connectby_text</programlisting>
      </para>
    </section>

<!-- Function connectby(text, text, text, text, integer, text) -->
    <section id="public.function.connectby-text-text-text-text-integer-text"
             xreflabel="publicconnectby(text, text, text, text, integer, text)">
      <title id="public.function.connectby-text-text-text-text-integer-text-title">
       connectby(text, text, text, text, integer, text)
      </title>
      <titleabbrev id="public.function.connectby-text-text-text-text-integer-text-titleabbrev">
       connectby(text, text, text, text, integer, text)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>SET OF record</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>connectby_text</programlisting>
      </para>
    </section>

<!-- Function connectby(text, text, text, text, text, integer) -->
    <section id="public.function.connectby-text-text-text-text-text-integer"
             xreflabel="publicconnectby(text, text, text, text, text, integer)">
      <title id="public.function.connectby-text-text-text-text-text-integer-title">
       connectby(text, text, text, text, text, integer)
      </title>
      <titleabbrev id="public.function.connectby-text-text-text-text-text-integer-titleabbrev">
       connectby(text, text, text, text, text, integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>SET OF record</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>connectby_text_serial</programlisting>
      </para>
    </section>

<!-- Function connectby(text, text, text, text, text, integer, text) -->
    <section id="public.function.connectby-text-text-text-text-text-integer-text"
             xreflabel="publicconnectby(text, text, text, text, text, integer, text)">
      <title id="public.function.connectby-text-text-text-text-text-integer-text-title">
       connectby(text, text, text, text, text, integer, text)
      </title>
      <titleabbrev id="public.function.connectby-text-text-text-text-text-integer-text-titleabbrev">
       connectby(text, text, text, text, text, integer, text)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>SET OF record</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>connectby_text_serial</programlisting>
      </para>
    </section>

<!-- Function cr_coa_to_account_save(in_description text, in_accno text) -->
    <section id="public.function.cr-coa-to-account-save-in-description-text-in-accno-text"
             xreflabel="publiccr_coa_to_account_save(in_description text, in_accno text)">
      <title id="public.function.cr-coa-to-account-save-in-description-text-in-accno-text-title">
       cr_coa_to_account_save(in_description text, in_accno text)
      </title>
      <titleabbrev id="public.function.cr-coa-to-account-save-in-description-text-in-accno-text-titleabbrev">
       cr_coa_to_account_save(in_description text, in_accno text)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>void</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
    DECLARE
       v_chart_id int;
    BEGIN
        -- Check for existence of the account already
        PERFORM * FROM cr_coa_to_account WHERE in_accno = in_accno;

        IF NOT FOUND THEN
           -- This is a new account. Insert the relevant data.
           SELECT chart_id INTO v_chart_id FROM charts WHERE accno = in_accno;
           INSERT INTO cr_coa_to_account (chart_id, account) VALUES (v_chart_id, in_accno||&#39;--&#39;||in_description);
        END IF;
        -- Already found, no need to do anything. =) 
    END;
</programlisting>
      </para>
    </section>

<!-- Function crosstab(text) -->
    <section id="public.function.crosstab-text"
             xreflabel="publiccrosstab(text)">
      <title id="public.function.crosstab-text-title">
       crosstab(text)
      </title>
      <titleabbrev id="public.function.crosstab-text-titleabbrev">
       crosstab(text)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>SET OF record</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>crosstab</programlisting>
      </para>
    </section>

<!-- Function crosstab(text, integer) -->
    <section id="public.function.crosstab-text-integer"
             xreflabel="publiccrosstab(text, integer)">
      <title id="public.function.crosstab-text-integer-title">
       crosstab(text, integer)
      </title>
      <titleabbrev id="public.function.crosstab-text-integer-titleabbrev">
       crosstab(text, integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>SET OF record</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>crosstab</programlisting>
      </para>
    </section>

<!-- Function crosstab(text, text) -->
    <section id="public.function.crosstab-text-text"
             xreflabel="publiccrosstab(text, text)">
      <title id="public.function.crosstab-text-text-title">
       crosstab(text, text)
      </title>
      <titleabbrev id="public.function.crosstab-text-text-titleabbrev">
       crosstab(text, text)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>SET OF record</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>crosstab_hash</programlisting>
      </para>
    </section>

<!-- Function crosstab2(text) -->
    <section id="public.function.crosstab2-text"
             xreflabel="publiccrosstab2(text)">
      <title id="public.function.crosstab2-text-title">
       crosstab2(text)
      </title>
      <titleabbrev id="public.function.crosstab2-text-titleabbrev">
       crosstab2(text)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>SET OF tablefunc_crosstab_2</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>crosstab</programlisting>
      </para>
    </section>

<!-- Function crosstab3(text) -->
    <section id="public.function.crosstab3-text"
             xreflabel="publiccrosstab3(text)">
      <title id="public.function.crosstab3-text-title">
       crosstab3(text)
      </title>
      <titleabbrev id="public.function.crosstab3-text-titleabbrev">
       crosstab3(text)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>SET OF tablefunc_crosstab_3</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>crosstab</programlisting>
      </para>
    </section>

<!-- Function crosstab4(text) -->
    <section id="public.function.crosstab4-text"
             xreflabel="publiccrosstab4(text)">
      <title id="public.function.crosstab4-text-title">
       crosstab4(text)
      </title>
      <titleabbrev id="public.function.crosstab4-text-titleabbrev">
       crosstab4(text)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>SET OF tablefunc_crosstab_4</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>crosstab</programlisting>
      </para>
    </section>

<!-- Function currency_get_exchangerate(in_account_class bpchar, in_date date, in_currency integer) -->
    <section id="public.function.currency-get-exchangerate-in-account-class-bpchar-in-date-date-in-currency-integer"
             xreflabel="publiccurrency_get_exchangerate(in_account_class bpchar, in_date date, in_currency integer)">
      <title id="public.function.currency-get-exchangerate-in-account-class-bpchar-in-date-date-in-currency-integer-title">
       currency_get_exchangerate(in_account_class bpchar, in_date date, in_currency integer)
      </title>
      <titleabbrev id="public.function.currency-get-exchangerate-in-account-class-bpchar-in-date-date-in-currency-integer-titleabbrev">
       currency_get_exchangerate(in_account_class bpchar, in_date date, in_currency integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>numeric</seg>
        </seglistitem>
       </segmentedlist>
 
        This function return the exchange rate of a given currency, date and exchange rate class (buy or sell). 
        <programlisting>
DECLARE 
    out_exrate exchangerate.buy%TYPE;
    default_currency char(3);
    
    BEGIN 
        SELECT * INTO default_currency  FROM defaults_get_defaultcurrency();
        IF default_currency = in_currency THEN
           RETURN 1;
        END IF; 
        IF in_account_class = 1 THEN
          SELECT buy INTO out_exrate 
          FROM exchangerate
          WHERE transdate = in_date AND curr = in_currency;
        ELSE 
          SELECT sell INTO out_exrate 
          FROM exchangerate
          WHERE transdate = in_date AND curr = in_currency;   
        END IF;
        RETURN out_exrate;
    END;
</programlisting>
      </para>
    </section>

<!-- Function customer_location_save(in_country_id integer, in_mail_code integer, in_state text, in_city text, in_line_three text, in_line_two text, in_line_one text, in_location_class text, in_entity_id integer) -->
    <section id="public.function.customer-location-save-in-country-id-integer-in-mail-code-integer-in-state-text-in-city-text-in-line-three-text-in-line-two-text-in-line-one-text-in-location-class-text-in-entity-id-integer"
             xreflabel="publiccustomer_location_save(in_country_id integer, in_mail_code integer, in_state text, in_city text, in_line_three text, in_line_two text, in_line_one text, in_location_class text, in_entity_id integer)">
      <title id="public.function.customer-location-save-in-country-id-integer-in-mail-code-integer-in-state-text-in-city-text-in-line-three-text-in-line-two-text-in-line-one-text-in-location-class-text-in-entity-id-integer-title">
       customer_location_save(in_country_id integer, in_mail_code integer, in_state text, in_city text, in_line_three text, in_line_two text, in_line_one text, in_location_class text, in_entity_id integer)
      </title>
      <titleabbrev id="public.function.customer-location-save-in-country-id-integer-in-mail-code-integer-in-state-text-in-city-text-in-line-three-text-in-line-two-text-in-line-one-text-in-location-class-text-in-entity-id-integer-titleabbrev">
       customer_location_save(in_country_id integer, in_mail_code integer, in_state text, in_city text, in_line_three text, in_line_two text, in_line_one text, in_location_class text, in_entity_id integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>integer</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
    BEGIN
    return _entity_location_save(
        in_entity_id, NULL,
        in_location_class, in_line_one, in_line_two, in_line_three,
        in_city, in_state, in_mail_code, in_country_id);
    END;

</programlisting>
      </para>
    </section>

<!-- Function date_get_all_years() -->
    <section id="public.function.date-get-all-years"
             xreflabel="publicdate_get_all_years()">
      <title id="public.function.date-get-all-years-title">
       date_get_all_years()
      </title>
      <titleabbrev id="public.function.date-get-all-years-titleabbrev">
       date_get_all_years()
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>SET OF integer</seg>
        </seglistitem>
       </segmentedlist>
 
        This function return each year inside transdate in transactions. 
        <programlisting>
DECLARE
    date_out record;
    BEGIN
        FOR date_out IN
           SELECT EXTRACT(&#39;YEAR&#39; from transdate) AS year
           FROM acc_trans
           GROUP BY EXTRACT(&#39;YEAR&#39; from transdate)
           ORDER BY year
        LOOP
             return next date_out.year;
        END LOOP;
    END;
</programlisting>
      </para>
    </section>

<!-- Function defaults_get_defaultcurrency() -->
    <section id="public.function.defaults-get-defaultcurrency"
             xreflabel="publicdefaults_get_defaultcurrency()">
      <title id="public.function.defaults-get-defaultcurrency-title">
       defaults_get_defaultcurrency()
      </title>
      <titleabbrev id="public.function.defaults-get-defaultcurrency-titleabbrev">
       defaults_get_defaultcurrency()
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>SET OF bpchar</seg>
        </seglistitem>
       </segmentedlist>
 
        This function return the default currency asigned by the program. 
        <programlisting>
DECLARE defaultcurrency defaults.value%TYPE;
      BEGIN   
           SELECT INTO defaultcurrency substr(value,1,3)
           FROM defaults
           WHERE setting_key = &#39;curr&#39;;
           RETURN NEXT defaultcurrency;
      END;
</programlisting>
      </para>
    </section>

<!-- Function del_department() -->
    <section id="public.function.del-department"
             xreflabel="publicdel_department()">
      <title id="public.function.del-department-title">
       del_department()
      </title>
      <titleabbrev id="public.function.del-department-titleabbrev">
       del_department()
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>trigger</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
begin
  delete from dpt_trans where trans_id = old.id;
  return NULL;
end;
</programlisting>
      </para>
    </section>

<!-- Function del_exchangerate() -->
    <section id="public.function.del-exchangerate"
             xreflabel="publicdel_exchangerate()">
      <title id="public.function.del-exchangerate-title">
       del_exchangerate()
      </title>
      <titleabbrev id="public.function.del-exchangerate-titleabbrev">
       del_exchangerate()
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>trigger</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>

declare
  t_transdate date;
  t_curr char(3);
  t_id int;
  d_curr text;

begin

  select into d_curr substr(value,1,3) from defaults where setting_key = &#39;curr&#39;;
  
  if TG_RELNAME = &#39;ar&#39; then
    select into t_curr, t_transdate curr, transdate from ar where id = old.id;
  end if;
  if TG_RELNAME = &#39;ap&#39; then
    select into t_curr, t_transdate curr, transdate from ap where id = old.id;
  end if;
  if TG_RELNAME = &#39;oe&#39; then
    select into t_curr, t_transdate curr, transdate from oe where id = old.id;
  end if;

  if d_curr != t_curr then

    select into t_id a.id from acc_trans ac
    join ar a on (a.id = ac.trans_id)
    where a.curr = t_curr
    and ac.transdate = t_transdate

    except select a.id from ar a where a.id = old.id
    
    union
    
    select a.id from acc_trans ac
    join ap a on (a.id = ac.trans_id)
    where a.curr = t_curr
    and ac.transdate = t_transdate
    
    except select a.id from ap a where a.id = old.id
    
    union
    
    select o.id from oe o
    where o.curr = t_curr
    and o.transdate = t_transdate
    
    except select o.id from oe o where o.id = old.id;

    if not found then
      delete from exchangerate where curr = t_curr and transdate = t_transdate;
    end if;
  end if;
return old;

end;
</programlisting>
      </para>
    </section>

<!-- Function del_recurring() -->
    <section id="public.function.del-recurring"
             xreflabel="publicdel_recurring()">
      <title id="public.function.del-recurring-title">
       del_recurring()
      </title>
      <titleabbrev id="public.function.del-recurring-titleabbrev">
       del_recurring()
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>trigger</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
BEGIN
  DELETE FROM recurring WHERE id = old.id;
  DELETE FROM recurringemail WHERE id = old.id;
  DELETE FROM recurringprint WHERE id = old.id;
  RETURN NULL;
END;
</programlisting>
      </para>
    </section>

<!-- Function del_yearend() -->
    <section id="public.function.del-yearend"
             xreflabel="publicdel_yearend()">
      <title id="public.function.del-yearend-title">
       del_yearend()
      </title>
      <titleabbrev id="public.function.del-yearend-titleabbrev">
       del_yearend()
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>trigger</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
begin
  delete from yearend where trans_id = old.id;
  return NULL;
end;
</programlisting>
      </para>
    </section>

<!-- Function department_list(in_role bpchar) -->
    <section id="public.function.department-list-in-role-bpchar"
             xreflabel="publicdepartment_list(in_role bpchar)">
      <title id="public.function.department-list-in-role-bpchar-title">
       department_list(in_role bpchar)
      </title>
      <titleabbrev id="public.function.department-list-in-role-bpchar-titleabbrev">
       department_list(in_role bpchar)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>SET OF department</seg>
        </seglistitem>
       </segmentedlist>
 
        This function returns all department that match the role provided as
the argument.
        <programlisting>
DECLARE out_department department%ROWTYPE;
BEGIN
       FOR out_department IN
               SELECT * from department
               WHERE role = coalesce(in_role, role)
       LOOP
               return next out_department;
       END LOOP;
END;
</programlisting>
      </para>
    </section>

<!-- Function dex_init(internal) -->
    <section id="public.function.dex-init-internal"
             xreflabel="publicdex_init(internal)">
      <title id="public.function.dex-init-internal-title">
       dex_init(internal)
      </title>
      <titleabbrev id="public.function.dex-init-internal-titleabbrev">
       dex_init(internal)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>internal</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>tsa_dex_init</programlisting>
      </para>
    </section>

<!-- Function dex_lexize(internal, internal, integer) -->
    <section id="public.function.dex-lexize-internal-internal-integer"
             xreflabel="publicdex_lexize(internal, internal, integer)">
      <title id="public.function.dex-lexize-internal-internal-integer-title">
       dex_lexize(internal, internal, integer)
      </title>
      <titleabbrev id="public.function.dex-lexize-internal-internal-integer-titleabbrev">
       dex_lexize(internal, internal, integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>internal</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>tsa_dex_lexize</programlisting>
      </para>
    </section>

<!-- Function draft__search(in_amount_ge text, in_amount_le text, in_to_date date, in_from_date date, in_with_accno numeric, in_type numeric) -->
    <section id="public.function.draft-search-in-amount-ge-text-in-amount-le-text-in-to-date-date-in-from-date-date-in-with-accno-numeric-in-type-numeric"
             xreflabel="publicdraft__search(in_amount_ge text, in_amount_le text, in_to_date date, in_from_date date, in_with_accno numeric, in_type numeric)">
      <title id="public.function.draft-search-in-amount-ge-text-in-amount-le-text-in-to-date-date-in-from-date-date-in-with-accno-numeric-in-type-numeric-title">
       draft__search(in_amount_ge text, in_amount_le text, in_to_date date, in_from_date date, in_with_accno numeric, in_type numeric)
      </title>
      <titleabbrev id="public.function.draft-search-in-amount-ge-text-in-amount-le-text-in-to-date-date-in-from-date-date-in-with-accno-numeric-in-type-numeric-titleabbrev">
       draft__search(in_amount_ge text, in_amount_le text, in_to_date date, in_from_date date, in_with_accno numeric, in_type numeric)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>SET OF draft_search_result</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
DECLARE out_row RECORD;
BEGIN
	FOR out_row IN
		SELECT trans.id, trans.transdate, trans.reference, 
			trans.description, 
			sum(case when lower(in_type) = &#39;ap&#39; AND chart.link = &#39;AP&#39;
				 THEN line.amount
				 WHEN lower(in_type) = &#39;ar&#39; AND chart.link = &#39;AR&#39;
				 THEN line.amount * -1
				 WHEN lower(in_type) = &#39;gl&#39; AND line.amount &gt; 0
				 THEN line.amount
			 	 ELSE 0
			    END) as amount
		FROM (
			SELECT id, transdate, reference, description, 
				approved from gl
			WHERE lower(in_type) = &#39;gl&#39;
			UNION
			SELECT id, transdate, invnumber as reference, 
				description::text,
				approved from ap
			WHERE lower(in_type) = &#39;ap&#39;
			UNION
			SELECT id, transdate, invnumber as reference,
				description, 
				approved from ar
			WHERE lower(in_type) = &#39;ar&#39;
			) trans
		JOIN acc_trans line ON (trans.id = line.trans_id)
		JOIN chart ON (line.chart_id = chart.id)
		WHERE (in_from_date IS NULL or trans.transdate &gt;= in_from_date)
			AND (in_to_date IS NULL 
				or trans.transdate &lt;= in_to_date)
			AND trans.approved IS FALSE
			AND trans.id NOT IN (select trans_id from voucher)
		GROUP BY trans.id, trans.transdate, trans.description, trans.reference
		HAVING (in_with_accno IS NULL or in_with_accno = 
			ANY(as_array(chart.accno)))
		ORDER BY trans.reference
	LOOP
		RETURN NEXT out_row;
	END LOOP;
END;
</programlisting>
      </para>
    </section>

<!-- Function draft_approve(in_id integer) -->
    <section id="public.function.draft-approve-in-id-integer"
             xreflabel="publicdraft_approve(in_id integer)">
      <title id="public.function.draft-approve-in-id-integer-title">
       draft_approve(in_id integer)
      </title>
      <titleabbrev id="public.function.draft-approve-in-id-integer-titleabbrev">
       draft_approve(in_id integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>boolean</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
declare 
	t_table text;
begin
	SELECT table_name into t_table FROM transactions where id = in_id;

        IF (t_table = &#39;ar&#39;) THEN
		UPDATE ar set approved = true where id = in_id;
	ELSIF (t_table = &#39;ap&#39;) THEN
		UPDATE ap set approved = true where id = in_id;
	ELSIF (t_table = &#39;gl&#39;) THEN
		UPDATE gl set approved = true where id = in_id;
	ELSE
		raise exception &#39;Invalid table % in draft_approve for transaction %&#39;, t_table, in_id;
	END IF;

	IF NOT FOUND THEN
		RETURN FALSE;
	END IF;

	UPDATE transactions 
	SET approved_by = 
			(select entity_id FROM users 
			WHERE username = SESSION_USER), 
		approved_at = now() 
	WHERE id = in_id;

	RETURN TRUE;
END;
</programlisting>
      </para>
    </section>

<!-- Function draft_delete(in_id integer) -->
    <section id="public.function.draft-delete-in-id-integer"
             xreflabel="publicdraft_delete(in_id integer)">
      <title id="public.function.draft-delete-in-id-integer-title">
       draft_delete(in_id integer)
      </title>
      <titleabbrev id="public.function.draft-delete-in-id-integer-titleabbrev">
       draft_delete(in_id integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>boolean</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
declare 
	t_table text;
begin
	DELETE FROM ac_tax_form 
	WHERE entry_id IN 
		(SELECT entry_id FROM acc_trans WHERE trans_id = in_id);

        DELETE FROM acc_trans WHERE trans_id = in_id;
	SELECT lower(table_name) into t_table FROM transactions where id = in_id;

        IF t_table = &#39;ar&#39; THEN
		DELETE FROM ar WHERE id = in_id AND approved IS FALSE;
	ELSIF t_table = &#39;ap&#39; THEN
		DELETE FROM ap WHERE id = in_id AND approved IS FALSE;
	ELSIF t_table = &#39;gl&#39; THEN
		DELETE FROM gl WHERE id = in_id AND approved IS FALSE;
	ELSE
		raise exception &#39;Invalid table % in draft_delete for transaction %&#39;, t_table, in_id;
	END IF;
	IF NOT FOUND THEN
		RAISE EXCEPTION &#39;Invalid transaction id %&#39;, in_id;
	END IF;
	RETURN TRUE;
END;
</programlisting>
      </para>
    </section>

<!-- Function drop_custom_field(character varying, character varying) -->
    <section id="public.function.drop-custom-field-character-varying-character-varying"
             xreflabel="publicdrop_custom_field(character varying, character varying)">
      <title id="public.function.drop-custom-field-character-varying-character-varying-title">
       drop_custom_field(character varying, character varying)
      </title>
      <titleabbrev id="public.function.drop-custom-field-character-varying-character-varying-titleabbrev">
       drop_custom_field(character varying, character varying)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>boolean</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
DECLARE
table_name ALIAS FOR $1;
custom_field_name ALIAS FOR $2;
BEGIN
	DELETE FROM custom_field_catalog 
	WHERE field_name = custom_field_name AND 
		table_id = (SELECT table_id FROM custom_table_catalog 
			WHERE extends = table_name);
	EXECUTE &#39;ALTER TABLE custom_&#39; || table_name || 
		&#39; DROP COLUMN &#39; || custom_field_name;
	RETURN TRUE;	
END;
</programlisting>
      </para>
    </section>

<!-- Function eca__get_taxes(in_credit_id integer) -->
    <section id="public.function.eca-get-taxes-in-credit-id-integer"
             xreflabel="publiceca__get_taxes(in_credit_id integer)">
      <title id="public.function.eca-get-taxes-in-credit-id-integer-title">
       eca__get_taxes(in_credit_id integer)
      </title>
      <titleabbrev id="public.function.eca-get-taxes-in-credit-id-integer-titleabbrev">
       eca__get_taxes(in_credit_id integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>SET OF customertax</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
select * from customertax where customer_id = $1
union
select * from vendortax where vendor_id = $1;
</programlisting>
      </para>
    </section>

<!-- Function eca__list_contacts(in_credit_id integer) -->
    <section id="public.function.eca-list-contacts-in-credit-id-integer"
             xreflabel="publiceca__list_contacts(in_credit_id integer)">
      <title id="public.function.eca-list-contacts-in-credit-id-integer-title">
       eca__list_contacts(in_credit_id integer)
      </title>
      <titleabbrev id="public.function.eca-list-contacts-in-credit-id-integer-titleabbrev">
       eca__list_contacts(in_credit_id integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>SET OF contact_list</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
DECLARE out_row contact_list;
BEGIN
	FOR out_row IN
		SELECT cl.class, cl.id, c.description, c.contact
		FROM eca_to_contact c
		JOIN contact_class cl ON (c.contact_class_id = cl.id)
		WHERE credit_id = in_credit_id
	LOOP
		return next out_row;
	END LOOP;
END;
</programlisting>
      </para>
    </section>

<!-- Function eca__list_locations(in_credit_id integer) -->
    <section id="public.function.eca-list-locations-in-credit-id-integer"
             xreflabel="publiceca__list_locations(in_credit_id integer)">
      <title id="public.function.eca-list-locations-in-credit-id-integer-title">
       eca__list_locations(in_credit_id integer)
      </title>
      <titleabbrev id="public.function.eca-list-locations-in-credit-id-integer-titleabbrev">
       eca__list_locations(in_credit_id integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>SET OF location_result</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
DECLARE out_row RECORD;
BEGIN
	FOR out_row IN
		SELECT l.id, l.line_one, l.line_two, l.line_three, l.city, 
			l.state, l.mail_code, c.name, lc.class
		FROM location l
		JOIN eca_to_location ctl ON (ctl.location_id = l.id)
		JOIN location_class lc ON (ctl.location_class = lc.id)
		JOIN country c ON (c.id = l.country_id)
		WHERE ctl.credit_id = in_credit_id
		ORDER BY lc.id, l.id, c.name
	LOOP
		RETURN NEXT out_row;
	END LOOP;
END;
</programlisting>
      </para>
    </section>

<!-- Function eca__list_notes(in_credit_id integer) -->
    <section id="public.function.eca-list-notes-in-credit-id-integer"
             xreflabel="publiceca__list_notes(in_credit_id integer)">
      <title id="public.function.eca-list-notes-in-credit-id-integer-title">
       eca__list_notes(in_credit_id integer)
      </title>
      <titleabbrev id="public.function.eca-list-notes-in-credit-id-integer-titleabbrev">
       eca__list_notes(in_credit_id integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>SET OF note</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
DECLARE out_row record;
	t_entity_id int;
BEGIN
	SELECT entity_id INTO t_entity_id
	FROM entity_credit_account
	WHERE id = in_credit_id;

	FOR out_row IN
		SELECT *
		FROM note
		WHERE (note_class = 3 and ref_key = in_credit_id) or
			(note_class = 1 and ref_key = t_entity_id)
		ORDER BY created
	LOOP
		RETURN NEXT out_row;
	END LOOP;
END;
</programlisting>
      </para>
    </section>

<!-- Function eca__location_save(in_country_code integer, in_mail_code integer, in_state integer, in_city text, in_line_three text, in_line_two text, in_line_one text, in_location_class text, in_location_id text, in_credit_id integer) -->
    <section id="public.function.eca-location-save-in-country-code-integer-in-mail-code-integer-in-state-integer-in-city-text-in-line-three-text-in-line-two-text-in-line-one-text-in-location-class-text-in-location-id-text-in-credit-id-integer"
             xreflabel="publiceca__location_save(in_country_code integer, in_mail_code integer, in_state integer, in_city text, in_line_three text, in_line_two text, in_line_one text, in_location_class text, in_location_id text, in_credit_id integer)">
      <title id="public.function.eca-location-save-in-country-code-integer-in-mail-code-integer-in-state-integer-in-city-text-in-line-three-text-in-line-two-text-in-line-one-text-in-location-class-text-in-location-id-text-in-credit-id-integer-title">
       eca__location_save(in_country_code integer, in_mail_code integer, in_state integer, in_city text, in_line_three text, in_line_two text, in_line_one text, in_location_class text, in_location_id text, in_credit_id integer)
      </title>
      <titleabbrev id="public.function.eca-location-save-in-country-code-integer-in-mail-code-integer-in-state-integer-in-city-text-in-line-three-text-in-line-two-text-in-line-one-text-in-location-class-text-in-location-id-text-in-credit-id-integer-titleabbrev">
       eca__location_save(in_country_code integer, in_mail_code integer, in_state integer, in_city text, in_line_three text, in_line_two text, in_line_one text, in_location_class text, in_location_id text, in_credit_id integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>integer</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>

    DECLARE
        l_row location;
        l_id INT;
    BEGIN

	DELETE FROM eca_to_location
	WHERE credit_id = in_credit_id
		AND location_class = in_location_class
		AND location_id = in_location_id;

	-- don&#39;t pass the in_location_id through because that is not safe.
	SELECT location_save(NULL, in_line_one, in_line_two, in_line_three, 
		in_city,
		in_state, in_mail_code, in_country_code) 
	INTO l_id; 

	INSERT INTO eca_to_location 
		(credit_id, location_class, location_id)
	VALUES  (in_credit_id, in_location_class, l_id);

	RETURN l_id;    
    END;

</programlisting>
      </para>
    </section>

<!-- Function eca__save_bank_account(in_iban integer, in_bic integer, in_credit_id text, in_entity_id text) -->
    <section id="public.function.eca-save-bank-account-in-iban-integer-in-bic-integer-in-credit-id-text-in-entity-id-text"
             xreflabel="publiceca__save_bank_account(in_iban integer, in_bic integer, in_credit_id text, in_entity_id text)">
      <title id="public.function.eca-save-bank-account-in-iban-integer-in-bic-integer-in-credit-id-text-in-entity-id-text-title">
       eca__save_bank_account(in_iban integer, in_bic integer, in_credit_id text, in_entity_id text)
      </title>
      <titleabbrev id="public.function.eca-save-bank-account-in-iban-integer-in-bic-integer-in-credit-id-text-in-entity-id-text-titleabbrev">
       eca__save_bank_account(in_iban integer, in_bic integer, in_credit_id text, in_entity_id text)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>integer</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
DECLARE out_id int;
BEGIN
	INSERT INTO entity_bank_account(entity_id, bic, iban)
	VALUES(in_entity_id, in_bic, in_iban);

	SELECT CURRVAL(&#39;entity_bank_account_id_seq&#39;) INTO out_id ;

	IF in_credit_id IS NOT NULL THEN
		UPDATE entity_credit_account SET bank_account = out_id
		WHERE id = in_credit_id;
	END IF;

	RETURN out_id;
END;
</programlisting>
      </para>
    </section>

<!-- Function eca__save_contact(in_old_contact_class integer, in_old_contact integer, in_contact text, in_description text, in_contact_class text, in_credit_id integer) -->
    <section id="public.function.eca-save-contact-in-old-contact-class-integer-in-old-contact-integer-in-contact-text-in-description-text-in-contact-class-text-in-credit-id-integer"
             xreflabel="publiceca__save_contact(in_old_contact_class integer, in_old_contact integer, in_contact text, in_description text, in_contact_class text, in_credit_id integer)">
      <title id="public.function.eca-save-contact-in-old-contact-class-integer-in-old-contact-integer-in-contact-text-in-description-text-in-contact-class-text-in-credit-id-integer-title">
       eca__save_contact(in_old_contact_class integer, in_old_contact integer, in_contact text, in_description text, in_contact_class text, in_credit_id integer)
      </title>
      <titleabbrev id="public.function.eca-save-contact-in-old-contact-class-integer-in-old-contact-integer-in-contact-text-in-description-text-in-contact-class-text-in-credit-id-integer-titleabbrev">
       eca__save_contact(in_old_contact_class integer, in_old_contact integer, in_contact text, in_description text, in_contact_class text, in_credit_id integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>integer</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
DECLARE out_id int;
BEGIN
	DELETE FROM eca_to_contact 
	WHERE credit_id = in_credit_id
		AND contact = in_old_contact
		AND contact_class_id = in_old_contact_class;
		
	INSERT INTO eca_to_contact(credit_id, contact_class_id, 
		description, contact)
	VALUES (in_credit_id, in_contact_class, in_description, in_contact);

	RETURN 1;
END;
</programlisting>
      </para>
    </section>

<!-- Function eca__save_notes(in_subject integer, in_note text, in_credit_id text) -->
    <section id="public.function.eca-save-notes-in-subject-integer-in-note-text-in-credit-id-text"
             xreflabel="publiceca__save_notes(in_subject integer, in_note text, in_credit_id text)">
      <title id="public.function.eca-save-notes-in-subject-integer-in-note-text-in-credit-id-text-title">
       eca__save_notes(in_subject integer, in_note text, in_credit_id text)
      </title>
      <titleabbrev id="public.function.eca-save-notes-in-subject-integer-in-note-text-in-credit-id-text-titleabbrev">
       eca__save_notes(in_subject integer, in_note text, in_credit_id text)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>integer</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
DECLARE out_id int;
BEGIN
	-- TODO, change this to create vector too
	INSERT INTO eca_note (ref_key, note_class, note, vector, subject)
	VALUES (in_credit_id, 3, in_note, &#39;&#39;, in_subject);

	SELECT currval(&#39;note_id_seq&#39;) INTO out_id;
	RETURN out_id;
END;
</programlisting>
      </para>
    </section>

<!-- Function eca__set_taxes(in_tax_ids integer, in_credit_id integer[]) -->
    <section id="public.function.eca-set-taxes-in-tax-ids-integer-in-credit-id-integerARRAY"
             xreflabel="publiceca__set_taxes(in_tax_ids integer, in_credit_id integer[])">
      <title id="public.function.eca-set-taxes-in-tax-ids-integer-in-credit-id-integerARRAY-title">
       eca__set_taxes(in_tax_ids integer, in_credit_id integer[])
      </title>
      <titleabbrev id="public.function.eca-set-taxes-in-tax-ids-integer-in-credit-id-integerARRAY-titleabbrev">
       eca__set_taxes(in_tax_ids integer, in_credit_id integer[])
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>boolean</seg>
        </seglistitem>
       </segmentedlist>
 
       
The entity credit account must exist before calling this function, and must
have a type of either 1 or 2.

        <programlisting>
DECLARE 
    eca entity_credit_account;
    iter int;
BEGIN
     SELECT * FROM entity_credit_account into eca WHERE id = in_credit_id;

     IF eca.entity_class = 1 then
        FOR iter in array_lower(in_tax_ids, 1) .. array_upper(in_tax_ids, 1)
        LOOP
             INSERT INTO customertax (customer_id, chart_id)
             values (in_credit_id, in_tax_ids[iter]);
        END LOOP;
     ELSIF eca.entity_class = 2 then
        FOR iter in array_lower(in_tax_ids, 1) .. array_upper(in_tax_ids, 1)
        LOOP
             INSERT INTO vendortax (vendor_id, chart_id)
             values (in_credit_id, in_tax_ids[iter]);
        END LOOP;
        
     ELSE 
        RAISE EXCEPTION &#39;Wrong entity class or credit account not found!&#39;;
     END IF;
     RETURN TRUE;
end;
</programlisting>
      </para>
    </section>

<!-- Function employee__get(in_id integer) -->
    <section id="public.function.employee-get-in-id-integer"
             xreflabel="publicemployee__get(in_id integer)">
      <title id="public.function.employee-get-in-id-integer-title">
       employee__get(in_id integer)
      </title>
      <titleabbrev id="public.function.employee-get-in-id-integer-titleabbrev">
       employee__get(in_id integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>employees</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
DECLARE
	emp employees%ROWTYPE;
BEGIN
	SELECT 
	    ee.* 
	INTO emp 
    FROM employees ee 
    WHERE ee.entity_id = in_id;
    
	RETURN emp;
END;
</programlisting>
      </para>
    </section>

<!-- Function employee__list_managers(in_id integer) -->
    <section id="public.function.employee-list-managers-in-id-integer"
             xreflabel="publicemployee__list_managers(in_id integer)">
      <title id="public.function.employee-list-managers-in-id-integer-title">
       employee__list_managers(in_id integer)
      </title>
      <titleabbrev id="public.function.employee-list-managers-in-id-integer-titleabbrev">
       employee__list_managers(in_id integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>SET OF employees</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
DECLARE
	emp employees%ROWTYPE;
BEGIN
	FOR emp IN 
		SELECT 
		    e.salutation,
		    e.first_name,
		    e.last_name,
		    ee.* 
		FROM entity_employee ee
		JOIN entity e on e.id = ee.entity_id
		WHERE ee.sales = &#39;t&#39;::bool AND ee.role=&#39;manager&#39;
			AND ee.entity_id &lt;&gt; coalesce(in_id, -1)
		ORDER BY name
	LOOP
		RETURN NEXT emp;
	END LOOP;
END;
</programlisting>
      </para>
    </section>

<!-- Function employee__save(in_employee_number integer, in_manager_id date, in_sales date, in_ssn date, in_role text, in_dob text, in_end_date boolean, in_start_date integer, in_entity_id text) -->
    <section id="public.function.employee-save-in-employee-number-integer-in-manager-id-date-in-sales-date-in-ssn-date-in-role-text-in-dob-text-in-end-date-boolean-in-start-date-integer-in-entity-id-text"
             xreflabel="publicemployee__save(in_employee_number integer, in_manager_id date, in_sales date, in_ssn date, in_role text, in_dob text, in_end_date boolean, in_start_date integer, in_entity_id text)">
      <title id="public.function.employee-save-in-employee-number-integer-in-manager-id-date-in-sales-date-in-ssn-date-in-role-text-in-dob-text-in-end-date-boolean-in-start-date-integer-in-entity-id-text-title">
       employee__save(in_employee_number integer, in_manager_id date, in_sales date, in_ssn date, in_role text, in_dob text, in_end_date boolean, in_start_date integer, in_entity_id text)
      </title>
      <titleabbrev id="public.function.employee-save-in-employee-number-integer-in-manager-id-date-in-sales-date-in-ssn-date-in-role-text-in-dob-text-in-end-date-boolean-in-start-date-integer-in-entity-id-text-titleabbrev">
       employee__save(in_employee_number integer, in_manager_id date, in_sales date, in_ssn date, in_role text, in_dob text, in_end_date boolean, in_start_date integer, in_entity_id text)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>integer</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
DECLARE out_id INT;
BEGIN
	UPDATE entity_employee 
	SET startdate = coalesce(in_start_date, now()::date),
		enddate = in_end_date,
		dob = in_dob,
		role = in_role,
		ssn = in_ssn,
		manager_id = in_manager_id,
		employeenumber = in_employee_number,
		person_id = (select id FROM person 
			WHERE entity_id = in_entity_id)
	WHERE entity_id = in_entity_id;

	out_id = in_entity_id;

	IF NOT FOUND THEN
		INSERT INTO entity_employee 
			(startdate, enddate, dob, role, ssn, manager_id, 
				employeenumber, entity_id, person_id)
		VALUES
			(coalesce(in_start_date, now()::date), in_end_date, 
                                in_dob, in_role, in_ssn,
				in_manager_id, in_employee_number, in_entity_id,
				(SELECT id FROM person 
				WHERE entity_id = in_entity_id));
		RETURN in_entity_id;
	END IF;
END;
</programlisting>
      </para>
    </section>

<!-- Function employee_delete(in_id integer) -->
    <section id="public.function.employee-delete-in-id-integer"
             xreflabel="publicemployee_delete(in_id integer)">
      <title id="public.function.employee-delete-in-id-integer-title">
       employee_delete(in_id integer)
      </title>
      <titleabbrev id="public.function.employee-delete-in-id-integer-titleabbrev">
       employee_delete(in_id integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>void</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
BEGIN
	DELETE FROM employee WHERE entity_id = in_id;
	RETURN;
END;
</programlisting>
      </para>
    </section>

<!-- Function employee_search(in_sales date, in_enddatefrom date, in_enddateto character varying, in_notes text, in_name date, in_startdateto date, in_startdatefrom boolean) -->
    <section id="public.function.employee-search-in-sales-date-in-enddatefrom-date-in-enddateto-character-varying-in-notes-text-in-name-date-in-startdateto-date-in-startdatefrom-boolean"
             xreflabel="publicemployee_search(in_sales date, in_enddatefrom date, in_enddateto character varying, in_notes text, in_name date, in_startdateto date, in_startdatefrom boolean)">
      <title id="public.function.employee-search-in-sales-date-in-enddatefrom-date-in-enddateto-character-varying-in-notes-text-in-name-date-in-startdateto-date-in-startdatefrom-boolean-title">
       employee_search(in_sales date, in_enddatefrom date, in_enddateto character varying, in_notes text, in_name date, in_startdateto date, in_startdatefrom boolean)
      </title>
      <titleabbrev id="public.function.employee-search-in-sales-date-in-enddatefrom-date-in-enddateto-character-varying-in-notes-text-in-name-date-in-startdateto-date-in-startdatefrom-boolean-titleabbrev">
       employee_search(in_sales date, in_enddatefrom date, in_enddateto character varying, in_notes text, in_name date, in_startdateto date, in_startdatefrom boolean)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>SET OF employee_search</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
DECLARE
	emp employee_search%ROWTYPE;
BEGIN
	FOR emp IN
		SELECT * FROM employee_search
		WHERE coalesce(startdate, &#39;infinity&#39;::timestamp)
			&gt;= coalesce(in_startdateto, &#39;-infinity&#39;::timestamp)
			AND coalesce(startdate, &#39;-infinity&#39;::timestamp) &lt;=
				coalesce(in_startdatefrom, 
						&#39;infinity&#39;::timestamp)
			AND coalesce(enddate, &#39;-infinity&#39;::timestamp) &lt;= 
				coalesce(in_enddateto, &#39;infinity&#39;::timestamp)
			AND coalesce(enddate, &#39;infinity&#39;::timestamp) &gt;= 
				coalesce(in_enddatefrom, &#39;-infinity&#39;::timestamp)
			AND (name % in_name
			    OR note % in_notes)
			AND (sales = &#39;t&#39; OR coalesce(in_sales, &#39;f&#39;) = &#39;f&#39;)
	LOOP
		RETURN NEXT emp;
	END LOOP;
	return;
END;
</programlisting>
      </para>
    </section>

<!-- Function employee_set_location(in_location integer, in_employee integer) -->
    <section id="public.function.employee-set-location-in-location-integer-in-employee-integer"
             xreflabel="publicemployee_set_location(in_location integer, in_employee integer)">
      <title id="public.function.employee-set-location-in-location-integer-in-employee-integer-title">
       employee_set_location(in_location integer, in_employee integer)
      </title>
      <titleabbrev id="public.function.employee-set-location-in-location-integer-in-employee-integer-titleabbrev">
       employee_set_location(in_location integer, in_employee integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>void</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>

    INSERT INTO person_to_location (person_id,location_id) 
        VALUES ($1, $2);
    
</programlisting>
      </para>
    </section>

<!-- Function entity__get_entity(in_entity_id integer) -->
    <section id="public.function.entity-get-entity-in-entity-id-integer"
             xreflabel="publicentity__get_entity(in_entity_id integer)">
      <title id="public.function.entity-get-entity-in-entity-id-integer-title">
       entity__get_entity(in_entity_id integer)
      </title>
      <titleabbrev id="public.function.entity-get-entity-in-entity-id-integer-titleabbrev">
       entity__get_entity(in_entity_id integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>SET OF entity</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>

declare
    v_row entity;
BEGIN
    SELECT * INTO v_row FROM entity WHERE id = in_entity_id;
    IF NOT FOUND THEN
        raise exception &#39;Could not find entity with ID %&#39;, in_entity_id;
    ELSE
        return next v_row;
    END IF;
END;

</programlisting>
      </para>
    </section>

<!-- Function entity__list_classes() -->
    <section id="public.function.entity-list-classes"
             xreflabel="publicentity__list_classes()">
      <title id="public.function.entity-list-classes-title">
       entity__list_classes()
      </title>
      <titleabbrev id="public.function.entity-list-classes-titleabbrev">
       entity__list_classes()
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>SET OF entity_class</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
DECLARE out_row entity_class;
BEGIN
	FOR out_row IN 
		SELECT * FROM entity_class
		WHERE active
		ORDER BY id
	LOOP
		RETURN NEXT out_row;
	END LOOP;
END;
</programlisting>
      </para>
    </section>

<!-- Function entity__list_credit(in_entity_class integer, in_entity_id integer) -->
    <section id="public.function.entity-list-credit-in-entity-class-integer-in-entity-id-integer"
             xreflabel="publicentity__list_credit(in_entity_class integer, in_entity_id integer)">
      <title id="public.function.entity-list-credit-in-entity-class-integer-in-entity-id-integer-title">
       entity__list_credit(in_entity_class integer, in_entity_id integer)
      </title>
      <titleabbrev id="public.function.entity-list-credit-in-entity-class-integer-in-entity-id-integer-titleabbrev">
       entity__list_credit(in_entity_class integer, in_entity_id integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>SET OF entity_credit_retrieve</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
DECLARE out_row entity_credit_retrieve;
BEGIN
	
	FOR out_row IN 
		SELECT  c.id, e.id, ec.entity_class, ec.discount,
			ec.taxincluded, ec.creditlimit, ec.terms, 
			ec.meta_number, ec.description, ec.business_id, 
			ec.language_code, 
			ec.pricegroup_id, ec.curr, ec.startdate, 
			ec.enddate, ec.ar_ap_account_id, ec.cash_account_id, 
			ec.threshold, e.control_code, ec.id, ec.pay_to_name
		FROM company c
		JOIN entity e ON (c.entity_id = e.id)
		JOIN entity_credit_account ec ON (c.entity_id = ec.entity_id)
		WHERE e.id = in_entity_id
			AND ec.entity_class = 
				CASE WHEN in_entity_class = 3 THEN 2
				     WHEN in_entity_class IS NULL 
					THEN ec.entity_class
				ELSE in_entity_class END
	LOOP

		RETURN NEXT out_row;
	END LOOP;
END;
</programlisting>
      </para>
    </section>

<!-- Function entity__save_bank_account(in_iban integer, in_bic text, in_entity_id text) -->
    <section id="public.function.entity-save-bank-account-in-iban-integer-in-bic-text-in-entity-id-text"
             xreflabel="publicentity__save_bank_account(in_iban integer, in_bic text, in_entity_id text)">
      <title id="public.function.entity-save-bank-account-in-iban-integer-in-bic-text-in-entity-id-text-title">
       entity__save_bank_account(in_iban integer, in_bic text, in_entity_id text)
      </title>
      <titleabbrev id="public.function.entity-save-bank-account-in-iban-integer-in-bic-text-in-entity-id-text-titleabbrev">
       entity__save_bank_account(in_iban integer, in_bic text, in_entity_id text)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>integer</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
DECLARE out_id int;
BEGIN
	INSERT INTO entity_bank_account(entity_id, bic, iban)
	VALUES(in_entity_id, in_bic, in_iban);

	SELECT CURRVAL(&#39;entity_bank_account_id_seq&#39;) INTO out_id ;

	RETURN out_id;
END;
</programlisting>
      </para>
    </section>

<!-- Function entity__save_notes(in_subject integer, in_note text, in_entity_id text) -->
    <section id="public.function.entity-save-notes-in-subject-integer-in-note-text-in-entity-id-text"
             xreflabel="publicentity__save_notes(in_subject integer, in_note text, in_entity_id text)">
      <title id="public.function.entity-save-notes-in-subject-integer-in-note-text-in-entity-id-text-title">
       entity__save_notes(in_subject integer, in_note text, in_entity_id text)
      </title>
      <titleabbrev id="public.function.entity-save-notes-in-subject-integer-in-note-text-in-entity-id-text-titleabbrev">
       entity__save_notes(in_subject integer, in_note text, in_entity_id text)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>integer</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
DECLARE out_id int;
BEGIN
	-- TODO, change this to create vector too
	INSERT INTO entity_note (ref_key, note_class, entity_id, note, vector, subject)
	VALUES (in_entity_id, 1, in_entity_id, in_note, &#39;&#39;, in_subject);

	SELECT currval(&#39;note_id_seq&#39;) INTO out_id;
	RETURN out_id;
END;
</programlisting>
      </para>
    </section>

<!-- Function entity_credit__get(in_id integer) -->
    <section id="public.function.entity-credit-get-in-id-integer"
             xreflabel="publicentity_credit__get(in_id integer)">
      <title id="public.function.entity-credit-get-in-id-integer-title">
       entity_credit__get(in_id integer)
      </title>
      <titleabbrev id="public.function.entity-credit-get-in-id-integer-titleabbrev">
       entity_credit__get(in_id integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>entity_credit_account</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
SELECT * FROM entity_credit_account WHERE id = $1;
</programlisting>
      </para>
    </section>

<!-- Function entity_credit_get_id(in_meta_number integer, in_entity_class integer, in_entity_id text) -->
    <section id="public.function.entity-credit-get-id-in-meta-number-integer-in-entity-class-integer-in-entity-id-text"
             xreflabel="publicentity_credit_get_id(in_meta_number integer, in_entity_class integer, in_entity_id text)">
      <title id="public.function.entity-credit-get-id-in-meta-number-integer-in-entity-class-integer-in-entity-id-text-title">
       entity_credit_get_id(in_meta_number integer, in_entity_class integer, in_entity_id text)
      </title>
      <titleabbrev id="public.function.entity-credit-get-id-in-meta-number-integer-in-entity-class-integer-in-entity-id-text-titleabbrev">
       entity_credit_get_id(in_meta_number integer, in_entity_class integer, in_entity_id text)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>integer</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
DECLARE out_var int;
BEGIN
	SELECT id INTO out_var FROM entity_credit_account
	WHERE entity_id = in_entity_id 
		AND in_entity_class = entity_class
		AND in_meta_number = meta_number;

	RETURN out_var;
END;
</programlisting>
      </para>
    </section>

<!-- Function entity_credit_get_id_by_meta_number(in_account_class text, in_meta_number integer) -->
    <section id="public.function.entity-credit-get-id-by-meta-number-in-account-class-text-in-meta-number-integer"
             xreflabel="publicentity_credit_get_id_by_meta_number(in_account_class text, in_meta_number integer)">
      <title id="public.function.entity-credit-get-id-by-meta-number-in-account-class-text-in-meta-number-integer-title">
       entity_credit_get_id_by_meta_number(in_account_class text, in_meta_number integer)
      </title>
      <titleabbrev id="public.function.entity-credit-get-id-by-meta-number-in-account-class-text-in-meta-number-integer-titleabbrev">
       entity_credit_get_id_by_meta_number(in_account_class text, in_meta_number integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>integer</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
DECLARE out_credit_id int;
BEGIN
	SELECT id INTO out_credit_id 
	FROM entity_credit_account 
	WHERE meta_number = in_meta_number 
		AND entity_class = in_account_class;

	RETURN out_credit_id;
END;
</programlisting>
      </para>
    </section>

<!-- Function entity_credit_save(in_taxform_id integer, in_pay_to_name integer, in_cash_account_id integer, in_ar_ap_account_id text, in_threshold numeric, in_enddate boolean, in_startdate numeric, in_curr integer, in_pricegroup_id integer, in_language character varying, in_business_id integer, in_meta_number character varying, in_terms integer, in_discount_terms bpchar, in_creditlimit date, in_taxincluded date, in_discount numeric, in_description integer, in_entity_id integer, in_entity_class text, in_credit_id integer) -->
    <section id="public.function.entity-credit-save-in-taxform-id-integer-in-pay-to-name-integer-in-cash-account-id-integer-in-ar-ap-account-id-text-in-threshold-numeric-in-enddate-boolean-in-startdate-numeric-in-curr-integer-in-pricegroup-id-integer-in-language-character-varying-in-business-id-integer-in-meta-number-character-varying-in-terms-integer-in-discount-terms-bpchar-in-creditlimit-date-in-taxincluded-date-in-discount-numeric-in-description-integer-in-entity-id-integer-in-entity-class-text-in-credit-id-integer"
             xreflabel="publicentity_credit_save(in_taxform_id integer, in_pay_to_name integer, in_cash_account_id integer, in_ar_ap_account_id text, in_threshold numeric, in_enddate boolean, in_startdate numeric, in_curr integer, in_pricegroup_id integer, in_language character varying, in_business_id integer, in_meta_number character varying, in_terms integer, in_discount_terms bpchar, in_creditlimit date, in_taxincluded date, in_discount numeric, in_description integer, in_entity_id integer, in_entity_class text, in_credit_id integer)">
      <title id="public.function.entity-credit-save-in-taxform-id-integer-in-pay-to-name-integer-in-cash-account-id-integer-in-ar-ap-account-id-text-in-threshold-numeric-in-enddate-boolean-in-startdate-numeric-in-curr-integer-in-pricegroup-id-integer-in-language-character-varying-in-business-id-integer-in-meta-number-character-varying-in-terms-integer-in-discount-terms-bpchar-in-creditlimit-date-in-taxincluded-date-in-discount-numeric-in-description-integer-in-entity-id-integer-in-entity-class-text-in-credit-id-integer-title">
       entity_credit_save(in_taxform_id integer, in_pay_to_name integer, in_cash_account_id integer, in_ar_ap_account_id text, in_threshold numeric, in_enddate boolean, in_startdate numeric, in_curr integer, in_pricegroup_id integer, in_language character varying, in_business_id integer, in_meta_number character varying, in_terms integer, in_discount_terms bpchar, in_creditlimit date, in_taxincluded date, in_discount numeric, in_description integer, in_entity_id integer, in_entity_class text, in_credit_id integer)
      </title>
      <titleabbrev id="public.function.entity-credit-save-in-taxform-id-integer-in-pay-to-name-integer-in-cash-account-id-integer-in-ar-ap-account-id-text-in-threshold-numeric-in-enddate-boolean-in-startdate-numeric-in-curr-integer-in-pricegroup-id-integer-in-language-character-varying-in-business-id-integer-in-meta-number-character-varying-in-terms-integer-in-discount-terms-bpchar-in-creditlimit-date-in-taxincluded-date-in-discount-numeric-in-description-integer-in-entity-id-integer-in-entity-class-text-in-credit-id-integer-titleabbrev">
       entity_credit_save(in_taxform_id integer, in_pay_to_name integer, in_cash_account_id integer, in_ar_ap_account_id text, in_threshold numeric, in_enddate boolean, in_startdate numeric, in_curr integer, in_pricegroup_id integer, in_language character varying, in_business_id integer, in_meta_number character varying, in_terms integer, in_discount_terms bpchar, in_creditlimit date, in_taxincluded date, in_discount numeric, in_description integer, in_entity_id integer, in_entity_class text, in_credit_id integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>integer</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
    
    DECLARE
        t_entity_class int;
        l_id int;
	t_meta_number text; 
	t_mn_default_key text;
    BEGIN
	-- TODO:  Move to mapping table.
            IF in_entity_class = 1 THEN
	       t_mn_default_key := &#39;vendornumber&#39;;
	    ELSIF in_entity_class = 2 THEN
	       t_mn_default_key := &#39;customernumber&#39;;
	    END IF;
	    IF in_meta_number IS NULL THEN
		t_meta_number := setting_increment(t_mn_default_key);
	    ELSE
		t_meta_number := in_meta_number;
	    END IF;
            update entity_credit_account SET
                discount = in_discount,
                taxincluded = in_taxincluded,
                creditlimit = in_creditlimit,
		description = in_description,
                terms = in_terms,
                ar_ap_account_id = in_ar_ap_account_id,
                cash_account_id = in_cash_account_id,
                meta_number = t_meta_number,
                business_id = in_business_id,
                language_code = in_language,
                pricegroup_id = in_pricegroup_id,
                curr = in_curr,
                startdate = in_startdate,
                enddate = in_enddate,
                threshold = in_threshold,
		discount_terms = in_discount_terms,
		pay_to_name = in_pay_to_name,
		taxform_id = in_taxform_id
            where id = in_credit_id;
        
         IF FOUND THEN
            RETURN in_credit_id;
         ELSE
            INSERT INTO entity_credit_account (
                entity_id,
                entity_class,
                discount, 
                description,
                taxincluded,
                creditlimit,
                terms,
                meta_number,
                business_id,
                language_code,
                pricegroup_id,
                curr,
                startdate,
                enddate,
                discount_terms,
                threshold,
		ar_ap_account_id,
                cash_account_id

            )
            VALUES (
                in_entity_id,
                in_entity_class,
                in_discount, 
                in_description,
                in_taxincluded,
                in_creditlimit,
                in_terms,
                t_meta_number,
                in_business_id,
                in_language,
                in_pricegroup_id,
                in_curr,
                in_startdate,
                in_enddate,
                in_discount_terms,
                in_threshold,
                in_ar_ap_account_id,
		in_cash_account_id
            );
            RETURN currval(&#39;entity_credit_account_id_seq&#39;);
       END IF;

    END;
    
</programlisting>
      </para>
    </section>

<!-- Function entity_list_contact_class() -->
    <section id="public.function.entity-list-contact-class"
             xreflabel="publicentity_list_contact_class()">
      <title id="public.function.entity-list-contact-class-title">
       entity_list_contact_class()
      </title>
      <titleabbrev id="public.function.entity-list-contact-class-titleabbrev">
       entity_list_contact_class()
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>SET OF contact_class</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
DECLARE out_row RECORD;
BEGIN
	FOR out_row IN
		SELECT * FROM contact_class ORDER BY id
	LOOP
		RETURN NEXT out_row;
	END LOOP;
END;
</programlisting>
      </para>
    </section>

<!-- Function entity_save(in_entity_class integer, in_name text, in_entity_id integer) -->
    <section id="public.function.entity-save-in-entity-class-integer-in-name-text-in-entity-id-integer"
             xreflabel="publicentity_save(in_entity_class integer, in_name text, in_entity_id integer)">
      <title id="public.function.entity-save-in-entity-class-integer-in-name-text-in-entity-id-integer-title">
       entity_save(in_entity_class integer, in_name text, in_entity_id integer)
      </title>
      <titleabbrev id="public.function.entity-save-in-entity-class-integer-in-name-text-in-entity-id-integer-titleabbrev">
       entity_save(in_entity_class integer, in_name text, in_entity_id integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>integer</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>

    DECLARE
        e entity;
        e_id int;
        
    BEGIN
    
        select * into e from entity where id = in_entity_id;
        
            
        update 
            entity 
        SET
            name = in_name,
            entity_class = in_entity_class
        WHERE
            id = in_entity_id;
        IF NOT FOUND THEN
            -- do the insert magic.
            e_id = nextval(&#39;entity_id_seq&#39;);
            insert into entity (id, name, entity_class) values 
                (e_id,
                in_name,
                in_entity_class
                );
            return e_id;
        END IF;
        return in_entity_id;
            
    END;

</programlisting>
      </para>
    </section>

<!-- Function form_check(in_form_id integer, in_session_id integer) -->
    <section id="public.function.form-check-in-form-id-integer-in-session-id-integer"
             xreflabel="publicform_check(in_form_id integer, in_session_id integer)">
      <title id="public.function.form-check-in-form-id-integer-in-session-id-integer-title">
       form_check(in_form_id integer, in_session_id integer)
      </title>
      <titleabbrev id="public.function.form-check-in-form-id-integer-in-session-id-integer-titleabbrev">
       form_check(in_form_id integer, in_session_id integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>boolean</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
SELECT count(*) = 1 
  FROM open_forms f
  JOIN &quot;session&quot; s USING (session_id)
  JOIN users u ON (s.users_id = u.id)
 WHERE f.session_id = $1 and f.id = $2 and u.username = SESSION_USER;
</programlisting>
      </para>
    </section>

<!-- Function form_close(in_form_id integer, in_session_id integer) -->
    <section id="public.function.form-close-in-form-id-integer-in-session-id-integer"
             xreflabel="publicform_close(in_form_id integer, in_session_id integer)">
      <title id="public.function.form-close-in-form-id-integer-in-session-id-integer-title">
       form_close(in_form_id integer, in_session_id integer)
      </title>
      <titleabbrev id="public.function.form-close-in-form-id-integer-in-session-id-integer-titleabbrev">
       form_close(in_form_id integer, in_session_id integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>boolean</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
DECLARE form_test bool;
BEGIN
	form_test := form_check(in_session_id, in_form_id);

	IF form_test is true THEN 
		DELETE FROM open_forms 
		WHERE session_id = in_session_id AND id = in_form_id;

		RETURN TRUE;

	ELSE RETURN FALSE;
	END IF;
END;
</programlisting>
      </para>
    </section>

<!-- Function form_open(in_session_id integer) -->
    <section id="public.function.form-open-in-session-id-integer"
             xreflabel="publicform_open(in_session_id integer)">
      <title id="public.function.form-open-in-session-id-integer-title">
       form_open(in_session_id integer)
      </title>
      <titleabbrev id="public.function.form-open-in-session-id-integer-titleabbrev">
       form_open(in_session_id integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>integer</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
DECLARE usertest bool;
BEGIN
        SELECT count(*) = 1 INTO usertest FROM session 
         WHERE session_id = in_session_id 
               AND users_id IN (select id from users 
                                WHERE username = SESSION_USER);

        IF usertest is not true THEN
            RAISE EXCEPTION &#39;Invalid session&#39;;
        END IF;
      
	INSERT INTO open_forms (session_id) VALUES (in_session_id);
	RETURN currval(&#39;open_forms_id_seq&#39;);
END;
</programlisting>
      </para>
    </section>

<!-- Function get_covers(tsvector, tsquery) -->
    <section id="public.function.get-covers-tsvector-tsquery"
             xreflabel="publicget_covers(tsvector, tsquery)">
      <title id="public.function.get-covers-tsvector-tsquery-title">
       get_covers(tsvector, tsquery)
      </title>
      <titleabbrev id="public.function.get-covers-tsvector-tsquery-titleabbrev">
       get_covers(tsvector, tsquery)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>text</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>tsa_get_covers</programlisting>
      </para>
    </section>

<!-- Function gin_extract_trgm(text, internal) -->
    <section id="public.function.gin-extract-trgm-text-internal"
             xreflabel="publicgin_extract_trgm(text, internal)">
      <title id="public.function.gin-extract-trgm-text-internal-title">
       gin_extract_trgm(text, internal)
      </title>
      <titleabbrev id="public.function.gin-extract-trgm-text-internal-titleabbrev">
       gin_extract_trgm(text, internal)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>internal</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>gin_extract_trgm</programlisting>
      </para>
    </section>

<!-- Function gin_extract_trgm(text, internal, smallint, internal, internal) -->
    <section id="public.function.gin-extract-trgm-text-internal-smallint-internal-internal"
             xreflabel="publicgin_extract_trgm(text, internal, smallint, internal, internal)">
      <title id="public.function.gin-extract-trgm-text-internal-smallint-internal-internal-title">
       gin_extract_trgm(text, internal, smallint, internal, internal)
      </title>
      <titleabbrev id="public.function.gin-extract-trgm-text-internal-smallint-internal-internal-titleabbrev">
       gin_extract_trgm(text, internal, smallint, internal, internal)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>internal</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>gin_extract_trgm</programlisting>
      </para>
    </section>

<!-- Function gin_trgm_consistent(internal, smallint, text, integer, internal, internal) -->
    <section id="public.function.gin-trgm-consistent-internal-smallint-text-integer-internal-internal"
             xreflabel="publicgin_trgm_consistent(internal, smallint, text, integer, internal, internal)">
      <title id="public.function.gin-trgm-consistent-internal-smallint-text-integer-internal-internal-title">
       gin_trgm_consistent(internal, smallint, text, integer, internal, internal)
      </title>
      <titleabbrev id="public.function.gin-trgm-consistent-internal-smallint-text-integer-internal-internal-titleabbrev">
       gin_trgm_consistent(internal, smallint, text, integer, internal, internal)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>boolean</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>gin_trgm_consistent</programlisting>
      </para>
    </section>

<!-- Function gtrgm_compress(internal) -->
    <section id="public.function.gtrgm-compress-internal"
             xreflabel="publicgtrgm_compress(internal)">
      <title id="public.function.gtrgm-compress-internal-title">
       gtrgm_compress(internal)
      </title>
      <titleabbrev id="public.function.gtrgm-compress-internal-titleabbrev">
       gtrgm_compress(internal)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>internal</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>gtrgm_compress</programlisting>
      </para>
    </section>

<!-- Function gtrgm_consistent(internal, text, integer, oid, internal) -->
    <section id="public.function.gtrgm-consistent-internal-text-integer-oid-internal"
             xreflabel="publicgtrgm_consistent(internal, text, integer, oid, internal)">
      <title id="public.function.gtrgm-consistent-internal-text-integer-oid-internal-title">
       gtrgm_consistent(internal, text, integer, oid, internal)
      </title>
      <titleabbrev id="public.function.gtrgm-consistent-internal-text-integer-oid-internal-titleabbrev">
       gtrgm_consistent(internal, text, integer, oid, internal)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>boolean</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>gtrgm_consistent</programlisting>
      </para>
    </section>

<!-- Function gtrgm_decompress(internal) -->
    <section id="public.function.gtrgm-decompress-internal"
             xreflabel="publicgtrgm_decompress(internal)">
      <title id="public.function.gtrgm-decompress-internal-title">
       gtrgm_decompress(internal)
      </title>
      <titleabbrev id="public.function.gtrgm-decompress-internal-titleabbrev">
       gtrgm_decompress(internal)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>internal</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>gtrgm_decompress</programlisting>
      </para>
    </section>

<!-- Function gtrgm_in(cstring) -->
    <section id="public.function.gtrgm-in-cstring"
             xreflabel="publicgtrgm_in(cstring)">
      <title id="public.function.gtrgm-in-cstring-title">
       gtrgm_in(cstring)
      </title>
      <titleabbrev id="public.function.gtrgm-in-cstring-titleabbrev">
       gtrgm_in(cstring)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>gtrgm</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>gtrgm_in</programlisting>
      </para>
    </section>

<!-- Function gtrgm_out(public.gtrgm) -->
    <section id="public.function.gtrgm-out-public.gtrgm"
             xreflabel="publicgtrgm_out(public.gtrgm)">
      <title id="public.function.gtrgm-out-public.gtrgm-title">
       gtrgm_out(public.gtrgm)
      </title>
      <titleabbrev id="public.function.gtrgm-out-public.gtrgm-titleabbrev">
       gtrgm_out(public.gtrgm)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>cstring</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>gtrgm_out</programlisting>
      </para>
    </section>

<!-- Function gtrgm_penalty(internal, internal, internal) -->
    <section id="public.function.gtrgm-penalty-internal-internal-internal"
             xreflabel="publicgtrgm_penalty(internal, internal, internal)">
      <title id="public.function.gtrgm-penalty-internal-internal-internal-title">
       gtrgm_penalty(internal, internal, internal)
      </title>
      <titleabbrev id="public.function.gtrgm-penalty-internal-internal-internal-titleabbrev">
       gtrgm_penalty(internal, internal, internal)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>internal</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>gtrgm_penalty</programlisting>
      </para>
    </section>

<!-- Function gtrgm_picksplit(internal, internal) -->
    <section id="public.function.gtrgm-picksplit-internal-internal"
             xreflabel="publicgtrgm_picksplit(internal, internal)">
      <title id="public.function.gtrgm-picksplit-internal-internal-title">
       gtrgm_picksplit(internal, internal)
      </title>
      <titleabbrev id="public.function.gtrgm-picksplit-internal-internal-titleabbrev">
       gtrgm_picksplit(internal, internal)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>internal</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>gtrgm_picksplit</programlisting>
      </para>
    </section>

<!-- Function gtrgm_same(public.gtrgm, public.gtrgm, internal) -->
    <section id="public.function.gtrgm-same-public.gtrgm-public.gtrgm-internal"
             xreflabel="publicgtrgm_same(public.gtrgm, public.gtrgm, internal)">
      <title id="public.function.gtrgm-same-public.gtrgm-public.gtrgm-internal-title">
       gtrgm_same(public.gtrgm, public.gtrgm, internal)
      </title>
      <titleabbrev id="public.function.gtrgm-same-public.gtrgm-public.gtrgm-internal-titleabbrev">
       gtrgm_same(public.gtrgm, public.gtrgm, internal)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>internal</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>gtrgm_same</programlisting>
      </para>
    </section>

<!-- Function gtrgm_union(bytea, internal) -->
    <section id="public.function.gtrgm-union-bytea-internal"
             xreflabel="publicgtrgm_union(bytea, internal)">
      <title id="public.function.gtrgm-union-bytea-internal-title">
       gtrgm_union(bytea, internal)
      </title>
      <titleabbrev id="public.function.gtrgm-union-bytea-internal-titleabbrev">
       gtrgm_union(bytea, internal)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>integer[]</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>gtrgm_union</programlisting>
      </para>
    </section>

<!-- Function headline(oid, text, tsquery) -->
    <section id="public.function.headline-oid-text-tsquery"
             xreflabel="publicheadline(oid, text, tsquery)">
      <title id="public.function.headline-oid-text-tsquery-title">
       headline(oid, text, tsquery)
      </title>
      <titleabbrev id="public.function.headline-oid-text-tsquery-titleabbrev">
       headline(oid, text, tsquery)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>INTERNAL</seg>
         <seg>text</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>ts_headline_byid</programlisting>
      </para>
    </section>

<!-- Function headline(oid, text, tsquery, text) -->
    <section id="public.function.headline-oid-text-tsquery-text"
             xreflabel="publicheadline(oid, text, tsquery, text)">
      <title id="public.function.headline-oid-text-tsquery-text-title">
       headline(oid, text, tsquery, text)
      </title>
      <titleabbrev id="public.function.headline-oid-text-tsquery-text-titleabbrev">
       headline(oid, text, tsquery, text)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>INTERNAL</seg>
         <seg>text</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>ts_headline_byid_opt</programlisting>
      </para>
    </section>

<!-- Function headline(text, text, tsquery) -->
    <section id="public.function.headline-text-text-tsquery"
             xreflabel="publicheadline(text, text, tsquery)">
      <title id="public.function.headline-text-text-tsquery-title">
       headline(text, text, tsquery)
      </title>
      <titleabbrev id="public.function.headline-text-text-tsquery-titleabbrev">
       headline(text, text, tsquery)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>text</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>tsa_headline_byname</programlisting>
      </para>
    </section>

<!-- Function headline(text, text, tsquery, text) -->
    <section id="public.function.headline-text-text-tsquery-text"
             xreflabel="publicheadline(text, text, tsquery, text)">
      <title id="public.function.headline-text-text-tsquery-text-title">
       headline(text, text, tsquery, text)
      </title>
      <titleabbrev id="public.function.headline-text-text-tsquery-text-titleabbrev">
       headline(text, text, tsquery, text)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>text</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>tsa_headline_byname</programlisting>
      </para>
    </section>

<!-- Function headline(text, tsquery) -->
    <section id="public.function.headline-text-tsquery"
             xreflabel="publicheadline(text, tsquery)">
      <title id="public.function.headline-text-tsquery-title">
       headline(text, tsquery)
      </title>
      <titleabbrev id="public.function.headline-text-tsquery-titleabbrev">
       headline(text, tsquery)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>INTERNAL</seg>
         <seg>text</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>ts_headline</programlisting>
      </para>
    </section>

<!-- Function headline(text, tsquery, text) -->
    <section id="public.function.headline-text-tsquery-text"
             xreflabel="publicheadline(text, tsquery, text)">
      <title id="public.function.headline-text-tsquery-text-title">
       headline(text, tsquery, text)
      </title>
      <titleabbrev id="public.function.headline-text-tsquery-text-titleabbrev">
       headline(text, tsquery, text)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>INTERNAL</seg>
         <seg>text</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>ts_headline_opt</programlisting>
      </para>
    </section>

<!-- Function job__create(in_batch_id integer, in_batch_class integer) -->
    <section id="public.function.job-create-in-batch-id-integer-in-batch-class-integer"
             xreflabel="publicjob__create(in_batch_id integer, in_batch_class integer)">
      <title id="public.function.job-create-in-batch-id-integer-in-batch-class-integer-title">
       job__create(in_batch_id integer, in_batch_class integer)
      </title>
      <titleabbrev id="public.function.job-create-in-batch-id-integer-in-batch-class-integer-titleabbrev">
       job__create(in_batch_id integer, in_batch_class integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>integer</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
BEGIN
	INSERT INTO pending_job (batch_class, batch_id)
	VALUES (coalesce(in_batch_class, 3), in_batch_id);

	RETURN currval(&#39;pending_job_id_seq&#39;);
END;
</programlisting>
      </para>
    </section>

<!-- Function job__status(in_job_id integer) -->
    <section id="public.function.job-status-in-job-id-integer"
             xreflabel="publicjob__status(in_job_id integer)">
      <title id="public.function.job-status-in-job-id-integer-title">
       job__status(in_job_id integer)
      </title>
      <titleabbrev id="public.function.job-status-in-job-id-integer-titleabbrev">
       job__status(in_job_id integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>job__status</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
DECLARE out_row job__status;
BEGIN
	SELECT  (completed_at IS NULL)::INT, success::int, completed_at,
		error_condition
	INTO out_row 
	FROM pending_job
	WHERE id = in_job_id;

	RETURN out_row;
END;
</programlisting>
      </para>
    </section>

<!-- Function lastcost(integer) -->
    <section id="public.function.lastcost-integer"
             xreflabel="publiclastcost(integer)">
      <title id="public.function.lastcost-integer-title">
       lastcost(integer)
      </title>
      <titleabbrev id="public.function.lastcost-integer-titleabbrev">
       lastcost(integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>double precision</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>

DECLARE

v_cost float;
v_parts_id alias for $1;

BEGIN

  SELECT INTO v_cost sellprice FROM invoice i
  JOIN ap a ON (a.id = i.trans_id)
  WHERE i.parts_id = v_parts_id
  ORDER BY a.transdate desc, a.id desc
  LIMIT 1;

  IF v_cost IS NULL THEN
    v_cost := 0;
  END IF;

RETURN v_cost;
END;
</programlisting>
      </para>
    </section>

<!-- Function length(tsvector) -->
    <section id="public.function.length-tsvector"
             xreflabel="publiclength(tsvector)">
      <title id="public.function.length-tsvector-title">
       length(tsvector)
      </title>
      <titleabbrev id="public.function.length-tsvector-titleabbrev">
       length(tsvector)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>INTERNAL</seg>
         <seg>integer</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>tsvector_length</programlisting>
      </para>
    </section>

<!-- Function lexize(oid, text) -->
    <section id="public.function.lexize-oid-text"
             xreflabel="publiclexize(oid, text)">
      <title id="public.function.lexize-oid-text-title">
       lexize(oid, text)
      </title>
      <titleabbrev id="public.function.lexize-oid-text-titleabbrev">
       lexize(oid, text)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>INTERNAL</seg>
         <seg>text[]</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>ts_lexize</programlisting>
      </para>
    </section>

<!-- Function lexize(text) -->
    <section id="public.function.lexize-text"
             xreflabel="publiclexize(text)">
      <title id="public.function.lexize-text-title">
       lexize(text)
      </title>
      <titleabbrev id="public.function.lexize-text-titleabbrev">
       lexize(text)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>text[]</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>tsa_lexize_bycurrent</programlisting>
      </para>
    </section>

<!-- Function lexize(text, text) -->
    <section id="public.function.lexize-text-text"
             xreflabel="publiclexize(text, text)">
      <title id="public.function.lexize-text-text-title">
       lexize(text, text)
      </title>
      <titleabbrev id="public.function.lexize-text-text-titleabbrev">
       lexize(text, text)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>text[]</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>tsa_lexize_byname</programlisting>
      </para>
    </section>

<!-- Function list_taxforms(in_entity_id integer) -->
    <section id="public.function.list-taxforms-in-entity-id-integer"
             xreflabel="publiclist_taxforms(in_entity_id integer)">
      <title id="public.function.list-taxforms-in-entity-id-integer-title">
       list_taxforms(in_entity_id integer)
      </title>
      <titleabbrev id="public.function.list-taxforms-in-entity-id-integer-titleabbrev">
       list_taxforms(in_entity_id integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>SET OF country_tax_form</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
DECLARE t_country_tax_form country_tax_form;
BEGIN

	FOR t_country_tax_form IN 

		      SELECT * 
		            FROM country_tax_form where country_id in(SELECT country_id from entity where id=in_entity_id)
        LOOP

	RETURN NEXT t_country_tax_form;
	
	END LOOP;

END;
</programlisting>
      </para>
    </section>

<!-- Function location__get(in_id integer) -->
    <section id="public.function.location-get-in-id-integer"
             xreflabel="publiclocation__get(in_id integer)">
      <title id="public.function.location-get-in-id-integer-title">
       location__get(in_id integer)
      </title>
      <titleabbrev id="public.function.location-get-in-id-integer-titleabbrev">
       location__get(in_id integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>location_result</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>

declare
    l_row location_result;
begin
    FOR l_row IN 
        SELECT 
            l.id,                   
            l.line_one,             
            l.line_two,             
            l.line_three,           
            l.city,                 
            l.state,                
            l.mail_code,            
            c.name as country,      
            NULL
        FROM location l
        JOIN country c on l.country_id = c.id
        WHERE l.id = in_id
    LOOP
    
        return l_row;
    END LOOP;
END;
</programlisting>
      </para>
    </section>

<!-- Function location_delete(in_id integer) -->
    <section id="public.function.location-delete-in-id-integer"
             xreflabel="publiclocation_delete(in_id integer)">
      <title id="public.function.location-delete-in-id-integer-title">
       location_delete(in_id integer)
      </title>
      <titleabbrev id="public.function.location-delete-in-id-integer-titleabbrev">
       location_delete(in_id integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>void</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
BEGIN
	DELETE FROM location WHERE id = in_id;
END;
</programlisting>
      </para>
    </section>

<!-- Function location_get(in_id integer) -->
    <section id="public.function.location-get-in-id-integer"
             xreflabel="publiclocation_get(in_id integer)">
      <title id="public.function.location-get-in-id-integer-title">
       location_get(in_id integer)
      </title>
      <titleabbrev id="public.function.location-get-in-id-integer-titleabbrev">
       location_get(in_id integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>location</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
DECLARE
	out_location location%ROWTYPE;
BEGIN
	SELECT * INTO out_location FROM location WHERE id = in_id;
	RETURN out_location;
END;
</programlisting>
      </para>
    </section>

<!-- Function location_list_all() -->
    <section id="public.function.location-list-all"
             xreflabel="publiclocation_list_all()">
      <title id="public.function.location-list-all-title">
       location_list_all()
      </title>
      <titleabbrev id="public.function.location-list-all-titleabbrev">
       location_list_all()
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>SET OF location</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
DECLARE 
	out_location location%ROWTYPE;
BEGIN
	FOR out_location IN
		SELECT * FROM location 
		ORDER BY company_name, city, state, country
	LOOP
		RETURN NEXT out_location;
	END LOOP;
END;
</programlisting>
      </para>
    </section>

<!-- Function location_list_class() -->
    <section id="public.function.location-list-class"
             xreflabel="publiclocation_list_class()">
      <title id="public.function.location-list-class-title">
       location_list_class()
      </title>
      <titleabbrev id="public.function.location-list-class-titleabbrev">
       location_list_class()
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>SET OF location_class</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
DECLARE out_row RECORD;
BEGIN
	FOR out_row IN
		SELECT * FROM location_class ORDER BY id
	LOOP
		RETURN NEXT out_row;
	END LOOP;
END;
</programlisting>
      </para>
    </section>

<!-- Function location_list_country() -->
    <section id="public.function.location-list-country"
             xreflabel="publiclocation_list_country()">
      <title id="public.function.location-list-country-title">
       location_list_country()
      </title>
      <titleabbrev id="public.function.location-list-country-titleabbrev">
       location_list_country()
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>SET OF country</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
DECLARE out_row RECORD;
BEGIN
	FOR out_row IN
		SELECT * FROM country ORDER BY name
	LOOP
		RETURN NEXT out_row;
	END LOOP;
END;
</programlisting>
      </para>
    </section>

<!-- Function location_save(in_country integer, in_zipcode text, in_state text, in_city text, in_address3 text, in_address2 text, in_address1 text, in_location_id integer) -->
    <section id="public.function.location-save-in-country-integer-in-zipcode-text-in-state-text-in-city-text-in-address3-text-in-address2-text-in-address1-text-in-location-id-integer"
             xreflabel="publiclocation_save(in_country integer, in_zipcode text, in_state text, in_city text, in_address3 text, in_address2 text, in_address1 text, in_location_id integer)">
      <title id="public.function.location-save-in-country-integer-in-zipcode-text-in-state-text-in-city-text-in-address3-text-in-address2-text-in-address1-text-in-location-id-integer-title">
       location_save(in_country integer, in_zipcode text, in_state text, in_city text, in_address3 text, in_address2 text, in_address1 text, in_location_id integer)
      </title>
      <titleabbrev id="public.function.location-save-in-country-integer-in-zipcode-text-in-state-text-in-city-text-in-address3-text-in-address2-text-in-address1-text-in-location-id-integer-titleabbrev">
       location_save(in_country integer, in_zipcode text, in_state text, in_city text, in_address3 text, in_address2 text, in_address1 text, in_location_id integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>integer</seg>
        </seglistitem>
       </segmentedlist>
 
        Note that this does NOT override the data in the database unless in_location_id is specified.
Instead we search for locations matching the desired specifications and if none 
are found, we insert one.  Either way, the return value of the location can be
used for mapping to other things.  This is necessary because locations are 
only loosly coupled with entities, etc.
        <programlisting>
DECLARE
	location_id integer;
	location_row RECORD;
BEGIN
	
	IF in_location_id IS NULL THEN
	    SELECT id INTO location_id FROM location
	    WHERE line_one = in_address1 AND line_two = in_address2
	          AND line_three = in_address3 AND in_city = city 
	          AND in_state = state AND in_zipcode = mail_code
	          AND in_country = country_id 
	    LIMIT 1;

	    IF NOT FOUND THEN
	    -- Straight insert.
	    location_id = nextval(&#39;location_id_seq&#39;);
	    INSERT INTO location (
	        id, 
	        line_one, 
	        line_two,
	        line_three,
	        city,
	        state,
	        mail_code,
	        country_id)
	    VALUES (
	        location_id,
	        in_address1,
	        in_address2,
	        in_address3,
	        in_city,
	        in_state,
	        in_zipcode,
	        in_country
	        );
	    END IF;
	    return location_id;
	ELSE
	    RAISE NOTICE &#39;Overwriting location id %&#39;, in_location_id;
	    -- Test it.
	    SELECT * INTO location_row FROM location WHERE id = in_location_id;
	    IF NOT FOUND THEN
	        -- Tricky users are lying to us.
	        RAISE EXCEPTION &#39;location_save called with nonexistant location ID %&#39;, in_location_id;
	    ELSE
	        -- Okay, we&#39;re good.
	        
	        UPDATE location SET
	            line_one = in_address1,
	            line_two = in_address2,
	            line_three = in_address3,
	            city = in_city, 
	            state = in_state,
	            mail_code = in_zipcode,
	            country_id = in_country
	        WHERE id = in_location_id;
	        return in_location_id;
	    END IF;
	END IF;
END;
</programlisting>
      </para>
    </section>

<!-- Function location_search(in_country character varying, in_zipcode character varying, in_state character varying, in_city character varying, in_address2 character varying, in_address1 character varying, in_companyname character varying) -->
    <section id="public.function.location-search-in-country-character-varying-in-zipcode-character-varying-in-state-character-varying-in-city-character-varying-in-address2-character-varying-in-address1-character-varying-in-companyname-character-varying"
             xreflabel="publiclocation_search(in_country character varying, in_zipcode character varying, in_state character varying, in_city character varying, in_address2 character varying, in_address1 character varying, in_companyname character varying)">
      <title id="public.function.location-search-in-country-character-varying-in-zipcode-character-varying-in-state-character-varying-in-city-character-varying-in-address2-character-varying-in-address1-character-varying-in-companyname-character-varying-title">
       location_search(in_country character varying, in_zipcode character varying, in_state character varying, in_city character varying, in_address2 character varying, in_address1 character varying, in_companyname character varying)
      </title>
      <titleabbrev id="public.function.location-search-in-country-character-varying-in-zipcode-character-varying-in-state-character-varying-in-city-character-varying-in-address2-character-varying-in-address1-character-varying-in-companyname-character-varying-titleabbrev">
       location_search(in_country character varying, in_zipcode character varying, in_state character varying, in_city character varying, in_address2 character varying, in_address1 character varying, in_companyname character varying)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>SET OF location</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
DECLARE
	out_location location%ROWTYPE;
BEGIN
	FOR out_location IN
		SELECT * FROM location 
		WHERE companyname ilike &#39;%&#39; || in_companyname || &#39;%&#39;
			AND address1 ilike &#39;%&#39; || in_address1 || &#39;%&#39;
			AND address2 ilike &#39;%&#39; || in_address2 || &#39;%&#39;
			AND in_city ilike &#39;%&#39; || in_city || &#39;%&#39;
			AND in_state ilike &#39;%&#39; || in_state || &#39;%&#39;
			AND in_zipcode ilike &#39;%&#39; || in_zipcode || &#39;%&#39;
			AND in_country ilike &#39;%&#39; || in_country || &#39;%&#39;
	LOOP
		RETURN NEXT out_location;
	END LOOP;
END;
</programlisting>
      </para>
    </section>

<!-- Function lock_record(integer, integer) -->
    <section id="public.function.lock-record-integer-integer"
             xreflabel="publiclock_record(integer, integer)">
      <title id="public.function.lock-record-integer-integer-title">
       lock_record(integer, integer)
      </title>
      <titleabbrev id="public.function.lock-record-integer-integer-titleabbrev">
       lock_record(integer, integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>boolean</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
declare
   locked int;
begin
   SELECT locked_by into locked from transactions where id = $1;
   IF NOT FOUND THEN
	RETURN FALSE;
   ELSEIF locked is not null AND locked &lt;&gt; $2 THEN
        RETURN FALSE;
   END IF;
   UPDATE transactions set locked_by = $2 where id = $1;
   RETURN TRUE;
end;
</programlisting>
      </para>
    </section>

<!-- Function menu_children(in_parent_id integer) -->
    <section id="public.function.menu-children-in-parent-id-integer"
             xreflabel="publicmenu_children(in_parent_id integer)">
      <title id="public.function.menu-children-in-parent-id-integer-title">
       menu_children(in_parent_id integer)
      </title>
      <titleabbrev id="public.function.menu-children-in-parent-id-integer-titleabbrev">
       menu_children(in_parent_id integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>SET OF menu_item</seg>
        </seglistitem>
       </segmentedlist>
 
        This function returns all menu items which are children of in_parent_id (the only input parameter. 
        <programlisting>
declare 
	item menu_item;
	arg menu_attribute%ROWTYPE;
begin
        FOR item IN
		SELECT n.position, n.id, c.level, n.label, c.path, &#39;{}&#39; 
		FROM connectby(&#39;menu_node&#39;, &#39;id&#39;, &#39;parent&#39;, &#39;position&#39;, 
				in_parent_id, 1, &#39;,&#39;) 
			c(id integer, parent integer, &quot;level&quot; integer, 
				path text, list_order integer)
		JOIN menu_node n USING(id)
        LOOP
		FOR arg IN 
			SELECT *
			FROM menu_attribute
			WHERE node_id = item.id
		LOOP
			item.args := item.args || 
				(arg.attribute || &#39;=&#39; || arg.value)::varchar;
		END LOOP;
                return next item;
        end loop;
end;
</programlisting>
      </para>
    </section>

<!-- Function menu_generate() -->
    <section id="public.function.menu-generate"
             xreflabel="publicmenu_generate()">
      <title id="public.function.menu-generate-title">
       menu_generate()
      </title>
      <titleabbrev id="public.function.menu-generate-titleabbrev">
       menu_generate()
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>SET OF menu_item</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
DECLARE 
	item menu_item;
	arg menu_attribute%ROWTYPE;
BEGIN
	FOR item IN 
		SELECT n.position, n.id, c.level, n.label, c.path, &#39;{}&#39; 
		FROM connectby(&#39;menu_node&#39;, &#39;id&#39;, &#39;parent&#39;, &#39;position&#39;, &#39;0&#39;, 
				0, &#39;,&#39;) 
			c(id integer, parent integer, &quot;level&quot; integer, 
				path text, list_order integer)
		JOIN menu_node n USING(id)
	LOOP
		FOR arg IN 
			SELECT *
			FROM menu_attribute
			WHERE node_id = item.id
		LOOP
			item.args := item.args || 
				(arg.attribute || &#39;=&#39; || arg.value)::varchar;
		END LOOP;
		RETURN NEXT item;
	END LOOP;
END;
</programlisting>
      </para>
    </section>

<!-- Function menu_insert(in_label integer, in_position integer, in_parent_id text) -->
    <section id="public.function.menu-insert-in-label-integer-in-position-integer-in-parent-id-text"
             xreflabel="publicmenu_insert(in_label integer, in_position integer, in_parent_id text)">
      <title id="public.function.menu-insert-in-label-integer-in-position-integer-in-parent-id-text-title">
       menu_insert(in_label integer, in_position integer, in_parent_id text)
      </title>
      <titleabbrev id="public.function.menu-insert-in-label-integer-in-position-integer-in-parent-id-text-titleabbrev">
       menu_insert(in_label integer, in_position integer, in_parent_id text)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>integer</seg>
        </seglistitem>
       </segmentedlist>
 
       
This function inserts menu items at arbitrary positions.  The arguments are, in
order:  parent, position, label.  The return value is the id number of the menu
item created. 
        <programlisting>
DECLARE
	new_id int;
BEGIN
	UPDATE menu_node 
	SET position = position * -1
	WHERE parent = in_parent_id
		AND position &gt;= in_position;

	INSERT INTO menu_node (parent, position, label)
	VALUES (in_parent_id, in_position, in_label);

	SELECT INTO new_id currval(&#39;menu_node_id_seq&#39;);

	UPDATE menu_node 
	SET position = (position * -1) + 1
	WHERE parent = in_parent_id
		AND position &lt; 0;

	RETURN new_id;
END;
</programlisting>
      </para>
    </section>

<!-- Function months_passed(in_end timestamp without time zone, in_start timestamp without time zone) -->
    <section id="public.function.months-passed-in-end-timestamp-without-time-zone-in-start-timestamp-without-time-zone"
             xreflabel="publicmonths_passed(in_end timestamp without time zone, in_start timestamp without time zone)">
      <title id="public.function.months-passed-in-end-timestamp-without-time-zone-in-start-timestamp-without-time-zone-title">
       months_passed(in_end timestamp without time zone, in_start timestamp without time zone)
      </title>
      <titleabbrev id="public.function.months-passed-in-end-timestamp-without-time-zone-in-start-timestamp-without-time-zone-titleabbrev">
       months_passed(in_end timestamp without time zone, in_start timestamp without time zone)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>integer</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>

-- The addition of one day is so that it will return &#39;1&#39; when run on the end
-- day of consecutive months.

select (extract (months from age($2 + &#39;1 day&#39;, $1 + &#39;1 day&#39;))
       + extract (years from age($2, $1)) * 12)::int;
</programlisting>
      </para>
    </section>

<!-- Function normal_rand(integer, double precision, double precision) -->
    <section id="public.function.normal-rand-integer-double-precision-double-precision"
             xreflabel="publicnormal_rand(integer, double precision, double precision)">
      <title id="public.function.normal-rand-integer-double-precision-double-precision-title">
       normal_rand(integer, double precision, double precision)
      </title>
      <titleabbrev id="public.function.normal-rand-integer-double-precision-double-precision-titleabbrev">
       normal_rand(integer, double precision, double precision)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>SET OF double precision</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>normal_rand</programlisting>
      </para>
    </section>

<!-- Function numnode(tsquery) -->
    <section id="public.function.numnode-tsquery"
             xreflabel="publicnumnode(tsquery)">
      <title id="public.function.numnode-tsquery-title">
       numnode(tsquery)
      </title>
      <titleabbrev id="public.function.numnode-tsquery-titleabbrev">
       numnode(tsquery)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>INTERNAL</seg>
         <seg>integer</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>tsquery_numnode</programlisting>
      </para>
    </section>

<!-- Function parse(oid, text) -->
    <section id="public.function.parse-oid-text"
             xreflabel="publicparse(oid, text)">
      <title id="public.function.parse-oid-text-title">
       parse(oid, text)
      </title>
      <titleabbrev id="public.function.parse-oid-text-titleabbrev">
       parse(oid, text)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>INTERNAL</seg>
         <seg>SET OF tokenout</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>ts_parse_byid</programlisting>
      </para>
    </section>

<!-- Function parse(text) -->
    <section id="public.function.parse-text"
             xreflabel="publicparse(text)">
      <title id="public.function.parse-text-title">
       parse(text)
      </title>
      <titleabbrev id="public.function.parse-text-titleabbrev">
       parse(text)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>SET OF tokenout</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>tsa_parse_current</programlisting>
      </para>
    </section>

<!-- Function parse(text, text) -->
    <section id="public.function.parse-text-text"
             xreflabel="publicparse(text, text)">
      <title id="public.function.parse-text-text-title">
       parse(text, text)
      </title>
      <titleabbrev id="public.function.parse-text-text-titleabbrev">
       parse(text, text)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>INTERNAL</seg>
         <seg>SET OF tokenout</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>ts_parse_byname</programlisting>
      </para>
    </section>

<!-- Function payment__reverse(in_batch_id text, in_account_class date, in_date_reversed integer, in_cash_accno text, in_credit_id date, in_date_paid integer, in_source integer) -->
    <section id="public.function.payment-reverse-in-batch-id-text-in-account-class-date-in-date-reversed-integer-in-cash-accno-text-in-credit-id-date-in-date-paid-integer-in-source-integer"
             xreflabel="publicpayment__reverse(in_batch_id text, in_account_class date, in_date_reversed integer, in_cash_accno text, in_credit_id date, in_date_paid integer, in_source integer)">
      <title id="public.function.payment-reverse-in-batch-id-text-in-account-class-date-in-date-reversed-integer-in-cash-accno-text-in-credit-id-date-in-date-paid-integer-in-source-integer-title">
       payment__reverse(in_batch_id text, in_account_class date, in_date_reversed integer, in_cash_accno text, in_credit_id date, in_date_paid integer, in_source integer)
      </title>
      <titleabbrev id="public.function.payment-reverse-in-batch-id-text-in-account-class-date-in-date-reversed-integer-in-cash-accno-text-in-credit-id-date-in-date-paid-integer-in-source-integer-titleabbrev">
       payment__reverse(in_batch_id text, in_account_class date, in_date_reversed integer, in_cash_accno text, in_credit_id date, in_date_paid integer, in_source integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>integer</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
DECLARE
	pay_row record;
        t_voucher_id int;
        t_voucher_inserted bool;
BEGIN
        IF in_batch_id IS NOT NULL THEN
		t_voucher_id := nextval(&#39;voucher_id_seq&#39;);
		t_voucher_inserted := FALSE;
	END IF;
	FOR pay_row IN 
		SELECT a.*, c.ar_ap_account_id
		FROM acc_trans a
		JOIN (select id, entity_credit_account 
			FROM ar WHERE in_account_class = 2
			UNION
			SELECT id, entity_credit_account
			FROM ap WHERE in_account_class = 1
		) arap ON (a.trans_id = arap.id)
		JOIN entity_credit_account c 
			ON (arap.entity_credit_account = c.id)
		JOIN chart ch ON (a.chart_id = ch.id)
		WHERE coalesce(source, &#39;&#39;) = coalesce(in_source, &#39;&#39;)
			AND transdate = in_date_paid
			AND in_credit_id = c.id
			AND in_cash_accno = ch.accno
	LOOP
		IF in_batch_id IS NOT NULL 
			AND t_voucher_inserted IS NOT TRUE
		THEN
			INSERT INTO voucher 
			(id, trans_id, batch_id, batch_class)
			VALUES
			(t_voucher_id, pay_row.trans_id, in_batch_id,
				CASE WHEN in_account_class = 1 THEN 4
				     WHEN in_account_class = 2 THEN 7
				END);

			t_voucher_inserted := TRUE;
		END IF;

		INSERT INTO acc_trans
		(trans_id, chart_id, amount, transdate, source, memo, approved,
			voucher_id) 
		VALUES 
		(pay_row.trans_id, pay_row.chart_id, pay_row.amount * -1, 
			in_date_reversed, in_source, &#39;Reversing &#39; || 
			COALESCE(in_source, &#39;&#39;), 
			case when in_batch_id is not null then false 
			else true end, t_voucher_id);
		INSERT INTO acc_trans
		(trans_id, chart_id, amount, transdate, source, memo, approved,
			voucher_id) 
		VALUES 
		(pay_row.trans_id, pay_row.ar_ap_account_id, pay_row.amount,
			in_date_reversed, in_source, &#39;Reversing &#39; ||
			COALESCE(in_source, &#39;&#39;), 
			case when in_batch_id is not null then false 
			else true end, t_voucher_id);
		IF in_account_class = 1 THEN
			UPDATE ap SET paid = amount - 
				(SELECT sum(a.amount) 
				FROM acc_trans a
				JOIN chart c ON (a.chart_id = c.id)
				WHERE c.link = &#39;AP&#39;
					AND trans_id = pay_row.trans_id
				) 
			WHERE id = pay_row.trans_id;
		ELSIF in_account_class = 2 THEN
			update ar SET paid = amount - 
				(SELECT sum(a.amount) 
				FROM acc_trans a
				JOIN chart c ON (a.chart_id = c.id)
				WHERE c.link = &#39;AR&#39;
					AND trans_id = pay_row.trans_id
				) * -1
			WHERE id = pay_row.trans_id;
		ELSE
			RAISE EXCEPTION &#39;Unknown account class for payments %&#39;,
				in_account_class;
		END IF;
	END LOOP;
	RETURN 1;
END;
</programlisting>
      </para>
    </section>

<!-- Function payment__search(in_account_class text, in_cash_accno date, in_credit_id date, in_date_to integer, in_date_from text, in_source integer) -->
    <section id="public.function.payment-search-in-account-class-text-in-cash-accno-date-in-credit-id-date-in-date-to-integer-in-date-from-text-in-source-integer"
             xreflabel="publicpayment__search(in_account_class text, in_cash_accno date, in_credit_id date, in_date_to integer, in_date_from text, in_source integer)">
      <title id="public.function.payment-search-in-account-class-text-in-cash-accno-date-in-credit-id-date-in-date-to-integer-in-date-from-text-in-source-integer-title">
       payment__search(in_account_class text, in_cash_accno date, in_credit_id date, in_date_to integer, in_date_from text, in_source integer)
      </title>
      <titleabbrev id="public.function.payment-search-in-account-class-text-in-cash-accno-date-in-credit-id-date-in-date-to-integer-in-date-from-text-in-source-integer-titleabbrev">
       payment__search(in_account_class text, in_cash_accno date, in_credit_id date, in_date_to integer, in_date_from text, in_source integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>SET OF payment_record</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
DECLARE 
	out_row payment_record;
BEGIN
	FOR out_row IN 
		select sum(CASE WHEN c.entity_class = 1 then a.amount
				ELSE a.amount * -1 END), c.meta_number, 
			c.id, co.legal_name,
			compound_array(ARRAY[ARRAY[ch.id::text, ch.accno, 
				ch.description]]), a.source, 
			b.control_code, b.description, a.transdate
		FROM entity_credit_account c
		JOIN ( select entity_credit_account, id
			FROM ar WHERE in_account_class = 2
			UNION
			SELECT entity_credit_account, id
			FROM ap WHERE in_account_class = 1
			) arap ON (arap.entity_credit_account = c.id)
		JOIN acc_trans a ON (arap.id = a.trans_id)
		JOIN chart ch ON (ch.id = a.chart_id)
		JOIN company co ON (c.entity_id = co.entity_id)
		LEFT JOIN voucher v ON (v.id = a.voucher_id)
		LEFT JOIN batch b ON (b.id = v.batch_id)
		WHERE (ch.accno = in_cash_accno)
			AND (c.id = in_credit_id OR in_credit_id IS NULL)
			AND (a.transdate &gt;= in_date_from 
				OR in_date_from IS NULL)
			AND (a.transdate &lt;= in_date_to OR in_date_to IS NULL)
			AND (source = in_source OR in_source IS NULL)
		GROUP BY c.meta_number, c.id, co.legal_name, a.transdate, 
			a.source, a.memo, b.id, b.control_code, b.description
		ORDER BY a.transdate, c.meta_number, a.source
	LOOP
		RETURN NEXT out_row;
	END LOOP;
END;
</programlisting>
      </para>
    </section>

<!-- Function payment_bulk_post(in_payment_type numeric[], in_account_class integer, in_payment_date text, in_cash_accno numeric, in_ar_ap_accno text, in_total text, in_source date, in_batch_id integer, in_transactions integer) -->
    <section id="public.function.payment-bulk-post-in-payment-type-numericARRAY-in-account-class-integer-in-payment-date-text-in-cash-accno-numeric-in-ar-ap-accno-text-in-total-text-in-source-date-in-batch-id-integer-in-transactions-integer"
             xreflabel="publicpayment_bulk_post(in_payment_type numeric[], in_account_class integer, in_payment_date text, in_cash_accno numeric, in_ar_ap_accno text, in_total text, in_source date, in_batch_id integer, in_transactions integer)">
      <title id="public.function.payment-bulk-post-in-payment-type-numericARRAY-in-account-class-integer-in-payment-date-text-in-cash-accno-numeric-in-ar-ap-accno-text-in-total-text-in-source-date-in-batch-id-integer-in-transactions-integer-title">
       payment_bulk_post(in_payment_type numeric[], in_account_class integer, in_payment_date text, in_cash_accno numeric, in_ar_ap_accno text, in_total text, in_source date, in_batch_id integer, in_transactions integer)
      </title>
      <titleabbrev id="public.function.payment-bulk-post-in-payment-type-numericARRAY-in-account-class-integer-in-payment-date-text-in-cash-accno-numeric-in-ar-ap-accno-text-in-total-text-in-source-date-in-batch-id-integer-in-transactions-integer-titleabbrev">
       payment_bulk_post(in_payment_type numeric[], in_account_class integer, in_payment_date text, in_cash_accno numeric, in_ar_ap_accno text, in_total text, in_source date, in_batch_id integer, in_transactions integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>integer</seg>
        </seglistitem>
       </segmentedlist>
 
        Note that in_transactions is a two-dimensional numeric array.  Of each 
sub-array, the first element is the (integer) transaction id, and the second
is the amount for that transaction.  
        <programlisting>
DECLARE 
	out_count int;
	t_voucher_id int;
	t_trans_id int;
	t_amount numeric;
        t_ar_ap_id int;
	t_cash_id int;
BEGIN
	IF in_batch_id IS NULL THEN
		-- t_voucher_id := NULL;
		RAISE EXCEPTION &#39;Bulk Post Must be from Batch!&#39;;
	ELSE
		INSERT INTO voucher (batch_id, batch_class, trans_id)
		values (in_batch_id, 3, in_transactions[1][1]);

		t_voucher_id := currval(&#39;voucher_id_seq&#39;);
	END IF;

	CREATE TEMPORARY TABLE bulk_payments_in (id int, amount numeric);

	select id into t_ar_ap_id from chart where accno = in_ar_ap_accno;
	select id into t_cash_id from chart where accno = in_cash_accno;

	FOR out_count IN 
			array_lower(in_transactions, 1) ..
			array_upper(in_transactions, 1)
	LOOP
		EXECUTE $E$
			INSERT INTO bulk_payments_in(id, amount)
			VALUES ($E$ || quote_literal(in_transactions[out_count][1])
				|| $E$, $E$ ||
				quote_literal(in_transactions[out_count][2])
				|| $E$)$E$;
	END LOOP;
	EXECUTE $E$ 
		INSERT INTO acc_trans 
			(trans_id, chart_id, amount, approved, voucher_id, transdate, 
			source, payment_type)
		SELECT id, 
		case when $E$ || quote_literal(in_account_class) || $E$ = 1
			THEN $E$ || t_cash_id || $E$
			WHEN $E$ || quote_literal(in_account_class) || $E$ = 2 
			THEN $E$ || t_ar_ap_id || $E$
			ELSE -1 END, 
		amount,
		CASE 
			WHEN $E$|| t_voucher_id || $E$ IS NULL THEN true
			ELSE false END,
		$E$ || t_voucher_id || $E$, $E$|| quote_literal(in_payment_date) 
		||$E$ , $E$ ||COALESCE(quote_literal(in_source), &#39;NULL&#39;) || 
		$E$ , $E$ || coalesce(quote_literal(in_payment_type), &#39;NULL&#39;) || $E$
		FROM bulk_payments_in $E$;

	EXECUTE $E$ 
		INSERT INTO acc_trans 
			(trans_id, chart_id, amount, approved, voucher_id, transdate, 
			source, payment_type)
		SELECT id, 
		case when $E$ || quote_literal(in_account_class) || $E$ = 1 
			THEN $E$ || t_ar_ap_id || $E$
			WHEN $E$ || quote_literal(in_account_class) || $E$ = 2 
			THEN $E$ || t_cash_id || $E$
			ELSE -1 END, 
		amount * -1,
		CASE 
			WHEN $E$|| t_voucher_id || $E$ IS NULL THEN true
			ELSE false END,
		$E$ || t_voucher_id || $E$, $E$|| quote_literal(in_payment_date) 
		||$E$ , $E$ ||COALESCE(quote_literal(in_source), &#39;null&#39;) 
		||$E$ , $E$ || coalesce(quote_literal(in_payment_type), &#39;NULL&#39;) || $E$ 
		FROM bulk_payments_in $E$;

        IF in_account_class = 1 THEN
        	EXECUTE $E$
	        	UPDATE ap 
		        set paid = paid + (select amount from bulk_payments_in b 
		         	where b.id = ap.id)
		         where id in (select id from bulk_payments_in) $E$;
        ELSE
        	EXECUTE $E$
	        	UPDATE ar 
		        set paid = paid + (select amount from bulk_payments_in b 
		         	where b.id = ar.id)
		         where id in (select id from bulk_payments_in) $E$;
        END IF;
	EXECUTE $E$ DROP TABLE bulk_payments_in $E$;
	perform unlock_all();
	return out_count;
END;
</programlisting>
      </para>
    </section>

<!-- Function payment_bulk_queue(in_account_class numeric[], in_payment_date integer, in_cash_accno text, in_ar_ap_accno numeric, in_total text, in_source text, in_batch_id date, in_transactions integer) -->
    <section id="public.function.payment-bulk-queue-in-account-class-numericARRAY-in-payment-date-integer-in-cash-accno-text-in-ar-ap-accno-numeric-in-total-text-in-source-text-in-batch-id-date-in-transactions-integer"
             xreflabel="publicpayment_bulk_queue(in_account_class numeric[], in_payment_date integer, in_cash_accno text, in_ar_ap_accno numeric, in_total text, in_source text, in_batch_id date, in_transactions integer)">
      <title id="public.function.payment-bulk-queue-in-account-class-numericARRAY-in-payment-date-integer-in-cash-accno-text-in-ar-ap-accno-numeric-in-total-text-in-source-text-in-batch-id-date-in-transactions-integer-title">
       payment_bulk_queue(in_account_class numeric[], in_payment_date integer, in_cash_accno text, in_ar_ap_accno numeric, in_total text, in_source text, in_batch_id date, in_transactions integer)
      </title>
      <titleabbrev id="public.function.payment-bulk-queue-in-account-class-numericARRAY-in-payment-date-integer-in-cash-accno-text-in-ar-ap-accno-numeric-in-total-text-in-source-text-in-batch-id-date-in-transactions-integer-titleabbrev">
       payment_bulk_queue(in_account_class numeric[], in_payment_date integer, in_cash_accno text, in_ar_ap_accno numeric, in_total text, in_source text, in_batch_id date, in_transactions integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>integer</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
BEGIN
	INSERT INTO payments_queue
	(transactions, batch_id, source, total, ar_ap_accno, cash_accno,
		payment_date, account_class)
	VALUES 
	(in_transactions, in_batch_id, in_source, in_total, in_ar_ap_accno,
		in_cash_accno, in_payment_date, in_account_class);

	RETURN array_upper(in_transactions, 1) - 
		array_lower(in_transactions, 1);
END;
</programlisting>
      </para>
    </section>

<!-- Function payment_gather_header_info(in_payment_id integer, in_account_class integer) -->
    <section id="public.function.payment-gather-header-info-in-payment-id-integer-in-account-class-integer"
             xreflabel="publicpayment_gather_header_info(in_payment_id integer, in_account_class integer)">
      <title id="public.function.payment-gather-header-info-in-payment-id-integer-in-account-class-integer-title">
       payment_gather_header_info(in_payment_id integer, in_account_class integer)
      </title>
      <titleabbrev id="public.function.payment-gather-header-info-in-payment-id-integer-in-account-class-integer-titleabbrev">
       payment_gather_header_info(in_payment_id integer, in_account_class integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>SET OF payment_header_item</seg>
        </seglistitem>
       </segmentedlist>
 
        This function finds a payment based on the id and retrieves the record, 
it is usefull for printing payments :) 
        <programlisting>
 DECLARE out_payment payment_header_item;
 BEGIN
 FOR out_payment IN 
   SELECT p.id as payment_id, p.reference as payment_reference, p.payment_date,  
          c.legal_name as legal_name, am.amount as amount, em.first_name, em.last_name, p.currency, p.notes
   FROM payment p
   JOIN employee em ON (em.entity_id = p.employee_id)
   JOIN entity_credit_account eca ON (eca.id = p.entity_credit_id)
   JOIN company c ON   (c.entity_id  = eca.entity_id)
   JOIN payment_links pl ON (p.id = pl.payment_id)
 --  JOIN (  SELECT sum(a.amount) as amount
 --		FROM acc_trans a
 --		JOIN chart ch ON (a.chart_id = ch.id)
 --		JOIN payment_links pl ON (pl.entry_id=a.entry_id)
 --		WHERE 
 --		 ((ch.link like &#39;%AP_paid%&#39; OR ch.link like &#39;%AP_discount%&#39;) AND in_account_class = 1)
 --		 OR ((ch.link like &#39;%AR_paid%&#39; OR ch.link like &#39;%AR_discount%&#39;) AND in_account_class = 2)  )  am ON (1=1)
   WHERE p.id = in_payment_id
 LOOP
     RETURN NEXT out_payment;
 END LOOP;

 END;
 </programlisting>
      </para>
    </section>

<!-- Function payment_gather_line_info(in_payment_id integer, in_account_class integer) -->
    <section id="public.function.payment-gather-line-info-in-payment-id-integer-in-account-class-integer"
             xreflabel="publicpayment_gather_line_info(in_payment_id integer, in_account_class integer)">
      <title id="public.function.payment-gather-line-info-in-payment-id-integer-in-account-class-integer-title">
       payment_gather_line_info(in_payment_id integer, in_account_class integer)
      </title>
      <titleabbrev id="public.function.payment-gather-line-info-in-payment-id-integer-in-account-class-integer-titleabbrev">
       payment_gather_line_info(in_payment_id integer, in_account_class integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>SET OF payment_line_item</seg>
        </seglistitem>
       </segmentedlist>
 
        This function finds a payment based on the id and retrieves all the line records, 
it is usefull for printing payments and build reports :) 
        <programlisting>
 DECLARE out_payment_line payment_line_item;
 BEGIN
   FOR out_payment_line IN 
     SELECT pl.payment_id, ac.entry_id, pl.type as link_type, ac.trans_id, a.invnumber as invoice_number,
     ac.chart_id, ch.accno as chart_accno, ch.description as chart_description, ch.link as chart_link,
     ac.amount,  ac.transdate as trans_date, ac.source, ac.cleared_on, ac.fx_transaction, ac.project_id,
     ac.memo, ac.invoice_id, ac.approved, ac.cleared_on, ac.reconciled_on
     FROM acc_trans ac
     JOIN payment_links pl ON (pl.entry_id = ac.entry_id )
     JOIN chart         ch ON (ch.id = ac.chart_id)
     LEFT JOIN (SELECT id,invnumber
                 FROM ar WHERE in_account_class = 2
                 UNION
                 SELECT id,invnumber
                 FROM ap WHERE in_account_class = 1
                ) a ON (ac.trans_id = a.id)
     WHERE pl.payment_id = in_payment_id
   LOOP
      RETURN NEXT out_payment_line;
   END LOOP;  
 END;
 </programlisting>
      </para>
    </section>

<!-- Function payment_get_all_accounts(in_account_class integer) -->
    <section id="public.function.payment-get-all-accounts-in-account-class-integer"
             xreflabel="publicpayment_get_all_accounts(in_account_class integer)">
      <title id="public.function.payment-get-all-accounts-in-account-class-integer-title">
       payment_get_all_accounts(in_account_class integer)
      </title>
      <titleabbrev id="public.function.payment-get-all-accounts-in-account-class-integer-titleabbrev">
       payment_get_all_accounts(in_account_class integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>SET OF entity</seg>
        </seglistitem>
       </segmentedlist>
 
        This function takes a single argument (1 for vendor, 2 for customer as 
always) and returns all entities with accounts of the appropriate type. 
        <programlisting>
DECLARE out_entity entity%ROWTYPE;
BEGIN
	FOR out_entity IN
		SELECT  ec.id, 
			e.name, e.entity_class, e.created 
		FROM entity e
		JOIN entity_credit_account ec ON (ec.entity_id = e.id)
				WHERE e.entity_class = in_account_class
	LOOP
		RETURN NEXT out_entity;
	END LOOP;
END;
</programlisting>
      </para>
    </section>

<!-- Function payment_get_all_contact_invoices(in_meta_number integer, in_ar_ap_accno integer, in_batch_id bpchar, in_date_to date, in_date_from date, in_currency integer, in_business_id text, in_account_class text) -->
    <section id="public.function.payment-get-all-contact-invoices-in-meta-number-integer-in-ar-ap-accno-integer-in-batch-id-bpchar-in-date-to-date-in-date-from-date-in-currency-integer-in-business-id-text-in-account-class-text"
             xreflabel="publicpayment_get_all_contact_invoices(in_meta_number integer, in_ar_ap_accno integer, in_batch_id bpchar, in_date_to date, in_date_from date, in_currency integer, in_business_id text, in_account_class text)">
      <title id="public.function.payment-get-all-contact-invoices-in-meta-number-integer-in-ar-ap-accno-integer-in-batch-id-bpchar-in-date-to-date-in-date-from-date-in-currency-integer-in-business-id-text-in-account-class-text-title">
       payment_get_all_contact_invoices(in_meta_number integer, in_ar_ap_accno integer, in_batch_id bpchar, in_date_to date, in_date_from date, in_currency integer, in_business_id text, in_account_class text)
      </title>
      <titleabbrev id="public.function.payment-get-all-contact-invoices-in-meta-number-integer-in-ar-ap-accno-integer-in-batch-id-bpchar-in-date-to-date-in-date-from-date-in-currency-integer-in-business-id-text-in-account-class-text-titleabbrev">
       payment_get_all_contact_invoices(in_meta_number integer, in_ar_ap_accno integer, in_batch_id bpchar, in_date_to date, in_date_from date, in_currency integer, in_business_id text, in_account_class text)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>SET OF payment_contact_invoice</seg>
        </seglistitem>
       </segmentedlist>
 
       
This function takes the following arguments (all prefaced with in_ in the db):
account_class: 1 for vendor, 2 for customer
business_type: integer of business.id.
currency: char(3) of currency (for example &apos;USD&apos;)
date_from, date_to:  These dates are inclusive.
1;3B
batch_id:  For payment batches, where fees are concerned.
ar_ap_accno:  The AR/AP account number.

This then returns a set of contact information with a 2 dimensional array 
cnsisting of outstanding invoices.

        <programlisting>
DECLARE payment_item payment_contact_invoice;
BEGIN
	FOR payment_item IN
		  SELECT c.id AS contact_id, e.control_code as econtrol_code, 
			c.description as eca_description, 
			e.name AS contact_name,
		         c.meta_number AS account_number,
			 sum( case when u.username IS NULL or 
				       u.username = SESSION_USER 
			     THEN 
		              coalesce(p.due::numeric, 0) -
		              CASE WHEN c.discount_terms 
		                        &gt; extract(&#39;days&#39; FROM age(a.transdate))
		                   THEN 0
		                   ELSE (coalesce(p.due::numeric, 0)) * 
					coalesce(c.discount::numeric, 0) / 100
		              END
			     ELSE 0::numeric
			     END) AS total_due,
		         compound_array(ARRAY[[
		              a.id::text, a.invnumber, a.transdate::text, 
		              a.amount::text, (a.amount - p.due)::text,
		              (CASE WHEN c.discount_terms 
		                        &gt; extract(&#39;days&#39; FROM age(a.transdate))
		                   THEN 0
		                   ELSE (a.amount - coalesce((a.amount - p.due), 0)) * coalesce(c.discount, 0) / 100
		              END)::text, 
		              (coalesce(p.due, 0) -
		              (CASE WHEN c.discount_terms 
		                        &gt; extract(&#39;days&#39; FROM age(a.transdate))
		                   THEN 0
		                   ELSE (coalesce(p.due, 0)) * coalesce(c.discount, 0) / 100
		              END))::text,
			 	case when u.username IS NOT NULL 
				          and u.username &lt;&gt; SESSION_USER 
				     THEN 0::text
				     ELSE 1::text
				END,
				COALESCE(u.username, 0::text)
				]]),
                              sum(case when a.batch_id = in_batch_id then 1
		                  else 0 END),
		              bool_and(lock_record(a.id, (select max(session_id) 				FROM &quot;session&quot; where users_id = (
					select id from users WHERE username =
					SESSION_USER))))
                           
		    FROM entity e
		    JOIN entity_credit_account c ON (e.id = c.entity_id)
		    JOIN (SELECT ap.id, invnumber, transdate, amount, entity_id, 
				 paid, curr, 1 as invoice_class, 
		                 entity_credit_account, on_hold, v.batch_id,
				 approved
		            FROM ap
		       LEFT JOIN (select * from voucher where batch_class = 1) v 
			         ON (ap.id = v.trans_id)
			   WHERE in_account_class = 1
			         AND (v.batch_class = 1 or v.batch_id IS NULL)
		           UNION
		          SELECT ar.id, invnumber, transdate, amount, entity_id,
		                 paid, curr, 2 as invoice_class, 
		                 entity_credit_account, on_hold, v.batch_id,
				 approved
		            FROM ar
		       LEFT JOIN (select * from voucher where batch_class = 2) v 
			         ON (ar.id = v.trans_id)
			   WHERE in_account_class = 2
			         AND (v.batch_class = 2 or v.batch_id IS NULL)
			ORDER BY transdate
		         ) a ON (a.entity_credit_account = c.id)
		    JOIN transactions t ON (a.id = t.id)
		    JOIN (SELECT acc_trans.trans_id, 
		                 sum(CASE WHEN in_account_class = 1 THEN amount
		                          WHEN in_account_class = 2 
		                          THEN amount * -1
		                     END) AS due 
		            FROM acc_trans 
		            JOIN account coa ON (coa.id = acc_trans.chart_id)
                            JOIN account_link al ON (al.account_id = coa.id)
		       LEFT JOIN voucher v ON (acc_trans.voucher_id = v.id)
		           WHERE ((al.description = &#39;AP&#39; AND in_account_class = 1)
		                 OR (al.description = &#39;AR&#39; AND in_account_class = 2))
			   AND (approved IS TRUE or v.batch_class = 3)
		        GROUP BY acc_trans.trans_id) p ON (a.id = p.trans_id)
		LEFT JOIN &quot;session&quot; s ON (s.&quot;session_id&quot; = t.locked_by)
		LEFT JOIN users u ON (u.id = s.users_id)
		   WHERE (a.batch_id = in_batch_id
		          OR (a.invoice_class = in_account_class
		             AND a.approved
			 AND (c.business_id = 
				coalesce(in_business_id, c.business_id)
				OR in_business_id is null)
		         AND ((a.transdate &gt;= COALESCE(in_date_from, a.transdate)
		               AND a.transdate &lt;= COALESCE(in_date_to, a.transdate)))
		         AND c.entity_class = in_account_class
		         AND a.curr = in_currency
		         AND a.entity_credit_account = c.id
			 AND p.due &lt;&gt; 0
		         AND a.amount &lt;&gt; a.paid 
			 AND NOT a.on_hold
		         AND EXISTS (select trans_id FROM acc_trans
		                      WHERE trans_id = a.id AND
		                            chart_id = (SELECT id from account
		                                         WHERE accno
		                                               = in_ar_ap_accno)
		                    )))
		         AND (in_meta_number IS NULL OR 
                             in_meta_number = c.meta_number)
		GROUP BY c.id, e.name, c.meta_number, c.threshold, 
			e.control_code, c.description
		  HAVING  (sum(p.due) &gt;= c.threshold
			OR sum(case when a.batch_id = in_batch_id then 1
                                  else 0 END) &gt; 0)
        ORDER BY c.meta_number ASC
	LOOP
		RETURN NEXT payment_item;
	END LOOP;
END;
</programlisting>
      </para>
    </section>

<!-- Function payment_get_available_overpayment_amount(in_entity_credit_id integer, in_account_class integer) -->
    <section id="public.function.payment-get-available-overpayment-amount-in-entity-credit-id-integer-in-account-class-integer"
             xreflabel="publicpayment_get_available_overpayment_amount(in_entity_credit_id integer, in_account_class integer)">
      <title id="public.function.payment-get-available-overpayment-amount-in-entity-credit-id-integer-in-account-class-integer-title">
       payment_get_available_overpayment_amount(in_entity_credit_id integer, in_account_class integer)
      </title>
      <titleabbrev id="public.function.payment-get-available-overpayment-amount-in-entity-credit-id-integer-in-account-class-integer-titleabbrev">
       payment_get_available_overpayment_amount(in_entity_credit_id integer, in_account_class integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>SET OF payment_overpayments_available_amount</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
DECLARE out_overpayment payment_overpayments_available_amount;
BEGIN
      FOR out_overpayment IN
              SELECT chart_id, accno,   chart_description, abs(sum(available))
              FROM overpayments
              WHERE payment_class  = in_account_class 
              AND entity_credit_id = in_entity_credit_id 
              AND available &lt;&gt; 0
              GROUP BY chart_id, accno, chart_description
      LOOP
           RETURN NEXT out_overpayment;
      END LOOP;
END;
</programlisting>
      </para>
    </section>

<!-- Function payment_get_entity_accounts(in_vc_idn integer, in_vc_name text, in_account_class text) -->
    <section id="public.function.payment-get-entity-accounts-in-vc-idn-integer-in-vc-name-text-in-account-class-text"
             xreflabel="publicpayment_get_entity_accounts(in_vc_idn integer, in_vc_name text, in_account_class text)">
      <title id="public.function.payment-get-entity-accounts-in-vc-idn-integer-in-vc-name-text-in-account-class-text-title">
       payment_get_entity_accounts(in_vc_idn integer, in_vc_name text, in_account_class text)
      </title>
      <titleabbrev id="public.function.payment-get-entity-accounts-in-vc-idn-integer-in-vc-name-text-in-account-class-text-titleabbrev">
       payment_get_entity_accounts(in_vc_idn integer, in_vc_name text, in_account_class text)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>SET OF payment_vc_info</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
 DECLARE out_entity payment_vc_info;
 

 BEGIN
 	FOR out_entity IN
 		SELECT ec.id, cp.legal_name||&#39;: &#39;||ec.description as name, e.entity_class, ec.discount_account_id, ec.meta_number
 		FROM entity_credit_account ec
 		JOIN entity e ON (ec.entity_id = e.id)
 		JOIN company cp ON (cp.entity_id = e.id)
		WHERE ec.entity_class = in_account_class
		AND (cp.legal_name ilike coalesce(&#39;%&#39;||in_vc_name||&#39;%&#39;,&#39;%%&#39;) OR cp.tax_id = in_vc_idn)
	LOOP
		RETURN NEXT out_entity;
	END LOOP;
 END;
 </programlisting>
      </para>
    </section>

<!-- Function payment_get_open_accounts(in_account_class integer) -->
    <section id="public.function.payment-get-open-accounts-in-account-class-integer"
             xreflabel="publicpayment_get_open_accounts(in_account_class integer)">
      <title id="public.function.payment-get-open-accounts-in-account-class-integer-title">
       payment_get_open_accounts(in_account_class integer)
      </title>
      <titleabbrev id="public.function.payment-get-open-accounts-in-account-class-integer-titleabbrev">
       payment_get_open_accounts(in_account_class integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>SET OF entity</seg>
        </seglistitem>
       </segmentedlist>
 
        This function takes a single argument (1 for vendor, 2 for customer as 
always) and returns all entities with open accounts of the appropriate type. 
        <programlisting>
DECLARE out_entity entity%ROWTYPE;
BEGIN
	FOR out_entity IN
		SELECT ec.id, cp.legal_name as name, e.entity_class, e.created 
		FROM entity e
		JOIN entity_credit_account ec ON (ec.entity_id = e.id)
		JOIN company cp ON (cp.entity_id = e.id)
			WHERE ec.entity_class = in_account_class
                        AND CASE WHEN in_account_class = 1 THEN
	           		e.id IN (SELECT entity_id FROM ap 
	           			WHERE amount &lt;&gt; paid
		   			GROUP BY entity_id)
		    	       WHEN in_account_class = 2 THEN
		   		e.id IN (SELECT entity_id FROM ar
		   			WHERE amount &lt;&gt; paid
		   			GROUP BY entity_id)
		   	  END
	LOOP
		RETURN NEXT out_entity;
	END LOOP;
END;
</programlisting>
      </para>
    </section>

<!-- Function payment_get_open_invoice(in_invnumber integer, in_department_id integer, in_amountto bpchar, in_amountfrom date, in_dateto date, in_datefrom numeric, in_curr numeric, in_entity_credit_id integer, in_account_class text) -->
    <section id="public.function.payment-get-open-invoice-in-invnumber-integer-in-department-id-integer-in-amountto-bpchar-in-amountfrom-date-in-dateto-date-in-datefrom-numeric-in-curr-numeric-in-entity-credit-id-integer-in-account-class-text"
             xreflabel="publicpayment_get_open_invoice(in_invnumber integer, in_department_id integer, in_amountto bpchar, in_amountfrom date, in_dateto date, in_datefrom numeric, in_curr numeric, in_entity_credit_id integer, in_account_class text)">
      <title id="public.function.payment-get-open-invoice-in-invnumber-integer-in-department-id-integer-in-amountto-bpchar-in-amountfrom-date-in-dateto-date-in-datefrom-numeric-in-curr-numeric-in-entity-credit-id-integer-in-account-class-text-title">
       payment_get_open_invoice(in_invnumber integer, in_department_id integer, in_amountto bpchar, in_amountfrom date, in_dateto date, in_datefrom numeric, in_curr numeric, in_entity_credit_id integer, in_account_class text)
      </title>
      <titleabbrev id="public.function.payment-get-open-invoice-in-invnumber-integer-in-department-id-integer-in-amountto-bpchar-in-amountfrom-date-in-dateto-date-in-datefrom-numeric-in-curr-numeric-in-entity-credit-id-integer-in-account-class-text-titleabbrev">
       payment_get_open_invoice(in_invnumber integer, in_department_id integer, in_amountto bpchar, in_amountfrom date, in_dateto date, in_datefrom numeric, in_curr numeric, in_entity_credit_id integer, in_account_class text)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>SET OF payment_invoice</seg>
        </seglistitem>
       </segmentedlist>
 
        
This function is based on payment_get_open_invoices and returns only one invoice if the in_invnumber is set. 
if no in_invnumber is passed this function behaves the same as payment_get_open_invoices

        <programlisting>
DECLARE payment_inv payment_invoice;
BEGIN
	FOR payment_inv IN
		SELECT * from payment_get_open_invoices(in_account_class, in_entity_credit_id, in_curr, in_datefrom, in_dateto, in_amountfrom,
		in_amountto, in_department_id)
		WHERE (invnumber like in_invnumber OR in_invnumber IS NULL)
	LOOP
		RETURN NEXT payment_inv;
	END LOOP;
END;

</programlisting>
      </para>
    </section>

<!-- Function payment_get_open_invoices(in_department_id integer, in_amountto integer, in_amountfrom bpchar, in_dateto date, in_datefrom date, in_curr numeric, in_entity_credit_id numeric, in_account_class integer) -->
    <section id="public.function.payment-get-open-invoices-in-department-id-integer-in-amountto-integer-in-amountfrom-bpchar-in-dateto-date-in-datefrom-date-in-curr-numeric-in-entity-credit-id-numeric-in-account-class-integer"
             xreflabel="publicpayment_get_open_invoices(in_department_id integer, in_amountto integer, in_amountfrom bpchar, in_dateto date, in_datefrom date, in_curr numeric, in_entity_credit_id numeric, in_account_class integer)">
      <title id="public.function.payment-get-open-invoices-in-department-id-integer-in-amountto-integer-in-amountfrom-bpchar-in-dateto-date-in-datefrom-date-in-curr-numeric-in-entity-credit-id-numeric-in-account-class-integer-title">
       payment_get_open_invoices(in_department_id integer, in_amountto integer, in_amountfrom bpchar, in_dateto date, in_datefrom date, in_curr numeric, in_entity_credit_id numeric, in_account_class integer)
      </title>
      <titleabbrev id="public.function.payment-get-open-invoices-in-department-id-integer-in-amountto-integer-in-amountfrom-bpchar-in-dateto-date-in-datefrom-date-in-curr-numeric-in-entity-credit-id-numeric-in-account-class-integer-titleabbrev">
       payment_get_open_invoices(in_department_id integer, in_amountto integer, in_amountfrom bpchar, in_dateto date, in_datefrom date, in_curr numeric, in_entity_credit_id numeric, in_account_class integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>SET OF payment_invoice</seg>
        </seglistitem>
       </segmentedlist>
 
        This function is the base for get_open_invoice and returns all open invoices for the entity_credit_id
it has a lot of options to enable filtering and use the same logic for entity_class_id and currency. 
        <programlisting>
DECLARE payment_inv payment_invoice;
BEGIN
	FOR payment_inv IN
		SELECT a.id AS invoice_id, a.invnumber AS invnumber, 
		       a.transdate AS invoice_date, a.amount AS amount, 
		       a.amount/
		       (CASE WHEN a.curr = (SELECT * from defaults_get_defaultcurrency())
                         THEN 1
		        ELSE
		        (CASE WHEN in_account_class =1
		              THEN ex.buy
		              ELSE ex.sell END)
		        END) as amount_fx, 
		       (CASE WHEN c.discount_terms &lt; extract(&#39;days&#39; FROM age(a.transdate))
		        THEN 0
		        ELSE (coalesce(ac.due, a.amount)) * coalesce(c.discount, 0) / 100
		        END) AS discount,
		        (CASE WHEN c.discount_terms &lt; extract(&#39;days&#39; FROM age(a.transdate))
		        THEN 0
		        ELSE (coalesce(ac.due, a.amount)) * coalesce(c.discount, 0) / 100
		        END)/
		        (CASE WHEN a.curr = (SELECT * from defaults_get_defaultcurrency())
                         THEN 1
		        ELSE
		        (CASE WHEN in_account_class =1
		              THEN ex.buy
		              ELSE ex.sell END)
		        END) as discount_fx,		        
		        ac.due - (CASE WHEN c.discount_terms &lt; extract(&#39;days&#39; FROM age(a.transdate))
		        THEN 0
		        ELSE (coalesce(ac.due, a.amount)) * coalesce(c.discount, 0) / 100
		        END) AS due,
		        (ac.due - (CASE WHEN c.discount_terms &lt; extract(&#39;days&#39; FROM age(a.transdate))
		        THEN 0 
		        ELSE (coalesce(ac.due, a.amount)) * coalesce(c.discount, 0) / 100
		        END))/
		        (CASE WHEN a.curr = (SELECT * from defaults_get_defaultcurrency())
                         THEN 1
		         ELSE
		         (CASE WHEN in_account_class =1
		              THEN ex.buy
		              ELSE ex.sell END)
		         END) AS due_fx,
		        (CASE WHEN a.curr = (SELECT * from defaults_get_defaultcurrency())
		         THEN 1
		         ELSE
		        (CASE WHEN in_account_class =1
		         THEN ex.buy
		         ELSE ex.sell END)
		         END) AS exchangerate
                 FROM  (SELECT id, invnumber, transdate, amount, entity_id,
		               1 as invoice_class, paid, curr, 
		               entity_credit_account, department_id, approved
		          FROM ap
                         UNION
		         SELECT id, invnumber, transdate, amount, entity_id,
		               2 AS invoice_class, paid, curr,
		               entity_credit_account, department_id, approved

		         FROM ar
		         ) a 
		JOIN (SELECT trans_id, chart_id, sum(CASE WHEN in_account_class = 1 THEN amount
		                                  WHEN in_account_class = 2 
		                             THEN amount * -1
		                             END) as due
		        FROM acc_trans 
		        GROUP BY trans_id, chart_id) ac ON (ac.trans_id = a.id)
		        JOIN chart ON (chart.id = ac.chart_id)
		        LEFT JOIN exchangerate ex ON ( ex.transdate = a.transdate AND ex.curr = a.curr )         
		        JOIN entity_credit_account c ON (c.id = a.entity_credit_account
                        OR (a.entity_credit_account IS NULL and a.entity_id = c.entity_id))
	 	        WHERE ((chart.link = &#39;AP&#39; AND in_account_class = 1)
		              OR (chart.link = &#39;AR&#39; AND in_account_class = 2))
              	        AND a.invoice_class = in_account_class
		        AND c.entity_class = in_account_class
		        AND c.id = in_entity_credit_id
		        AND a.amount - a.paid &lt;&gt; 0
		        AND a.curr = in_curr
		        AND (a.transdate &gt;= in_datefrom 
		             OR in_datefrom IS NULL)
		        AND (a.transdate &lt;= in_dateto
		             OR in_dateto IS NULL)
		        AND (a.amount &gt;= in_amountfrom 
		             OR in_amountfrom IS NULL)
		        AND (a.amount &lt;= in_amountto
		             OR in_amountto IS NULL)
		        AND (a.department_id = in_department_id
		             OR in_department_id IS NULL)
		        AND due &lt;&gt; 0 
		        AND a.approved = true         
		        GROUP BY a.invnumber, a.transdate, a.amount, amount_fx, discount, discount_fx, ac.due, a.id, c.discount_terms, ex.buy, ex.sell, a.curr
	LOOP
		RETURN NEXT payment_inv;
	END LOOP;
END;
</programlisting>
      </para>
    </section>

<!-- Function payment_get_open_overpayment_entities(in_account_class integer) -->
    <section id="public.function.payment-get-open-overpayment-entities-in-account-class-integer"
             xreflabel="publicpayment_get_open_overpayment_entities(in_account_class integer)">
      <title id="public.function.payment-get-open-overpayment-entities-in-account-class-integer-title">
       payment_get_open_overpayment_entities(in_account_class integer)
      </title>
      <titleabbrev id="public.function.payment-get-open-overpayment-entities-in-account-class-integer-titleabbrev">
       payment_get_open_overpayment_entities(in_account_class integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>SET OF payment_vc_info</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
 DECLARE out_entity payment_vc_info;
 BEGIN
	FOR out_entity IN
    		SELECT DISTINCT entity_credit_id, legal_name, e.entity_class, discount, o.meta_number
    		FROM overpayments o
    		JOIN entity e ON (e.id=o.entity_id)
    		WHERE available &lt;&gt; 0 AND in_account_class = payment_class
        LOOP
                RETURN NEXT out_entity;
        END LOOP;
 END;
</programlisting>
      </para>
    </section>

<!-- Function payment_get_unused_overpayment(in_chart_id integer, in_entity_credit_id integer, in_account_class integer) -->
    <section id="public.function.payment-get-unused-overpayment-in-chart-id-integer-in-entity-credit-id-integer-in-account-class-integer"
             xreflabel="publicpayment_get_unused_overpayment(in_chart_id integer, in_entity_credit_id integer, in_account_class integer)">
      <title id="public.function.payment-get-unused-overpayment-in-chart-id-integer-in-entity-credit-id-integer-in-account-class-integer-title">
       payment_get_unused_overpayment(in_chart_id integer, in_entity_credit_id integer, in_account_class integer)
      </title>
      <titleabbrev id="public.function.payment-get-unused-overpayment-in-chart-id-integer-in-entity-credit-id-integer-in-account-class-integer-titleabbrev">
       payment_get_unused_overpayment(in_chart_id integer, in_entity_credit_id integer, in_account_class integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>SET OF overpayments</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
DECLARE out_overpayment overpayments%ROWTYPE;
BEGIN
      FOR out_overpayment IN
              SELECT DISTINCT * 
              FROM overpayments
              WHERE payment_class  = in_account_class 
              AND entity_credit_id = in_entity_credit_id 
              AND available &lt;&gt; 0
              AND (in_chart_id IS NULL OR chart_id = in_chart_id )
              ORDER BY payment_date
            
      LOOP
           RETURN NEXT out_overpayment;
      END LOOP;
END;
</programlisting>
      </para>
    </section>

<!-- Function payment_get_vc_info(in_location_class_id integer, in_entity_credit_id integer) -->
    <section id="public.function.payment-get-vc-info-in-location-class-id-integer-in-entity-credit-id-integer"
             xreflabel="publicpayment_get_vc_info(in_location_class_id integer, in_entity_credit_id integer)">
      <title id="public.function.payment-get-vc-info-in-location-class-id-integer-in-entity-credit-id-integer-title">
       payment_get_vc_info(in_location_class_id integer, in_entity_credit_id integer)
      </title>
      <titleabbrev id="public.function.payment-get-vc-info-in-location-class-id-integer-in-entity-credit-id-integer-titleabbrev">
       payment_get_vc_info(in_location_class_id integer, in_entity_credit_id integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>SET OF payment_location_result</seg>
        </seglistitem>
       </segmentedlist>
 
        This function returns vendor or customer info 
        <programlisting>
DECLARE out_row payment_location_result;
	BEGIN
		FOR out_row IN
                SELECT l.id, l.line_one, l.line_two, l.line_three, l.city,
                       l.state, l.mail_code, c.name, lc.class
                FROM location l
                JOIN company_to_location ctl ON (ctl.location_id = l.id)
                JOIN company cp ON (ctl.company_id = cp.id)
                JOIN location_class lc ON (ctl.location_class = lc.id)
                JOIN country c ON (c.id = l.country_id)
                JOIN entity_credit_account ec ON (ec.entity_id = cp.entity_id)
                WHERE ec.id = in_entity_credit_id AND
                      lc.id = in_location_class_id
                ORDER BY lc.id, l.id, c.name
                LOOP
                	RETURN NEXT out_row;
		END LOOP;
	END;
</programlisting>
      </para>
    </section>

<!-- Function payment_post(in_approved date, in_ovp_payment_id integer, in_op_account_id integer, in_op_memo bpchar, in_op_source text, in_op_cash_account_id integer, in_op_amount text, in_transaction_id integer[], in_memo numeric[], in_source boolean[], in_cash_approved text[], in_amount text[], in_cash_account_id integer[], in_gl_description numeric[], in_department_id integer[], in_notes text[], in_curr text[], in_entity_credit_id integer[], in_account_class integer[], in_datepaid boolean) -->
    <section id="public.function.payment-post-in-approved-date-in-ovp-payment-id-integer-in-op-account-id-integer-in-op-memo-bpchar-in-op-source-text-in-op-cash-account-id-integer-in-op-amount-text-in-transaction-id-integerARRAY-in-memo-numericARRAY-in-source-booleanARRAY-in-cash-approved-textARRAY-in-amount-textARRAY-in-cash-account-id-integerARRAY-in-gl-description-numericARRAY-in-department-id-integerARRAY-in-notes-textARRAY-in-curr-textARRAY-in-entity-credit-id-integerARRAY-in-account-class-integerARRAY-in-datepaid-boolean"
             xreflabel="publicpayment_post(in_approved date, in_ovp_payment_id integer, in_op_account_id integer, in_op_memo bpchar, in_op_source text, in_op_cash_account_id integer, in_op_amount text, in_transaction_id integer[], in_memo numeric[], in_source boolean[], in_cash_approved text[], in_amount text[], in_cash_account_id integer[], in_gl_description numeric[], in_department_id integer[], in_notes text[], in_curr text[], in_entity_credit_id integer[], in_account_class integer[], in_datepaid boolean)">
      <title id="public.function.payment-post-in-approved-date-in-ovp-payment-id-integer-in-op-account-id-integer-in-op-memo-bpchar-in-op-source-text-in-op-cash-account-id-integer-in-op-amount-text-in-transaction-id-integerARRAY-in-memo-numericARRAY-in-source-booleanARRAY-in-cash-approved-textARRAY-in-amount-textARRAY-in-cash-account-id-integerARRAY-in-gl-description-numericARRAY-in-department-id-integerARRAY-in-notes-textARRAY-in-curr-textARRAY-in-entity-credit-id-integerARRAY-in-account-class-integerARRAY-in-datepaid-boolean-title">
       payment_post(in_approved date, in_ovp_payment_id integer, in_op_account_id integer, in_op_memo bpchar, in_op_source text, in_op_cash_account_id integer, in_op_amount text, in_transaction_id integer[], in_memo numeric[], in_source boolean[], in_cash_approved text[], in_amount text[], in_cash_account_id integer[], in_gl_description numeric[], in_department_id integer[], in_notes text[], in_curr text[], in_entity_credit_id integer[], in_account_class integer[], in_datepaid boolean)
      </title>
      <titleabbrev id="public.function.payment-post-in-approved-date-in-ovp-payment-id-integer-in-op-account-id-integer-in-op-memo-bpchar-in-op-source-text-in-op-cash-account-id-integer-in-op-amount-text-in-transaction-id-integerARRAY-in-memo-numericARRAY-in-source-booleanARRAY-in-cash-approved-textARRAY-in-amount-textARRAY-in-cash-account-id-integerARRAY-in-gl-description-numericARRAY-in-department-id-integerARRAY-in-notes-textARRAY-in-curr-textARRAY-in-entity-credit-id-integerARRAY-in-account-class-integerARRAY-in-datepaid-boolean-titleabbrev">
       payment_post(in_approved date, in_ovp_payment_id integer, in_op_account_id integer, in_op_memo bpchar, in_op_source text, in_op_cash_account_id integer, in_op_amount text, in_transaction_id integer[], in_memo numeric[], in_source boolean[], in_cash_approved text[], in_amount text[], in_cash_account_id integer[], in_gl_description numeric[], in_department_id integer[], in_notes text[], in_curr text[], in_entity_credit_id integer[], in_account_class integer[], in_datepaid boolean)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>integer</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
DECLARE var_payment_id int;
DECLARE var_gl_id int;
DECLARE var_entry record;
DECLARE var_entry_id int[];
DECLARE out_count int;
DECLARE coa_id record;
DECLARE var_employee int;
DECLARE var_account_id int;
DECLARE default_currency char(3);
DECLARE current_exchangerate numeric;
DECLARE old_exchangerate numeric;
DECLARE tmp_amount numeric;
BEGIN
        
        SELECT * INTO default_currency  FROM defaults_get_defaultcurrency(); 
        SELECT * INTO current_exchangerate FROM currency_get_exchangerate(in_curr, in_datepaid, in_account_class);


        SELECT INTO var_employee p.id 
        FROM users u
        JOIN person p ON (u.entity_id=p.entity_id)
        WHERE username = SESSION_USER LIMIT 1;
        -- 
        -- WE HAVE TO INSERT THE PAYMENT, USING THE GL INFORMATION
        -- THE ID IS GENERATED BY payment_id_seq
        --
   	INSERT INTO payment (reference, payment_class, payment_date,
	                      employee_id, currency, notes, department_id, entity_credit_id) 
	VALUES ((CASE WHEN in_account_class = 1 THEN
	                                setting_increment(&#39;rcptnumber&#39;) -- I FOUND THIS ON sql/modules/Settings.sql 
			             ELSE 						-- and it is very usefull				
			                setting_increment(&#39;paynumber&#39;) 
			             END),
	         in_account_class, in_datepaid, var_employee,
                 in_curr, in_notes, in_department_id, in_entity_credit_id);
        SELECT currval(&#39;payment_id_seq&#39;) INTO var_payment_id; -- WE&#39;LL NEED THIS VALUE TO USE payment_link table
        -- WE&#39;LL NEED THIS VALUE TO JOIN WITH PAYMENT
        -- NOW COMES THE HEAVY PART, STORING ALL THE POSSIBLE TRANSACTIONS... 
        --
        -- FIRST WE SHOULD INSERT THE CASH ACCOUNTS
        --
        -- WE SHOULD HAVE THE DATA STORED AS (ACCNO, AMOUNT), SO
     IF (array_upper(in_cash_account_id, 1) &gt; 0) THEN
	FOR out_count IN 
			array_lower(in_cash_account_id, 1) ..
			array_upper(in_cash_account_id, 1)
	LOOP
	        INSERT INTO acc_trans (chart_id, amount,
		                       trans_id, transdate, approved, source, memo)
		VALUES (in_cash_account_id[out_count], 
		        CASE WHEN in_account_class = 1 THEN in_amount[out_count]*current_exchangerate  
		        ELSE (in_amount[out_count]*current_exchangerate)* - 1
		        END,
		        in_transaction_id[out_count], in_datepaid, coalesce(in_approved, true), 
		        in_source[out_count], in_memo[out_count]);
                INSERT INTO payment_links 
		VALUES (var_payment_id, currval(&#39;acc_trans_entry_id_seq&#39;), 1);
		IF (in_ovp_payment_id IS NOT NULL AND in_ovp_payment_id[out_count] IS NOT NULL) THEN
                	INSERT INTO payment_links
                	VALUES (in_ovp_payment_id[out_count], currval(&#39;acc_trans_entry_id_seq&#39;), 0);
		END IF;
		
	END LOOP;
	-- NOW LETS HANDLE THE AR/AP ACCOUNTS
	-- WE RECEIVED THE TRANSACTIONS_ID AND WE CAN OBTAIN THE ACCOUNT FROM THERE
	FOR out_count IN
		     array_lower(in_transaction_id, 1) ..
		     array_upper(in_transaction_id, 1)
       LOOP
               SELECT INTO var_account_id chart_id FROM acc_trans as ac
	        JOIN chart as c ON (c.id = ac.chart_id) 
       	        WHERE 
       	        trans_id = in_transaction_id[out_count] AND
       	        ( c.link = &#39;AP&#39; OR c.link = &#39;AR&#39; );
        -- We need to know the exchangerate of this transaction
        IF (current_exchangerate = 1 ) THEN 
           old_exchangerate := 1;
        ELSIF (in_account_class = 1) THEN
           SELECT buy INTO old_exchangerate 
           FROM exchangerate e
           JOIN ap a on (a.transdate = e.transdate )
           WHERE a.id = in_transaction_id[out_count];
        ELSE 
           SELECT sell INTO old_exchangerate 
           FROM exchangerate e
           JOIN ar a on (a.transdate = e.transdate )
           WHERE a.id = in_transaction_id[out_count];
        END IF;
        -- Now we post the AP/AR transaction
        INSERT INTO acc_trans (chart_id, amount,
                                trans_id, transdate, approved, source, memo)
		VALUES (var_account_id, 
		        CASE WHEN in_account_class = 1 THEN 
		        
		        (in_amount[out_count]*old_exchangerate) * -1 
		        ELSE in_amount[out_count]*old_exchangerate
		        END,
		        in_transaction_id[out_count], in_datepaid,  coalesce(in_approved, true), 
		        in_source[out_count], in_memo[out_count]);
        -- Lets set the gain/loss, if tmp_amount equals zero then we dont need to post
        -- any transaction
        tmp_amount := in_amount[out_count]*current_exchangerate - in_amount[out_count]*old_exchangerate;
       IF (tmp_amount &lt; 0) THEN
          IF (in_account_class  = 1) THEN
           INSERT INTO acc_trans (chart_id, amount, trans_id, transdate, approved, source)
            VALUES (CAST((select value from defaults where setting_key like &#39;fxloss_accno_id&#39;) AS INT),
                    tmp_amount, in_transaction_id[out_count], in_datepaid, coalesce(in_approved, true),
                    in_source[out_count]);
           ELSE
            INSERT INTO acc_trans (chart_id, amount, trans_id, transdate, approved, source)
            VALUES (CAST((select value from defaults where setting_key like &#39;fxgain_accno_id&#39;) AS INT),
                    tmp_amount, in_transaction_id[out_count], in_datepaid, coalesce(in_approved, true),
                    in_source[out_count]);
          END IF;
        ELSIF (tmp_amount &gt; 0) THEN
          IF (in_account_class  = 1) THEN
            INSERT INTO acc_trans (chart_id, amount, trans_id, transdate, approved, source)
            VALUES (CAST((select value from defaults where setting_key like &#39;fxgain_accno_id&#39;) AS INT),
                    tmp_amount, in_transaction_id[out_count], in_datepaid, coalesce(in_approved, true),
                    in_source[out_count]);
           ELSE
            INSERT INTO acc_trans (chart_id, amount, trans_id, transdate, approved, source)
            VALUES (CAST((select value from defaults where setting_key like &#39;fxloss_accno_id&#39;) AS INT),
                    tmp_amount, in_transaction_id[out_count], in_datepaid, coalesce(in_approved, true),
                    in_source[out_count]);
          END IF; 
        END IF; 
        -- Now we set the links
         INSERT INTO payment_links 
		VALUES (var_payment_id, currval(&#39;acc_trans_entry_id_seq&#39;), 1);
      END LOOP;
     END IF; -- END IF 
--
-- WE NEED TO HANDLE THE OVERPAYMENTS NOW
--
       --
       -- FIRST WE HAVE TO MAKE THE GL TO HOLD THE OVERPAYMENT TRANSACTIONS
       -- THE ID IS GENERATED BY gl_id_seq
       --
       
  IF (array_upper(in_op_cash_account_id, 1) &gt; 0) THEN
       INSERT INTO gl (reference, description, transdate,
                       person_id, notes, approved, department_id) 
              VALUES (setting_increment(&#39;glnumber&#39;),
	              in_gl_description, in_datepaid, var_employee,
	              in_notes, in_approved, in_department_id);
       SELECT currval(&#39;id&#39;) INTO var_gl_id;   
--
-- WE NEED TO SET THE GL_ID FIELD ON PAYMENT&#39;S TABLE
--
       UPDATE payment SET gl_id = var_gl_id 
       WHERE id = var_payment_id;
       -- NOW COMES THE HEAVY PART, STORING ALL THE POSSIBLE TRANSACTIONS... 
       --
       -- FIRST WE SHOULD INSERT THE OVERPAYMENT CASH ACCOUNTS
       --
	FOR out_count IN 
			array_lower(in_op_cash_account_id, 1) ..
			array_upper(in_op_cash_account_id, 1)
	LOOP
	        INSERT INTO acc_trans (chart_id, amount,
		                       trans_id, transdate, approved, source, memo)
		VALUES (in_op_cash_account_id[out_count], 
		        CASE WHEN in_account_class = 1 THEN in_op_amount[out_count]  
		        ELSE in_op_amount[out_count] * - 1
		        END,
		        var_gl_id, in_datepaid, coalesce(in_approved, true), 
		        in_op_source[out_count], in_op_memo[out_count]);
	        INSERT INTO payment_links 
		VALUES (var_payment_id, currval(&#39;acc_trans_entry_id_seq&#39;), 2);
		
	END LOOP;
	-- NOW LETS HANDLE THE OVERPAYMENT ACCOUNTS
	FOR out_count IN
		     array_lower(in_op_account_id, 1) ..
		     array_upper(in_op_account_id, 1)
	LOOP
         INSERT INTO acc_trans (chart_id, amount,
                                trans_id, transdate, approved, source, memo)
		VALUES (in_op_account_id[out_count], 
		        CASE WHEN in_account_class = 1 THEN in_op_amount[out_count] * -1 
		        ELSE in_op_amount[out_count]
		        END,
		        var_gl_id, in_datepaid,  coalesce(in_approved, true), 
		        in_op_source[out_count], in_op_memo[out_count]);
		INSERT INTO payment_links 
		VALUES (var_payment_id, currval(&#39;acc_trans_entry_id_seq&#39;), 2);
	END LOOP;	        
 END IF;  
 return var_payment_id;
END;
</programlisting>
      </para>
    </section>

<!-- Function payment_type__get_label(in_payment_type_id integer) -->
    <section id="public.function.payment-type-get-label-in-payment-type-id-integer"
             xreflabel="publicpayment_type__get_label(in_payment_type_id integer)">
      <title id="public.function.payment-type-get-label-in-payment-type-id-integer-title">
       payment_type__get_label(in_payment_type_id integer)
      </title>
      <titleabbrev id="public.function.payment-type-get-label-in-payment-type-id-integer-titleabbrev">
       payment_type__get_label(in_payment_type_id integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>SET OF payment_type</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
DECLARE out_row payment_type%ROWTYPE;
BEGIN
	FOR out_row IN SELECT * FROM payment_type where id=in_payment_type_id LOOP
		RETURN NEXT out_row;
	END LOOP;
END;
</programlisting>
      </para>
    </section>

<!-- Function payment_type__list() -->
    <section id="public.function.payment-type-list"
             xreflabel="publicpayment_type__list()">
      <title id="public.function.payment-type-list-title">
       payment_type__list()
      </title>
      <titleabbrev id="public.function.payment-type-list-titleabbrev">
       payment_type__list()
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>SET OF payment_type</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
DECLARE out_row payment_type%ROWTYPE;
BEGIN
	FOR out_row IN SELECT * FROM payment_type LOOP
		RETURN NEXT out_row;
	END LOOP;
END;
</programlisting>
      </para>
    </section>

<!-- Function payments_get_open_currencies(in_account_class integer) -->
    <section id="public.function.payments-get-open-currencies-in-account-class-integer"
             xreflabel="publicpayments_get_open_currencies(in_account_class integer)">
      <title id="public.function.payments-get-open-currencies-in-account-class-integer-title">
       payments_get_open_currencies(in_account_class integer)
      </title>
      <titleabbrev id="public.function.payments-get-open-currencies-in-account-class-integer-titleabbrev">
       payments_get_open_currencies(in_account_class integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>SET OF bpchar</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
DECLARE resultrow record;
BEGIN
        FOR resultrow IN
          SELECT DISTINCT curr FROM ar
          UNION
          SELECT DISTINCT curr FROM ap 
          ORDER BY curr
          LOOP
         return next resultrow.curr;
        END LOOP;
END;
</programlisting>
      </para>
    </section>

<!-- Function payments_set_exchangerate(in_datepaid integer, in_curr numeric, in_exchangerate bpchar, in_account_class date) -->
    <section id="public.function.payments-set-exchangerate-in-datepaid-integer-in-curr-numeric-in-exchangerate-bpchar-in-account-class-date"
             xreflabel="publicpayments_set_exchangerate(in_datepaid integer, in_curr numeric, in_exchangerate bpchar, in_account_class date)">
      <title id="public.function.payments-set-exchangerate-in-datepaid-integer-in-curr-numeric-in-exchangerate-bpchar-in-account-class-date-title">
       payments_set_exchangerate(in_datepaid integer, in_curr numeric, in_exchangerate bpchar, in_account_class date)
      </title>
      <titleabbrev id="public.function.payments-set-exchangerate-in-datepaid-integer-in-curr-numeric-in-exchangerate-bpchar-in-account-class-date-titleabbrev">
       payments_set_exchangerate(in_datepaid integer, in_curr numeric, in_exchangerate bpchar, in_account_class date)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>integer</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
DECLARE current_exrate  exchangerate%ROWTYPE;
BEGIN
select  * INTO current_exrate
        FROM  exchangerate 
        WHERE transdate = in_date;
IF current_exrate.transdate = in_date THEN
   IF in_account_class = 1 THEN 
      UPDATE exchangerate set buy = in_exchangerate  where transdate = in_date;
   ELSE
      UPDATE exchangerate set sell = in_exchangerate where transdate = in_date;
   END IF;
   RETURN 0; 
ELSE
    IF in_account_class = 1 THEN
     INSERT INTO exchangerate (curr, transdate, buy) values (in_currency, in_date, in_exchangerate);
  ELSE   
     INSERT INTO exchangerate (curr, transdate, sell) values (in_currency, in_date, in_exchangerate);
  END IF;                                       
RETURN 0;
END IF;
END;
</programlisting>
      </para>
    </section>

<!-- Function person__all_locations(in_entity_id integer) -->
    <section id="public.function.person-all-locations-in-entity-id-integer"
             xreflabel="publicperson__all_locations(in_entity_id integer)">
      <title id="public.function.person-all-locations-in-entity-id-integer-title">
       person__all_locations(in_entity_id integer)
      </title>
      <titleabbrev id="public.function.person-all-locations-in-entity-id-integer-titleabbrev">
       person__all_locations(in_entity_id integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>SET OF location</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>

    SELECT l.* FROM location l
    JOIN person_to_location ptl ON ptl.location_id = l.id
    JOIN person p on ptl.person_id = p.id
    WHERE p.id = $1;

</programlisting>
      </para>
    </section>

<!-- Function person__delete_location(in_location_id integer, in_entity_id integer) -->
    <section id="public.function.person-delete-location-in-location-id-integer-in-entity-id-integer"
             xreflabel="publicperson__delete_location(in_location_id integer, in_entity_id integer)">
      <title id="public.function.person-delete-location-in-location-id-integer-in-entity-id-integer-title">
       person__delete_location(in_location_id integer, in_entity_id integer)
      </title>
      <titleabbrev id="public.function.person-delete-location-in-location-id-integer-in-entity-id-integer-titleabbrev">
       person__delete_location(in_location_id integer, in_entity_id integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>integer</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>

DECLARE
    v_loc location;
    
BEGIN
    
    select loc.* into v_loc FROM location loc
    JOIN person_to_location ptl ON loc.id = ptl.location_id
    JOIN person p ON p.id = ptl.person_id
    WHERE p.entity_id = in_entity_id 
    AND loc.id = in_location_id;
    
    IF NOT FOUND THEN
       RAISE EXCEPTION &#39;Cannot find records to delete for entity % and location %&#39;, in_entity_id, in_location_id;
    ELSE
        DELETE FROM people_to_location WHERE location_id = in_location_id;
        DELETE FROM location WHERE location_id = in_location_id;
    END IF;

END;

</programlisting>
      </para>
    </section>

<!-- Function person__get_my_entity_id() -->
    <section id="public.function.person-get-my-entity-id"
             xreflabel="publicperson__get_my_entity_id()">
      <title id="public.function.person-get-my-entity-id-title">
       person__get_my_entity_id()
      </title>
      <titleabbrev id="public.function.person-get-my-entity-id-titleabbrev">
       person__get_my_entity_id()
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>integer</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
	SELECT entity_id from users where username = SESSION_USER;
</programlisting>
      </para>
    </section>

<!-- Function person__list_contacts(in_entity_id integer) -->
    <section id="public.function.person-list-contacts-in-entity-id-integer"
             xreflabel="publicperson__list_contacts(in_entity_id integer)">
      <title id="public.function.person-list-contacts-in-entity-id-integer-title">
       person__list_contacts(in_entity_id integer)
      </title>
      <titleabbrev id="public.function.person-list-contacts-in-entity-id-integer-titleabbrev">
       person__list_contacts(in_entity_id integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>SET OF contact_list</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
DECLARE out_row RECORD;
BEGIN
	FOR out_row IN 
		SELECT cc.class, cc.id, c.description, c.contact
		FROM person_to_contact c
		JOIN contact_class cc ON (c.contact_class_id = cc.id)
		JOIN person p ON (c.person_id = p.id)
		WHERE p.entity_id = in_entity_id
	LOOP
		RETURN NEXT out_row;
	END LOOP;
END;
</programlisting>
      </para>
    </section>

<!-- Function person__list_locations(in_entity_id integer) -->
    <section id="public.function.person-list-locations-in-entity-id-integer"
             xreflabel="publicperson__list_locations(in_entity_id integer)">
      <title id="public.function.person-list-locations-in-entity-id-integer-title">
       person__list_locations(in_entity_id integer)
      </title>
      <titleabbrev id="public.function.person-list-locations-in-entity-id-integer-titleabbrev">
       person__list_locations(in_entity_id integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>SET OF location_result</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
DECLARE out_row RECORD;
BEGIN
	FOR out_row IN
		SELECT l.id, l.line_one, l.line_two, l.line_three, l.city, 
			l.state, l.mail_code, c.name, lc.class
		FROM location l
		JOIN person_to_location ctl ON (ctl.location_id = l.id)
		JOIN person p ON (ctl.person_id = p.id)
		JOIN location_class lc ON (ctl.location_class = lc.id)
		JOIN country c ON (c.id = l.country_id)
		WHERE p.entity_id = in_entity_id
		ORDER BY lc.id, l.id, c.name
	LOOP
		RETURN NEXT out_row;
	END LOOP;
END;
</programlisting>
      </para>
    </section>

<!-- Function person__save(in_country_id integer, in_last_name integer, in_middle_name text, in_first_name text, in_salutation_id text, in_entity_id integer) -->
    <section id="public.function.person-save-in-country-id-integer-in-last-name-integer-in-middle-name-text-in-first-name-text-in-salutation-id-text-in-entity-id-integer"
             xreflabel="publicperson__save(in_country_id integer, in_last_name integer, in_middle_name text, in_first_name text, in_salutation_id text, in_entity_id integer)">
      <title id="public.function.person-save-in-country-id-integer-in-last-name-integer-in-middle-name-text-in-first-name-text-in-salutation-id-text-in-entity-id-integer-title">
       person__save(in_country_id integer, in_last_name integer, in_middle_name text, in_first_name text, in_salutation_id text, in_entity_id integer)
      </title>
      <titleabbrev id="public.function.person-save-in-country-id-integer-in-last-name-integer-in-middle-name-text-in-first-name-text-in-salutation-id-text-in-entity-id-integer-titleabbrev">
       person__save(in_country_id integer, in_last_name integer, in_middle_name text, in_first_name text, in_salutation_id text, in_entity_id integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>integer</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>

    DECLARE
        e_id int;
        e entity;
        loc location;
        l_id int;
        p_id int;
    BEGIN
    
    select * into e from entity where id = in_entity_id and entity_class = 3;
    e_id := in_entity_id; 
    
    IF NOT FOUND THEN
        INSERT INTO entity (name, entity_class, country_id) 
	values (in_first_name || &#39; &#39; || in_last_name, 3, in_country_id);
	e_id := currval(&#39;entity_id_seq&#39;);
       
    END IF;
    
      
    UPDATE person SET
            salutation_id = in_salutation_id,
            first_name = in_first_name,
            last_name = in_last_name,
            middle_name = in_middle_name
    WHERE
            entity_id = in_entity_id;
    IF FOUND THEN
	RETURN in_entity_id;
    ELSE 
        -- Do an insert
        
        INSERT INTO person (salutation_id, first_name, last_name, entity_id)
	VALUES (in_salutation_id, in_first_name, in_last_name, e_id);

        RETURN e_id;
    
    END IF;
END;
</programlisting>
      </para>
    </section>

<!-- Function person__save_contact(in_contact_new integer, in_contact_orig integer, in_contact_class text, in_entity_id text) -->
    <section id="public.function.person-save-contact-in-contact-new-integer-in-contact-orig-integer-in-contact-class-text-in-entity-id-text"
             xreflabel="publicperson__save_contact(in_contact_new integer, in_contact_orig integer, in_contact_class text, in_entity_id text)">
      <title id="public.function.person-save-contact-in-contact-new-integer-in-contact-orig-integer-in-contact-class-text-in-entity-id-text-title">
       person__save_contact(in_contact_new integer, in_contact_orig integer, in_contact_class text, in_entity_id text)
      </title>
      <titleabbrev id="public.function.person-save-contact-in-contact-new-integer-in-contact-orig-integer-in-contact-class-text-in-entity-id-text-titleabbrev">
       person__save_contact(in_contact_new integer, in_contact_orig integer, in_contact_class text, in_entity_id text)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>integer</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
DECLARE 
    out_id int;
    v_orig person_to_contact;
BEGIN
    
    SELECT cc.* into v_orig 
    FROM person_to_contact cc, person p
    WHERE p.entity_id = in_entity_id 
    and cc.contact_class_id = in_contact_class
    AND cc.contact = in_contact_orig
    AND cc.person_id = p.id;
    
    IF NOT FOUND THEN
    
        -- create
        INSERT INTO person_to_contact(person_id, contact_class_id, contact)
        VALUES (
            (SELECT id FROM person WHERE entity_id = in_entity_id),
            in_contact_class,
            in_contact_new
        );
        return 1;
    ELSE
        -- edit.
        UPDATE person_to_contact
        SET contact = in_contact_new
        WHERE 
        contact = in_contact_orig
        AND person_id = v_orig.person_id
        AND contact_class = in_contact_class;
        return 0;
    END IF;
    
END;
</programlisting>
      </para>
    </section>

<!-- Function person__save_location(in_country_code integer, in_mail_code integer, in_state integer, in_city text, in_line_three text, in_line_two text, in_line_one text, in_location_class text, in_location_id text, in_entity_id integer) -->
    <section id="public.function.person-save-location-in-country-code-integer-in-mail-code-integer-in-state-integer-in-city-text-in-line-three-text-in-line-two-text-in-line-one-text-in-location-class-text-in-location-id-text-in-entity-id-integer"
             xreflabel="publicperson__save_location(in_country_code integer, in_mail_code integer, in_state integer, in_city text, in_line_three text, in_line_two text, in_line_one text, in_location_class text, in_location_id text, in_entity_id integer)">
      <title id="public.function.person-save-location-in-country-code-integer-in-mail-code-integer-in-state-integer-in-city-text-in-line-three-text-in-line-two-text-in-line-one-text-in-location-class-text-in-location-id-text-in-entity-id-integer-title">
       person__save_location(in_country_code integer, in_mail_code integer, in_state integer, in_city text, in_line_three text, in_line_two text, in_line_one text, in_location_class text, in_location_id text, in_entity_id integer)
      </title>
      <titleabbrev id="public.function.person-save-location-in-country-code-integer-in-mail-code-integer-in-state-integer-in-city-text-in-line-three-text-in-line-two-text-in-line-one-text-in-location-class-text-in-location-id-text-in-entity-id-integer-titleabbrev">
       person__save_location(in_country_code integer, in_mail_code integer, in_state integer, in_city text, in_line_three text, in_line_two text, in_line_one text, in_location_class text, in_location_id text, in_entity_id integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>integer</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>

    DECLARE
        l_row location;
        l_id INT;
	    t_person_id int;
    BEGIN
	SELECT id INTO t_person_id
	FROM person WHERE entity_id = in_entity_id;
    -- why does it delete?
    
    select * into l_row FROM location
    WHERE id = in_location_id;
    
    IF NOT FOUND THEN
        -- Create a new one.
        l_id := location_save(
            in_location_id, 
    	    in_line_one, 
    	    in_line_two, 
    	    in_line_three, 
    	    in_city,
    		in_state, 
    		in_mail_code, 
    		in_country_code);
    	
        INSERT INTO person_to_location 
    		(person_id, location_id, location_class)
    	VALUES  (t_person_id, l_id, in_location_class);
    ELSE
        l_id := location_save(
            in_location_id, 
    	    in_line_one, 
    	    in_line_two, 
    	    in_line_three, 
    	    in_city,
    		in_state, 
    		in_mail_code, 
    		in_country_code);
        -- Update the old one.
    END IF;
    return l_id;
    END;
</programlisting>
      </para>
    </section>

<!-- Function plainto_tsquery(oid, text) -->
    <section id="public.function.plainto-tsquery-oid-text"
             xreflabel="publicplainto_tsquery(oid, text)">
      <title id="public.function.plainto-tsquery-oid-text-title">
       plainto_tsquery(oid, text)
      </title>
      <titleabbrev id="public.function.plainto-tsquery-oid-text-titleabbrev">
       plainto_tsquery(oid, text)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>INTERNAL</seg>
         <seg>tsquery</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>plainto_tsquery_byid</programlisting>
      </para>
    </section>

<!-- Function plainto_tsquery(text) -->
    <section id="public.function.plainto-tsquery-text"
             xreflabel="publicplainto_tsquery(text)">
      <title id="public.function.plainto-tsquery-text-title">
       plainto_tsquery(text)
      </title>
      <titleabbrev id="public.function.plainto-tsquery-text-titleabbrev">
       plainto_tsquery(text)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>INTERNAL</seg>
         <seg>tsquery</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>plainto_tsquery</programlisting>
      </para>
    </section>

<!-- Function plainto_tsquery(text, text) -->
    <section id="public.function.plainto-tsquery-text-text"
             xreflabel="publicplainto_tsquery(text, text)">
      <title id="public.function.plainto-tsquery-text-text-title">
       plainto_tsquery(text, text)
      </title>
      <titleabbrev id="public.function.plainto-tsquery-text-text-titleabbrev">
       plainto_tsquery(text, text)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>tsquery</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>tsa_plainto_tsquery_name</programlisting>
      </para>
    </section>

<!-- Function project_list_open(in_date date) -->
    <section id="public.function.project-list-open-in-date-date"
             xreflabel="publicproject_list_open(in_date date)">
      <title id="public.function.project-list-open-in-date-date-title">
       project_list_open(in_date date)
      </title>
      <titleabbrev id="public.function.project-list-open-in-date-date-titleabbrev">
       project_list_open(in_date date)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>SET OF project</seg>
        </seglistitem>
       </segmentedlist>
 
        This function returns all projects that were open as on the date provided as
the argument.
        <programlisting>
DECLARE out_project project%ROWTYPE;
BEGIN
	FOR out_project IN
		SELECT * from project
		WHERE startdate &lt;= in_date AND enddate &gt;= in_date
		      AND completed = 0
	LOOP
		return next out_project;
	END LOOP;
END;
</programlisting>
      </para>
    </section>

<!-- Function prsd_end(internal) -->
    <section id="public.function.prsd-end-internal"
             xreflabel="publicprsd_end(internal)">
      <title id="public.function.prsd-end-internal-title">
       prsd_end(internal)
      </title>
      <titleabbrev id="public.function.prsd-end-internal-titleabbrev">
       prsd_end(internal)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>void</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>tsa_prsd_end</programlisting>
      </para>
    </section>

<!-- Function prsd_getlexeme(internal, internal, internal) -->
    <section id="public.function.prsd-getlexeme-internal-internal-internal"
             xreflabel="publicprsd_getlexeme(internal, internal, internal)">
      <title id="public.function.prsd-getlexeme-internal-internal-internal-title">
       prsd_getlexeme(internal, internal, internal)
      </title>
      <titleabbrev id="public.function.prsd-getlexeme-internal-internal-internal-titleabbrev">
       prsd_getlexeme(internal, internal, internal)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>integer</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>tsa_prsd_getlexeme</programlisting>
      </para>
    </section>

<!-- Function prsd_headline(internal, internal, internal) -->
    <section id="public.function.prsd-headline-internal-internal-internal"
             xreflabel="publicprsd_headline(internal, internal, internal)">
      <title id="public.function.prsd-headline-internal-internal-internal-title">
       prsd_headline(internal, internal, internal)
      </title>
      <titleabbrev id="public.function.prsd-headline-internal-internal-internal-titleabbrev">
       prsd_headline(internal, internal, internal)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>internal</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>tsa_prsd_headline</programlisting>
      </para>
    </section>

<!-- Function prsd_lextype(internal) -->
    <section id="public.function.prsd-lextype-internal"
             xreflabel="publicprsd_lextype(internal)">
      <title id="public.function.prsd-lextype-internal-title">
       prsd_lextype(internal)
      </title>
      <titleabbrev id="public.function.prsd-lextype-internal-titleabbrev">
       prsd_lextype(internal)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>internal</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>tsa_prsd_lextype</programlisting>
      </para>
    </section>

<!-- Function prsd_start(internal, integer) -->
    <section id="public.function.prsd-start-internal-integer"
             xreflabel="publicprsd_start(internal, integer)">
      <title id="public.function.prsd-start-internal-integer-title">
       prsd_start(internal, integer)
      </title>
      <titleabbrev id="public.function.prsd-start-internal-integer-titleabbrev">
       prsd_start(internal, integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>internal</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>tsa_prsd_start</programlisting>
      </para>
    </section>

<!-- Function querytree(tsquery) -->
    <section id="public.function.querytree-tsquery"
             xreflabel="publicquerytree(tsquery)">
      <title id="public.function.querytree-tsquery-title">
       querytree(tsquery)
      </title>
      <titleabbrev id="public.function.querytree-tsquery-titleabbrev">
       querytree(tsquery)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>INTERNAL</seg>
         <seg>text</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>tsquerytree</programlisting>
      </para>
    </section>

<!-- Function rank(real[], tsvector, tsquery) -->
    <section id="public.function.rank-realARRAY-tsvector-tsquery"
             xreflabel="publicrank(real[], tsvector, tsquery)">
      <title id="public.function.rank-realARRAY-tsvector-tsquery-title">
       rank(real[], tsvector, tsquery)
      </title>
      <titleabbrev id="public.function.rank-realARRAY-tsvector-tsquery-titleabbrev">
       rank(real[], tsvector, tsquery)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>INTERNAL</seg>
         <seg>real</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>ts_rank_wtt</programlisting>
      </para>
    </section>

<!-- Function rank(real[], tsvector, tsquery, integer) -->
    <section id="public.function.rank-realARRAY-tsvector-tsquery-integer"
             xreflabel="publicrank(real[], tsvector, tsquery, integer)">
      <title id="public.function.rank-realARRAY-tsvector-tsquery-integer-title">
       rank(real[], tsvector, tsquery, integer)
      </title>
      <titleabbrev id="public.function.rank-realARRAY-tsvector-tsquery-integer-titleabbrev">
       rank(real[], tsvector, tsquery, integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>INTERNAL</seg>
         <seg>real</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>ts_rank_wttf</programlisting>
      </para>
    </section>

<!-- Function rank(tsvector, tsquery) -->
    <section id="public.function.rank-tsvector-tsquery"
             xreflabel="publicrank(tsvector, tsquery)">
      <title id="public.function.rank-tsvector-tsquery-title">
       rank(tsvector, tsquery)
      </title>
      <titleabbrev id="public.function.rank-tsvector-tsquery-titleabbrev">
       rank(tsvector, tsquery)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>INTERNAL</seg>
         <seg>real</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>ts_rank_tt</programlisting>
      </para>
    </section>

<!-- Function rank(tsvector, tsquery, integer) -->
    <section id="public.function.rank-tsvector-tsquery-integer"
             xreflabel="publicrank(tsvector, tsquery, integer)">
      <title id="public.function.rank-tsvector-tsquery-integer-title">
       rank(tsvector, tsquery, integer)
      </title>
      <titleabbrev id="public.function.rank-tsvector-tsquery-integer-titleabbrev">
       rank(tsvector, tsquery, integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>INTERNAL</seg>
         <seg>real</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>ts_rank_ttf</programlisting>
      </para>
    </section>

<!-- Function rank_cd(real[], tsvector, tsquery) -->
    <section id="public.function.rank-cd-realARRAY-tsvector-tsquery"
             xreflabel="publicrank_cd(real[], tsvector, tsquery)">
      <title id="public.function.rank-cd-realARRAY-tsvector-tsquery-title">
       rank_cd(real[], tsvector, tsquery)
      </title>
      <titleabbrev id="public.function.rank-cd-realARRAY-tsvector-tsquery-titleabbrev">
       rank_cd(real[], tsvector, tsquery)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>INTERNAL</seg>
         <seg>real</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>ts_rankcd_wtt</programlisting>
      </para>
    </section>

<!-- Function rank_cd(real[], tsvector, tsquery, integer) -->
    <section id="public.function.rank-cd-realARRAY-tsvector-tsquery-integer"
             xreflabel="publicrank_cd(real[], tsvector, tsquery, integer)">
      <title id="public.function.rank-cd-realARRAY-tsvector-tsquery-integer-title">
       rank_cd(real[], tsvector, tsquery, integer)
      </title>
      <titleabbrev id="public.function.rank-cd-realARRAY-tsvector-tsquery-integer-titleabbrev">
       rank_cd(real[], tsvector, tsquery, integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>INTERNAL</seg>
         <seg>real</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>ts_rankcd_wttf</programlisting>
      </para>
    </section>

<!-- Function rank_cd(tsvector, tsquery) -->
    <section id="public.function.rank-cd-tsvector-tsquery"
             xreflabel="publicrank_cd(tsvector, tsquery)">
      <title id="public.function.rank-cd-tsvector-tsquery-title">
       rank_cd(tsvector, tsquery)
      </title>
      <titleabbrev id="public.function.rank-cd-tsvector-tsquery-titleabbrev">
       rank_cd(tsvector, tsquery)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>INTERNAL</seg>
         <seg>real</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>ts_rankcd_tt</programlisting>
      </para>
    </section>

<!-- Function rank_cd(tsvector, tsquery, integer) -->
    <section id="public.function.rank-cd-tsvector-tsquery-integer"
             xreflabel="publicrank_cd(tsvector, tsquery, integer)">
      <title id="public.function.rank-cd-tsvector-tsquery-integer-title">
       rank_cd(tsvector, tsquery, integer)
      </title>
      <titleabbrev id="public.function.rank-cd-tsvector-tsquery-integer-titleabbrev">
       rank_cd(tsvector, tsquery, integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>INTERNAL</seg>
         <seg>real</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>ts_rankcd_ttf</programlisting>
      </para>
    </section>

<!-- Function reconciliation__account_list() -->
    <section id="public.function.reconciliation-account-list"
             xreflabel="publicreconciliation__account_list()">
      <title id="public.function.reconciliation-account-list-title">
       reconciliation__account_list()
      </title>
      <titleabbrev id="public.function.reconciliation-account-list-titleabbrev">
       reconciliation__account_list()
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>SET OF recon_accounts</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
    SELECT 
        coa.accno || &#39; &#39; || coa.description as name,
        coa.accno, coa.id as id
    FROM account coa, cr_coa_to_account cta
    WHERE cta.chart_id = coa.id
    ORDER BY coa.accno;
</programlisting>
      </para>
    </section>

<!-- Function reconciliation__add_entry(in_amount integer, in_date text, in_type text, in_scn timestamp without time zone, in_report_id numeric) -->
    <section id="public.function.reconciliation-add-entry-in-amount-integer-in-date-text-in-type-text-in-scn-timestamp-without-time-zone-in-report-id-numeric"
             xreflabel="publicreconciliation__add_entry(in_amount integer, in_date text, in_type text, in_scn timestamp without time zone, in_report_id numeric)">
      <title id="public.function.reconciliation-add-entry-in-amount-integer-in-date-text-in-type-text-in-scn-timestamp-without-time-zone-in-report-id-numeric-title">
       reconciliation__add_entry(in_amount integer, in_date text, in_type text, in_scn timestamp without time zone, in_report_id numeric)
      </title>
      <titleabbrev id="public.function.reconciliation-add-entry-in-amount-integer-in-date-text-in-type-text-in-scn-timestamp-without-time-zone-in-report-id-numeric-titleabbrev">
       reconciliation__add_entry(in_amount integer, in_date text, in_type text, in_scn timestamp without time zone, in_report_id numeric)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>integer</seg>
        </seglistitem>
       </segmentedlist>
 
        This function is very sensitive to ordering of inputs.  NULL or empty in_scn values MUST be submitted after meaningful scns.  It is also highly recommended 
that within each category, one submits in order of amount.  We should therefore
wrap it in another function which can operate on a set.  Implementation TODO.
        <programlisting>
    
    DECLARE
	in_account int;
        la RECORD;
        t_errorcode INT;
        our_value NUMERIC;
        lid INT;
	in_count int;
	t_scn TEXT;
	t_uid int;
	t_prefix text;
    BEGIN

	SELECT value into t_prefix FROM defaults WHERE setting_key = &#39;check_prefix&#39;;

	t_uid := person__get_my_entity_id();
	IF in_scn = &#39;&#39; THEN 
		t_scn := NULL;
	ELSE 
		t_scn := t_prefix || in_scn;
	END IF;
	IF t_scn IS NOT NULL THEN
		SELECT count(*) INTO in_count FROM cr_report_line
		WHERE scn ilike t_scn AND report_id = in_report_id 
			AND their_balance = 0;

		IF in_count = 0 THEN
			INSERT INTO cr_report_line
			(report_id, scn, their_balance, our_balance, clear_time,
				&quot;user&quot;, trans_type)
			VALUES 
			(in_report_id, t_scn, in_amount, 0, in_date, t_uid,
				in_type);
		ELSIF in_count = 1 THEN
			UPDATE cr_report_line
			SET their_balance = in_amount, clear_time = in_date,
				cleared = true
			WHERE t_scn = scn AND report_id = in_report_id
				AND their_balance = 0;
		ELSE 
			SELECT count(*) INTO in_count FROM cr_report_line
			WHERE t_scn ilike scn AND report_id = in_report_id
				AND our_value = in_amount and their_balance = 0;

			IF in_count = 0 THEN -- no match among many of values
				SELECT id INTO lid FROM cr_report_line
                        	WHERE t_scn ilike scn AND report_id = in_report_id
				ORDER BY our_balance ASC limit 1;

				UPDATE cr_report_line
                                SET their_balance = in_amount, 
					clear_time = in_date,
					trans_type = in_type,
					cleared = true
                                WHERE id = lid;

			ELSIF in_count = 1 THEN -- EXECT MATCH
				UPDATE cr_report_line
				SET their_balance = in_amount, 
					trans_type = in_type,
					clear_time = in_date,
					cleared = true
				WHERE t_scn = scn AND report_id = in_report_id
                                	AND our_value = in_amount 
					AND their_balance = 0;
			ELSE -- More than one match
				SELECT id INTO lid FROM cr_report_line
                        	WHERE t_scn ilike scn AND report_id = in_report_id
                                	AND our_value = in_amount
				ORDER BY id ASC limit 1;

				UPDATE cr_report_line
                                SET their_balance = in_amount,
					trans_type = in_type,
					cleared = true,
					clear_time = in_date
                                WHERE id = lid;
				
			END IF;
		END IF;
	ELSE -- scn IS NULL, check on amount instead
		SELECT count(*) INTO in_count FROM cr_report_line
		WHERE report_id = in_report_id AND our_balance = in_amount
			AND their_balance = 0 and post_date = in_date
			and scn NOT LIKE t_prefix || &#39;%&#39;;

		IF in_count = 0 THEN -- no match
			INSERT INTO cr_report_line
			(report_id, scn, their_balance, our_balance, clear_time,
			&quot;user&quot;, trans_type)
			VALUES 
			(in_report_id, t_scn, in_amount, 0, in_date, t_uid,
			in_type);
		ELSIF in_count = 1 THEN -- perfect match
			UPDATE cr_report_line SET their_balance = in_amount,
					trans_type = in_type,
					clear_time = in_date,
					cleared = true
			WHERE report_id = in_report_id AND our_balance = in_amount
                        	AND their_balance = 0 and
				in_scn NOT LIKE t_prefix || &#39;%&#39;;
		ELSE -- more than one match
			SELECT min(id) INTO lid FROM cr_report_line
			WHERE report_id = in_report_id AND our_balance = in_amount
                        	AND their_balance = 0 and post_date = in_date
				AND scn NOT LIKE t_prefix || &#39;%&#39;
			LIMIT 1;

			UPDATE cr_report_line SET their_balance = in_amount,
					trans_type = in_type,
					clear_time = in_date,
					cleared = true
			WHERE id = lid;
			
		END IF;
	END IF;
        return 1; 
        
    END;    
</programlisting>
      </para>
    </section>

<!-- Function reconciliation__delete_report(in_report_id integer) -->
    <section id="public.function.reconciliation-delete-report-in-report-id-integer"
             xreflabel="publicreconciliation__delete_report(in_report_id integer)">
      <title id="public.function.reconciliation-delete-report-in-report-id-integer-title">
       reconciliation__delete_report(in_report_id integer)
      </title>
      <titleabbrev id="public.function.reconciliation-delete-report-in-report-id-integer-titleabbrev">
       reconciliation__delete_report(in_report_id integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>boolean</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
    DECLARE
    BEGIN
        PERFORM id FROM cr_report WHERE id = in_report_id;
        
        IF NOT FOUND THEN
            RAISE NOTICE &#39;reconciliation__delete_report(): Cannot find specified report.&#39;;
            return FOUND;
        END IF;
        
        -- We found the entry. Update it.
        
        PERFORM id FROM cr_report WHERE id = in_report_id AND approved = TRUE;
        
        IF FOUND THEN
            RAISE EXCEPTION &#39;reconcilation__delete_report(): report % is approved; cannot delete.&#39;, in_report_id;
        END IF;
        
        PERFORM id 
           FROM cr_report 
          WHERE id = in_report_id 
            AND submitted = TRUE
            AND entered_by = people__get_my_entity_id();
        
        IF FOUND THEN
            -- Creators cannot delete their own reports if they&#39;ve been submitted.
            RAISE EXCEPTION &#39;reconciliation__delete_report(): creators cannot delete their own report after submission. %&#39;, in_report_id;
        END IF;
        
        UPDATE cr_report
           SET deleted = TRUE,
               deleted_by = people__get_my_entity_id()
         WHERE id = in_report_id;
         
        return TRUE;
    END;
</programlisting>
      </para>
    </section>

<!-- Function reconciliation__get_cleared_balance(in_chart_id integer) -->
    <section id="public.function.reconciliation-get-cleared-balance-in-chart-id-integer"
             xreflabel="publicreconciliation__get_cleared_balance(in_chart_id integer)">
      <title id="public.function.reconciliation-get-cleared-balance-in-chart-id-integer-title">
       reconciliation__get_cleared_balance(in_chart_id integer)
      </title>
      <titleabbrev id="public.function.reconciliation-get-cleared-balance-in-chart-id-integer-titleabbrev">
       reconciliation__get_cleared_balance(in_chart_id integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>numeric</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
	select CASE WHEN c.category = &#39;A&#39; THEN sum(ac.amount) * -1 ELSE
		sum(ac.amount) END
	FROM account c
	JOIN acc_trans ac ON (ac.chart_id = c.id)
	JOIN (select id from ar where approved
		union
		select id from ap where approved
		union
		select id from gl where approved) g on (g.id = ac.trans_id)
	WHERE c.id = $1 AND ac.cleared is true and ac.approved is true
		GROUP BY c.id, c.category;
</programlisting>
      </para>
    </section>

<!-- Function reconciliation__get_current_balance(in_date integer, in_account_id date) -->
    <section id="public.function.reconciliation-get-current-balance-in-date-integer-in-account-id-date"
             xreflabel="publicreconciliation__get_current_balance(in_date integer, in_account_id date)">
      <title id="public.function.reconciliation-get-current-balance-in-date-integer-in-account-id-date-title">
       reconciliation__get_current_balance(in_date integer, in_account_id date)
      </title>
      <titleabbrev id="public.function.reconciliation-get-current-balance-in-date-integer-in-account-id-date-titleabbrev">
       reconciliation__get_current_balance(in_date integer, in_account_id date)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>numeric</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
DECLARE outval NUMERIC;
BEGIN
	SELECT CASE WHEN (select category FROM account WHERE id = in_account_id)
			IN (&#39;A&#39;, &#39;E&#39;) THEN sum(a.amount) * -1
		ELSE sum(a.amount) END
	FROM acc_trans a
	JOIN (
		SELECT id FROM ar
		WHERE approved is true
		UNION
		SELECT id FROM ap
		WHERE approved is true
		UNION
		SELECT id FROM gl
		WHERE approved is true
	) gl ON a.trans_id = gl.id
	WHERE a.approved IS TRUE 
		AND a.chart_id = in_account_id
		AND a.transdate &lt;= in_date;

	RETURN outval;
END;
</programlisting>
      </para>
    </section>

<!-- Function reconciliation__get_total(in_report_id integer) -->
    <section id="public.function.reconciliation-get-total-in-report-id-integer"
             xreflabel="publicreconciliation__get_total(in_report_id integer)">
      <title id="public.function.reconciliation-get-total-in-report-id-integer-title">
       reconciliation__get_total(in_report_id integer)
      </title>
      <titleabbrev id="public.function.reconciliation-get-total-in-report-id-integer-titleabbrev">
       reconciliation__get_total(in_report_id integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>SET OF cr_report</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>

    DECLARE
        row cr_report;
    BEGIN
    
        SELECT * INTO row FROM cr_report 
        where id = in_report_id 
        AND scn = -1;
        
        IF NOT FOUND THEN -- I think this is a fairly major error condition
            RAISE EXCEPTION &#39;Bad report id.&#39;;
        ELSE
            return next row;
        END IF;
    END;

</programlisting>
      </para>
    </section>

<!-- Function reconciliation__new_report_id(in_end_date integer, in_total numeric, in_chart_id date) -->
    <section id="public.function.reconciliation-new-report-id-in-end-date-integer-in-total-numeric-in-chart-id-date"
             xreflabel="publicreconciliation__new_report_id(in_end_date integer, in_total numeric, in_chart_id date)">
      <title id="public.function.reconciliation-new-report-id-in-end-date-integer-in-total-numeric-in-chart-id-date-title">
       reconciliation__new_report_id(in_end_date integer, in_total numeric, in_chart_id date)
      </title>
      <titleabbrev id="public.function.reconciliation-new-report-id-in-end-date-integer-in-total-numeric-in-chart-id-date-titleabbrev">
       reconciliation__new_report_id(in_end_date integer, in_total numeric, in_chart_id date)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>integer</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>

    INSERT INTO cr_report(chart_id, their_total, end_date) values ($1, $2, $3);
    SELECT currval(&#39;cr_report_id_seq&#39;)::int;

</programlisting>
      </para>
    </section>

<!-- Function reconciliation__pending_transactions(in_their_total date, in_report_id integer, in_chart_id integer, in_end_date numeric) -->
    <section id="public.function.reconciliation-pending-transactions-in-their-total-date-in-report-id-integer-in-chart-id-integer-in-end-date-numeric"
             xreflabel="publicreconciliation__pending_transactions(in_their_total date, in_report_id integer, in_chart_id integer, in_end_date numeric)">
      <title id="public.function.reconciliation-pending-transactions-in-their-total-date-in-report-id-integer-in-chart-id-integer-in-end-date-numeric-title">
       reconciliation__pending_transactions(in_their_total date, in_report_id integer, in_chart_id integer, in_end_date numeric)
      </title>
      <titleabbrev id="public.function.reconciliation-pending-transactions-in-their-total-date-in-report-id-integer-in-chart-id-integer-in-end-date-numeric-titleabbrev">
       reconciliation__pending_transactions(in_their_total date, in_report_id integer, in_chart_id integer, in_end_date numeric)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>integer</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
    
    DECLARE
        gl_row RECORD;
    BEGIN
		INSERT INTO cr_report_line (report_id, scn, their_balance, 
			our_balance, &quot;user&quot;, voucher_id, ledger_id, post_date)
		SELECT in_report_id, case when gl.table = &#39;gl&#39; then gl.ref else ac.source end, 0, sum(amount) * -1 AS amount,
				(select entity_id from users 
				where username = CURRENT_USER),
			ac.voucher_id, min(ac.entry_id), ac.transdate
		FROM acc_trans ac
		JOIN transactions t on (ac.trans_id = t.id)
		JOIN (select id, entity_credit_account::text as ref, &#39;ar&#39; as table FROM ar where approved
			UNION
		      select id, entity_credit_account::text, &#39;ap&#39; as table FROM ap WHERE approved
			UNION
		      select id, reference, &#39;gl&#39; as table FROM gl WHERE approved) gl 
			ON (gl.table = t.table_name AND gl.id = t.id)
		LEFT JOIN cr_report_line rl ON (rl.report_id = in_report_id
			AND ((rl.ledger_id = ac.entry_id 
				AND ac.voucher_id IS NULL) 
				OR (rl.voucher_id = ac.voucher_id)))
		WHERE ac.cleared IS FALSE
			AND ac.approved IS TRUE
			AND ac.chart_id = in_chart_id
			AND ac.transdate &lt;= in_end_date
		GROUP BY gl.ref, ac.source, ac.transdate,
			ac.memo, ac.voucher_id, gl.table
		HAVING count(rl.id) = 0;

		UPDATE cr_report set updated = now(),
			their_total = coalesce(in_their_total, their_total)
		where id = in_report_id;
    RETURN in_report_id;
    END;
</programlisting>
      </para>
    </section>

<!-- Function reconciliation__report_approve(in_report_id integer) -->
    <section id="public.function.reconciliation-report-approve-in-report-id-integer"
             xreflabel="publicreconciliation__report_approve(in_report_id integer)">
      <title id="public.function.reconciliation-report-approve-in-report-id-integer-title">
       reconciliation__report_approve(in_report_id integer)
      </title>
      <titleabbrev id="public.function.reconciliation-report-approve-in-report-id-integer-titleabbrev">
       reconciliation__report_approve(in_report_id integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>integer</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
    
    -- Does some basic checks before allowing the approval to go through; 
    -- moves the approval to &quot;cr_report_line&quot;, I guess, or some other &quot;final&quot; table.
    --
    -- Pending may just be a single flag in the database to mark that it is
    -- not finalized. Will need to discuss with Chris.
    
    DECLARE
        current_row RECORD;
        completed cr_report_line;
        total_errors INT;
        in_user TEXT;
	ac_entries int[];
    BEGIN
        in_user := current_user;
        
        -- so far, so good. Different user, and no errors remain. Therefore, 
        -- we can move it to completed reports.
        --
        -- User may not be necessary - I would think it better to use the 
        -- in_user, to note who approved the report, than the user who
        -- filed it. This may require clunkier syntax..
        
        -- 
	ac_entries := &#39;{}&#39;;
        update cr_report set approved = &#39;t&#39;,
		approved_by = person__get_my_entity_id(),
		approved_username = SESSION_USER
	where id = in_report_id;

	FOR current_row IN 
		SELECT compound_array(entries) AS entries FROM (
			select as_array(ac.entry_id) as entries
		FROM acc_trans ac
		JOIN transactions t on (ac.trans_id = t.id)
		JOIN (select id, entity_credit_account::text as ref, &#39;ar&#39; as table FROM ar
			UNION
		      select id, entity_credit_account::text, &#39;ap&#39; as table FROM ap
			UNION
		      select id, reference, &#39;gl&#39; as table FROM gl) gl
			ON (gl.table = t.table_name AND gl.id = t.id)
		LEFT JOIN cr_report_line rl ON (rl.report_id = in_report_id
			AND ((rl.ledger_id = ac.entry_id 
				AND ac.voucher_id IS NULL) 
				OR (rl.voucher_id = ac.voucher_id)) and rl.cleared is true)
		WHERE ac.cleared IS FALSE
			AND ac.chart_id = (select chart_id from cr_report where id = in_report_id)
		GROUP BY gl.ref, ac.source, ac.transdate,
			ac.memo, ac.voucher_id, gl.table
		HAVING count(rl.report_id) &gt; 0) a
	LOOP
		ac_entries := ac_entries || current_row.entries;
	END LOOP;

	UPDATE acc_trans SET cleared = TRUE 
	where entry_id = any(ac_entries);
        
        return 1;        
    END;

</programlisting>
      </para>
    </section>

<!-- Function reconciliation__report_details(in_report_id integer) -->
    <section id="public.function.reconciliation-report-details-in-report-id-integer"
             xreflabel="publicreconciliation__report_details(in_report_id integer)">
      <title id="public.function.reconciliation-report-details-in-report-id-integer-title">
       reconciliation__report_details(in_report_id integer)
      </title>
      <titleabbrev id="public.function.reconciliation-report-details-in-report-id-integer-titleabbrev">
       reconciliation__report_details(in_report_id integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>SET OF cr_report_line</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>

    DECLARE
        row cr_report_line;
    BEGIN    
        FOR row IN 
		select * from cr_report_line where report_id = in_report_id 
		order by scn, post_date
	LOOP
        
            RETURN NEXT row;
        
        END LOOP;    
    END;

</programlisting>
      </para>
    </section>

<!-- Function reconciliation__report_summary(in_report_id integer) -->
    <section id="public.function.reconciliation-report-summary-in-report-id-integer"
             xreflabel="publicreconciliation__report_summary(in_report_id integer)">
      <title id="public.function.reconciliation-report-summary-in-report-id-integer-title">
       reconciliation__report_summary(in_report_id integer)
      </title>
      <titleabbrev id="public.function.reconciliation-report-summary-in-report-id-integer-titleabbrev">
       reconciliation__report_summary(in_report_id integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>cr_report</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>

    DECLARE
        row cr_report;
    BEGIN    
        select * into row from cr_report where id = in_report_id;
        
        RETURN row;
        
    END;

</programlisting>
      </para>
    </section>

<!-- Function reconciliation__save_set(in_line_ids integer, in_report_id integer[]) -->
    <section id="public.function.reconciliation-save-set-in-line-ids-integer-in-report-id-integerARRAY"
             xreflabel="publicreconciliation__save_set(in_line_ids integer, in_report_id integer[])">
      <title id="public.function.reconciliation-save-set-in-line-ids-integer-in-report-id-integerARRAY-title">
       reconciliation__save_set(in_line_ids integer, in_report_id integer[])
      </title>
      <titleabbrev id="public.function.reconciliation-save-set-in-line-ids-integer-in-report-id-integerARRAY-titleabbrev">
       reconciliation__save_set(in_line_ids integer, in_report_id integer[])
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>boolean</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
BEGIN
	UPDATE cr_report_line SET cleared = false
	WHERE report_id = in_report_id;

	UPDATE cr_report_line SET cleared = true
	WHERE report_id = in_report_id AND id = ANY(in_line_ids);
	RETURN found;
END;
</programlisting>
      </para>
    </section>

<!-- Function reconciliation__search(in_approved date, in_submitted date, in_chart_id numeric, in_balance_to numeric, in_balance_from integer, in_date_to boolean, in_date_from boolean) -->
    <section id="public.function.reconciliation-search-in-approved-date-in-submitted-date-in-chart-id-numeric-in-balance-to-numeric-in-balance-from-integer-in-date-to-boolean-in-date-from-boolean"
             xreflabel="publicreconciliation__search(in_approved date, in_submitted date, in_chart_id numeric, in_balance_to numeric, in_balance_from integer, in_date_to boolean, in_date_from boolean)">
      <title id="public.function.reconciliation-search-in-approved-date-in-submitted-date-in-chart-id-numeric-in-balance-to-numeric-in-balance-from-integer-in-date-to-boolean-in-date-from-boolean-title">
       reconciliation__search(in_approved date, in_submitted date, in_chart_id numeric, in_balance_to numeric, in_balance_from integer, in_date_to boolean, in_date_from boolean)
      </title>
      <titleabbrev id="public.function.reconciliation-search-in-approved-date-in-submitted-date-in-chart-id-numeric-in-balance-to-numeric-in-balance-from-integer-in-date-to-boolean-in-date-from-boolean-titleabbrev">
       reconciliation__search(in_approved date, in_submitted date, in_chart_id numeric, in_balance_to numeric, in_balance_from integer, in_date_to boolean, in_date_from boolean)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>SET OF cr_report</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
DECLARE report cr_report;
BEGIN
	FOR report IN
		SELECT r.* FROM cr_report r
		JOIN account c ON (r.chart_id = c.id)
		WHERE 
			(in_date_from IS NULL OR in_date_from &lt;= end_date) and
			(in_date_to IS NULL OR in_date_to &gt;= end_date) AND
			(in_balance_from IS NULL 
				or in_balance_from &lt;= their_total ) AND
			(in_balance_to IS NULL 
				OR in_balance_to &gt;= their_total) AND
			(in_chart_id IS NULL OR in_chart_id = chart_id) AND
			(in_submitted IS NULL or in_submitted = submitted) AND
			(in_approved IS NULL OR in_approved = approved) AND
			(r.deleted IS FALSE)
		ORDER BY c.accno, end_date, their_total
	LOOP
		RETURN NEXT report;
	END LOOP; 
END;
</programlisting>
      </para>
    </section>

<!-- Function reconciliation__submit_set(in_line_ids integer, in_report_id integer[]) -->
    <section id="public.function.reconciliation-submit-set-in-line-ids-integer-in-report-id-integerARRAY"
             xreflabel="publicreconciliation__submit_set(in_line_ids integer, in_report_id integer[])">
      <title id="public.function.reconciliation-submit-set-in-line-ids-integer-in-report-id-integerARRAY-title">
       reconciliation__submit_set(in_line_ids integer, in_report_id integer[])
      </title>
      <titleabbrev id="public.function.reconciliation-submit-set-in-line-ids-integer-in-report-id-integerARRAY-titleabbrev">
       reconciliation__submit_set(in_line_ids integer, in_report_id integer[])
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>boolean</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
BEGIN
	UPDATE cr_report set submitted = true where id = in_report_id;
	PERFORM reconciliation__save_set(in_report_id, in_line_ids);

	RETURN FOUND;
END;
</programlisting>
      </para>
    </section>

<!-- Function report_invoice_aging(in_entity_class integer, in_entity_id integer) -->
    <section id="public.function.report-invoice-aging-in-entity-class-integer-in-entity-id-integer"
             xreflabel="publicreport_invoice_aging(in_entity_class integer, in_entity_id integer)">
      <title id="public.function.report-invoice-aging-in-entity-class-integer-in-entity-id-integer-title">
       report_invoice_aging(in_entity_class integer, in_entity_id integer)
      </title>
      <titleabbrev id="public.function.report-invoice-aging-in-entity-class-integer-in-entity-id-integer-titleabbrev">
       report_invoice_aging(in_entity_class integer, in_entity_id integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>SET OF report_aging_item</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
DECLARE
	item report_aging_item;
BEGIN
	IF in_entity_class = 1 THEN
		FOR item IN
			SELECT c.entity_id, 
			       c.meta_number, e.name,
			       l.line_one as address1, l.line_two as address2, 
			       l.line_three as address3,
			       l.city_province, l.mail_code,
			       country.name as country, 
			       &#39;&#39; as contact_name, &#39;&#39; as email,
		               &#39;&#39; as phone, &#39;&#39; as fax, 
		               a.invnumber, a.transdate, a.till, a.ordnumber, 
			       a.ponumber, a.notes, 
			       CASE WHEN 
			                 EXTRACT(days FROM age(a.transdate)/30) 
			                 = 0
			                 THEN (a.amount - a.paid) ELSE 0 END
			            as c0, 
			       CASE WHEN EXTRACT(days FROM age(a.transdate)/30)
			                 = 1
			                 THEN (a.amount - a.paid) ELSE 0 END
			            as c30, 
			       CASE WHEN EXTRACT(days FROM age(a.transdate)/30)
			                 = 2
			                 THEN (a.amount - a.paid) ELSE 0 END
			            as c60, 
			       CASE WHEN EXTRACT(days FROM age(a.transdate)/30)
			                 &gt; 2
			                 THEN (a.amount - a.paid) ELSE 0 END
			            as c90, 
			       a.duedate, a.id, a.curr,
			       COALESCE((SELECT sell FROM exchangerate ex
			         WHERE a.curr = ex.curr
			              AND ex.transdate = a.transdate), 1)
			       AS exchangerate,
				(SELECT compound_array(ARRAY[[p.partnumber,
						i.description, i.qty::text]])
					FROM parts p 
					JOIN invoice i ON (i.parts_id = p.id)
					WHERE i.trans_id = a.id) AS line_items
			  FROM ap a
			  JOIN entity_credit_account c USING (entity_id)
			  JOIN entity e ON (e.id = c.entity_id)
			 CROSS JOIN location l
			  JOIN country ON (country.id = l.country_id)
			 WHERE a.entity_id like coalesce(in_entity_id::text, &#39;%&#39;)
				AND l.id = (SELECT min(location_id) 
					FROM company_to_location 
					WHERE company_id = (select min(id) 
						FROM company
						WHERE entity_id = c.entity_id))
			ORDER BY entity_id, curr, transdate, invnumber
		LOOP
			return next item;
		END LOOP;
	ELSIF in_entity_class = 2 THEN
		FOR item IN 
			SELECT c.entity_id, 
			       c.meta_number, e.name,
			       l.line_one as address1, l.line_two as address2, 
			       l.line_three as address3,
			       l.city_province, l.mail_code,
			       country.name as country, 
			       &#39;&#39; as contact_name, &#39;&#39; as email,
		               &#39;&#39; as phone, &#39;&#39; as fax, 
		               a.invnumber, a.transdate, a.till, a.ordnumber, 
			       a.ponumber, a.notes, 
			       CASE WHEN 
			                 EXTRACT(days FROM age(a.transdate)/30) 
			                 = 0
			                 THEN (a.amount - a.paid) ELSE 0 END
			            as c0, 
			       CASE WHEN EXTRACT(days FROM age(a.transdate)/30)
			                 = 1
			                 THEN (a.amount - a.paid) ELSE 0 END
			            as c30, 
			       CASE WHEN EXTRACT(days FROM age(a.transdate)/30)
			                 = 2
			                 THEN (a.amount - a.paid) ELSE 0 END
			            as c60, 
			       CASE WHEN EXTRACT(days FROM age(a.transdate)/30)
			                 &gt; 2
			                 THEN (a.amount - a.paid) ELSE 0 END
			            as c90, 
			       a.duedate, a.id, a.curr,
			       (SELECT buy FROM exchangerate ex
			         WHERE a.curr = ex.curr
			              AND ex.transdate = a.transdate) 
			       AS exchangerate,
				(SELECT compound_array(ARRAY[[p.partnumber,
						i.description, i.qty::text]])
					FROM parts p 
					JOIN invoice i ON (i.parts_id = p.id)
					WHERE i.trans_id = a.id) AS line_items
			  FROM ar a
			  JOIN entity_credit_account c USING (entity_id)
			  JOIN entity e ON (e.id = c.entity_id)
			 CROSS JOIN location l
			  JOIN country ON (country.id = l.country_id)
			 WHERE a.entity_id like coalesce(in_entity_id::text, &#39;%&#39;)
				AND l.id = (SELECT min(location_id) 
					FROM company_to_location 
					WHERE company_id = (select min(id) 
						FROM company
						WHERE entity_id = c.entity_id))
			ORDER BY entity_id, curr, transdate, invnumber
		LOOP
			return next item;
		END LOOP;
	ELSE
		RAISE EXCEPTION &#39;Entity Class % unsupported in aging report&#39;, 
			in_entity_class;
	END IF;
END;
</programlisting>
      </para>
    </section>

<!-- Function report_trial_balance(in_gifi date, in_project_id date, in_department_id integer, in_dateto integer, in_datefrom boolean) -->
    <section id="public.function.report-trial-balance-in-gifi-date-in-project-id-date-in-department-id-integer-in-dateto-integer-in-datefrom-boolean"
             xreflabel="publicreport_trial_balance(in_gifi date, in_project_id date, in_department_id integer, in_dateto integer, in_datefrom boolean)">
      <title id="public.function.report-trial-balance-in-gifi-date-in-project-id-date-in-department-id-integer-in-dateto-integer-in-datefrom-boolean-title">
       report_trial_balance(in_gifi date, in_project_id date, in_department_id integer, in_dateto integer, in_datefrom boolean)
      </title>
      <titleabbrev id="public.function.report-trial-balance-in-gifi-date-in-project-id-date-in-department-id-integer-in-dateto-integer-in-datefrom-boolean-titleabbrev">
       report_trial_balance(in_gifi date, in_project_id date, in_department_id integer, in_dateto integer, in_datefrom boolean)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>SET OF trial_balance_line</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
DECLARE out_row trial_balance_line;
BEGIN
	IF in_department_id IS NULL THEN
		FOR out_row IN
			SELECT c.id, c.accno, c.description, 
				SUM(CASE WHEN ac.transdate &lt; in_datefrom 
				              AND c.category IN (&#39;I&#39;, &#39;L&#39;, &#39;Q&#39;)
				    THEN ac.amount
				    ELSE ac.amount * -1
				    END), 
			        SUM(CASE WHEN ac.transdate &gt;= in_date_from 
				              AND ac.amount &gt; 0 
			            THEN ac.amount
			            ELSE 0 END),
			        SUM(CASE WHEN ac.transdate &gt;= in_date_from 
				              AND ac.amount &lt; 0
			            THEN ac.amount
			            ELSE 0 END) * -1,
				SUM(CASE WHEN ac.transdate &gt;= in_date_from
					AND c.charttype IN (&#39;I&#39;)
				    THEN ac.amount
				    WHEN ac.transdate &gt;= in_date_from
				              AND c.category IN (&#39;I&#39;, &#39;L&#39;, &#39;Q&#39;)
				    THEN ac.amount
				    ELSE ac.amount * -1
				    END)
				FROM acc_trans ac
				JOIN (select id, approved FROM ap
					UNION ALL 
					select id, approved FROM gl
					UNION ALL
					select id, approved FROM ar) g
					ON (g.id = ac.trans_id)
				JOIN chart c ON (c.id = ac.chart_id)
				WHERE ac.transdate &lt;= in_date_to
					AND ac.approved AND g.approved
					AND (in_project_id IS NULL 
						OR in_project_id = ac.project_id)
				GROUP BY c.id, c.accno, c.description
				ORDER BY c.accno
				
		LOOP
			RETURN NEXT out_row;
		END LOOP;
	ELSE 
		FOR out_row IN
			SELECT 1
		LOOP
			RETURN NEXT out_row;
		END LOOP;
	END IF;
END;
</programlisting>
      </para>
    </section>

<!-- Function reset_tsearch() -->
    <section id="public.function.reset-tsearch"
             xreflabel="publicreset_tsearch()">
      <title id="public.function.reset-tsearch-title">
       reset_tsearch()
      </title>
      <titleabbrev id="public.function.reset-tsearch-titleabbrev">
       reset_tsearch()
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>void</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>tsa_reset_tsearch</programlisting>
      </para>
    </section>

<!-- Function rewrite(tsquery, text) -->
    <section id="public.function.rewrite-tsquery-text"
             xreflabel="publicrewrite(tsquery, text)">
      <title id="public.function.rewrite-tsquery-text-title">
       rewrite(tsquery, text)
      </title>
      <titleabbrev id="public.function.rewrite-tsquery-text-titleabbrev">
       rewrite(tsquery, text)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>INTERNAL</seg>
         <seg>tsquery</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>tsquery_rewrite_query</programlisting>
      </para>
    </section>

<!-- Function rewrite(tsquery, tsquery, tsquery) -->
    <section id="public.function.rewrite-tsquery-tsquery-tsquery"
             xreflabel="publicrewrite(tsquery, tsquery, tsquery)">
      <title id="public.function.rewrite-tsquery-tsquery-tsquery-title">
       rewrite(tsquery, tsquery, tsquery)
      </title>
      <titleabbrev id="public.function.rewrite-tsquery-tsquery-tsquery-titleabbrev">
       rewrite(tsquery, tsquery, tsquery)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>INTERNAL</seg>
         <seg>tsquery</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>tsquery_rewrite</programlisting>
      </para>
    </section>

<!-- Function rewrite(tsquery[]) -->
    <section id="public.function.rewrite-tsqueryARRAY"
             xreflabel="publicrewrite(tsquery[])">
      <title id="public.function.rewrite-tsqueryARRAY-title">
       rewrite(tsquery[])
      </title>
      <titleabbrev id="public.function.rewrite-tsqueryARRAY-titleabbrev">
       rewrite(tsquery[])
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>INTERNAL</seg>
         <seg>tsquery</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>aggregate_dummy</programlisting>
      </para>
    </section>

<!-- Function rewrite_accum(tsquery, tsquery[]) -->
    <section id="public.function.rewrite-accum-tsquery-tsqueryARRAY"
             xreflabel="publicrewrite_accum(tsquery, tsquery[])">
      <title id="public.function.rewrite-accum-tsquery-tsqueryARRAY-title">
       rewrite_accum(tsquery, tsquery[])
      </title>
      <titleabbrev id="public.function.rewrite-accum-tsquery-tsqueryARRAY-titleabbrev">
       rewrite_accum(tsquery, tsquery[])
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>tsquery</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>tsa_rewrite_accum</programlisting>
      </para>
    </section>

<!-- Function rewrite_finish(tsquery) -->
    <section id="public.function.rewrite-finish-tsquery"
             xreflabel="publicrewrite_finish(tsquery)">
      <title id="public.function.rewrite-finish-tsquery-title">
       rewrite_finish(tsquery)
      </title>
      <titleabbrev id="public.function.rewrite-finish-tsquery-titleabbrev">
       rewrite_finish(tsquery)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>tsquery</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>tsa_rewrite_finish</programlisting>
      </para>
    </section>

<!-- Function save_taxform(in_taxform_name integer, in_country_code text) -->
    <section id="public.function.save-taxform-in-taxform-name-integer-in-country-code-text"
             xreflabel="publicsave_taxform(in_taxform_name integer, in_country_code text)">
      <title id="public.function.save-taxform-in-taxform-name-integer-in-country-code-text-title">
       save_taxform(in_taxform_name integer, in_country_code text)
      </title>
      <titleabbrev id="public.function.save-taxform-in-taxform-name-integer-in-country-code-text-titleabbrev">
       save_taxform(in_taxform_name integer, in_country_code text)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>boolean</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
BEGIN
	INSERT INTO country_tax_form(country_id, form_name) 
	values (in_country_code, in_taxform_name);

	RETURN true;
END;
</programlisting>
      </para>
    </section>

<!-- Function session_check(in_token integer, in_session_id text) -->
    <section id="public.function.session-check-in-token-integer-in-session-id-text"
             xreflabel="publicsession_check(in_token integer, in_session_id text)">
      <title id="public.function.session-check-in-token-integer-in-session-id-text-title">
       session_check(in_token integer, in_session_id text)
      </title>
      <titleabbrev id="public.function.session-check-in-token-integer-in-session-id-text-titleabbrev">
       session_check(in_token integer, in_session_id text)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>session</seg>
        </seglistitem>
       </segmentedlist>
 
        Return code is 0 for failure, 1 for success. 
        <programlisting>
DECLARE out_row session%ROWTYPE;
BEGIN
	DELETE FROM session
	 WHERE last_used &lt; now() - coalesce((SELECT value FROM defaults
                                    WHERE setting_key = &#39;timeout&#39;)::interval,
	                            &#39;90 minutes&#39;::interval);
        UPDATE session 
           SET last_used = now()
         WHERE session_id = in_session_id
               AND token = in_token
               AND last_used &gt; now() - (SELECT value FROM defaults
				WHERE setting_key = &#39;timeout&#39;)::interval
	       AND users_id = (select id from users 
			where username = SESSION_USER);
	IF FOUND THEN
		SELECT * INTO out_row FROM session WHERE session_id = in_session_id;
	ELSE
		DELETE FROM SESSION 
		WHERE users_id IN (select id from users
                        where username = SESSION_USER); 
		-- the above query also releases all discretionary locks by the
                -- session

		IF NOT FOUND THEN
			PERFORM id FROM users WHERE username = SESSION_USER;
			IF NOT FOUND THEN
				RAISE EXCEPTION &#39;User Not Known&#39;;
			END IF;
			
		END IF;
		INSERT INTO session(users_id, token, last_used, transaction_id)
		SELECT id, md5(random()::text), now(), 0 
		  FROM users WHERE username = SESSION_USER;
		-- TODO-- remove transaction_id field from session table

		SELECT * INTO out_row FROM session 
		 WHERE session_id = currval(&#39;session_session_id_seq&#39;);
	END IF;
	RETURN out_row;
END;
</programlisting>
      </para>
    </section>

<!-- Function set_curcfg(integer) -->
    <section id="public.function.set-curcfg-integer"
             xreflabel="publicset_curcfg(integer)">
      <title id="public.function.set-curcfg-integer-title">
       set_curcfg(integer)
      </title>
      <titleabbrev id="public.function.set-curcfg-integer-titleabbrev">
       set_curcfg(integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>void</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>tsa_set_curcfg</programlisting>
      </para>
    </section>

<!-- Function set_curcfg(text) -->
    <section id="public.function.set-curcfg-text"
             xreflabel="publicset_curcfg(text)">
      <title id="public.function.set-curcfg-text-title">
       set_curcfg(text)
      </title>
      <titleabbrev id="public.function.set-curcfg-text-titleabbrev">
       set_curcfg(text)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>void</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>tsa_set_curcfg_byname</programlisting>
      </para>
    </section>

<!-- Function set_curdict(integer) -->
    <section id="public.function.set-curdict-integer"
             xreflabel="publicset_curdict(integer)">
      <title id="public.function.set-curdict-integer-title">
       set_curdict(integer)
      </title>
      <titleabbrev id="public.function.set-curdict-integer-titleabbrev">
       set_curdict(integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>void</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>tsa_set_curdict</programlisting>
      </para>
    </section>

<!-- Function set_curdict(text) -->
    <section id="public.function.set-curdict-text"
             xreflabel="publicset_curdict(text)">
      <title id="public.function.set-curdict-text-title">
       set_curdict(text)
      </title>
      <titleabbrev id="public.function.set-curdict-text-titleabbrev">
       set_curdict(text)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>void</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>tsa_set_curdict_byname</programlisting>
      </para>
    </section>

<!-- Function set_curprs(integer) -->
    <section id="public.function.set-curprs-integer"
             xreflabel="publicset_curprs(integer)">
      <title id="public.function.set-curprs-integer-title">
       set_curprs(integer)
      </title>
      <titleabbrev id="public.function.set-curprs-integer-titleabbrev">
       set_curprs(integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>void</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>tsa_set_curprs</programlisting>
      </para>
    </section>

<!-- Function set_curprs(text) -->
    <section id="public.function.set-curprs-text"
             xreflabel="publicset_curprs(text)">
      <title id="public.function.set-curprs-text-title">
       set_curprs(text)
      </title>
      <titleabbrev id="public.function.set-curprs-text-titleabbrev">
       set_curprs(text)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>void</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>tsa_set_curprs_byname</programlisting>
      </para>
    </section>

<!-- Function set_limit(real) -->
    <section id="public.function.set-limit-real"
             xreflabel="publicset_limit(real)">
      <title id="public.function.set-limit-real-title">
       set_limit(real)
      </title>
      <titleabbrev id="public.function.set-limit-real-titleabbrev">
       set_limit(real)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>real</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>set_limit</programlisting>
      </para>
    </section>

<!-- Function setting__get_currencies() -->
    <section id="public.function.setting-get-currencies"
             xreflabel="publicsetting__get_currencies()">
      <title id="public.function.setting-get-currencies-title">
       setting__get_currencies()
      </title>
      <titleabbrev id="public.function.setting-get-currencies-titleabbrev">
       setting__get_currencies()
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>text[]</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
SELECT string_to_array(value, &#39;:&#39;) from defaults where setting_key = &#39;curr&#39;;
</programlisting>
      </para>
    </section>

<!-- Function setting_get(in_key character varying) -->
    <section id="public.function.setting-get-in-key-character-varying"
             xreflabel="publicsetting_get(in_key character varying)">
      <title id="public.function.setting-get-in-key-character-varying-title">
       setting_get(in_key character varying)
      </title>
      <titleabbrev id="public.function.setting-get-in-key-character-varying-titleabbrev">
       setting_get(in_key character varying)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>character varying</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
DECLARE
	out_value varchar;
BEGIN
	SELECT value INTO out_value FROM defaults WHERE setting_key = in_key;
	RETURN out_value;
END;
</programlisting>
      </para>
    </section>

<!-- Function setting_get_default_accounts() -->
    <section id="public.function.setting-get-default-accounts"
             xreflabel="publicsetting_get_default_accounts()">
      <title id="public.function.setting-get-default-accounts-title">
       setting_get_default_accounts()
      </title>
      <titleabbrev id="public.function.setting-get-default-accounts-titleabbrev">
       setting_get_default_accounts()
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>SET OF defaults</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
DECLARE
	account defaults%ROWTYPE;
BEGIN
	FOR account IN 
		SELECT * FROM defaults 
		WHERE setting_key like &#39;%accno_id&#39;
	LOOP
		RETURN NEXT account;
	END LOOP;
END;
</programlisting>
      </para>
    </section>

<!-- Function setting_increment(in_key character varying) -->
    <section id="public.function.setting-increment-in-key-character-varying"
             xreflabel="publicsetting_increment(in_key character varying)">
      <title id="public.function.setting-increment-in-key-character-varying-title">
       setting_increment(in_key character varying)
      </title>
      <titleabbrev id="public.function.setting-increment-in-key-character-varying-titleabbrev">
       setting_increment(in_key character varying)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>character varying</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
DECLARE
	base_value VARCHAR;
	raw_value VARCHAR;
	increment INTEGER;
	inc_length INTEGER;
	new_value VARCHAR;
BEGIN
	SELECT value INTO raw_value FROM defaults 
	WHERE setting_key = in_key
	FOR UPDATE;

	SELECT substring(raw_value from  &#39;(&#39; || E&#39;\\&#39; || &#39;d*)(&#39; || E&#39;\\&#39; || &#39;D*|&lt;&#39; || E&#39;\\&#39; || &#39;?lsmb [^&lt;&gt;] &#39; || E&#39;\\&#39; || &#39;?&gt;)*$&#39;)
	INTO base_value;

	IF base_value like &#39;0%&#39; THEN
		increment := base_value::integer + 1;
		SELECT char_length(increment::text) INTO inc_length;

		SELECT overlay(base_value placing increment::varchar
			from (select char_length(base_value) 
				- inc_length + 1) for inc_length)
		INTO new_value;
	ELSE
		new_value := base_value::integer + 1;
	END IF;
	SELECT regexp_replace(raw_value, base_value, new_value) INTO new_value;
	UPDATE defaults SET value = new_value WHERE setting_key = in_key;

	return new_value;	
END;
</programlisting>
      </para>
    </section>

<!-- Function setting_set(in_value character varying, in_key character varying) -->
    <section id="public.function.setting-set-in-value-character-varying-in-key-character-varying"
             xreflabel="publicsetting_set(in_value character varying, in_key character varying)">
      <title id="public.function.setting-set-in-value-character-varying-in-key-character-varying-title">
       setting_set(in_value character varying, in_key character varying)
      </title>
      <titleabbrev id="public.function.setting-set-in-value-character-varying-in-key-character-varying-titleabbrev">
       setting_set(in_value character varying, in_key character varying)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>void</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
BEGIN
	UPDATE defaults SET value = in_value WHERE setting_key = in_key;
	RETURN;
END;
</programlisting>
      </para>
    </section>

<!-- Function setweight(tsvector, "char") -->
    <section id="public.function.setweight-tsvector-char"
             xreflabel="publicsetweight(tsvector, &quot;char&quot;)">
      <title id="public.function.setweight-tsvector-char-title">
       setweight(tsvector, &quot;char&quot;)
      </title>
      <titleabbrev id="public.function.setweight-tsvector-char-titleabbrev">
       setweight(tsvector, &quot;char&quot;)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>INTERNAL</seg>
         <seg>tsvector</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>tsvector_setweight</programlisting>
      </para>
    </section>

<!-- Function show_curcfg() -->
    <section id="public.function.show-curcfg"
             xreflabel="publicshow_curcfg()">
      <title id="public.function.show-curcfg-title">
       show_curcfg()
      </title>
      <titleabbrev id="public.function.show-curcfg-titleabbrev">
       show_curcfg()
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>INTERNAL</seg>
         <seg>oid</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>get_current_ts_config</programlisting>
      </para>
    </section>

<!-- Function show_limit() -->
    <section id="public.function.show-limit"
             xreflabel="publicshow_limit()">
      <title id="public.function.show-limit-title">
       show_limit()
      </title>
      <titleabbrev id="public.function.show-limit-titleabbrev">
       show_limit()
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>real</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>show_limit</programlisting>
      </para>
    </section>

<!-- Function show_trgm(text) -->
    <section id="public.function.show-trgm-text"
             xreflabel="publicshow_trgm(text)">
      <title id="public.function.show-trgm-text-title">
       show_trgm(text)
      </title>
      <titleabbrev id="public.function.show-trgm-text-titleabbrev">
       show_trgm(text)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>text[]</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>show_trgm</programlisting>
      </para>
    </section>

<!-- Function similarity(text, text) -->
    <section id="public.function.similarity-text-text"
             xreflabel="publicsimilarity(text, text)">
      <title id="public.function.similarity-text-text-title">
       similarity(text, text)
      </title>
      <titleabbrev id="public.function.similarity-text-text-titleabbrev">
       similarity(text, text)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>real</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>similarity</programlisting>
      </para>
    </section>

<!-- Function similarity_op(text, text) -->
    <section id="public.function.similarity-op-text-text"
             xreflabel="publicsimilarity_op(text, text)">
      <title id="public.function.similarity-op-text-text-title">
       similarity_op(text, text)
      </title>
      <titleabbrev id="public.function.similarity-op-text-text-titleabbrev">
       similarity_op(text, text)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>boolean</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>similarity_op</programlisting>
      </para>
    </section>

<!-- Function snb_en_init(internal) -->
    <section id="public.function.snb-en-init-internal"
             xreflabel="publicsnb_en_init(internal)">
      <title id="public.function.snb-en-init-internal-title">
       snb_en_init(internal)
      </title>
      <titleabbrev id="public.function.snb-en-init-internal-titleabbrev">
       snb_en_init(internal)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>internal</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>tsa_snb_en_init</programlisting>
      </para>
    </section>

<!-- Function snb_lexize(internal, internal, integer) -->
    <section id="public.function.snb-lexize-internal-internal-integer"
             xreflabel="publicsnb_lexize(internal, internal, integer)">
      <title id="public.function.snb-lexize-internal-internal-integer-title">
       snb_lexize(internal, internal, integer)
      </title>
      <titleabbrev id="public.function.snb-lexize-internal-internal-integer-titleabbrev">
       snb_lexize(internal, internal, integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>internal</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>tsa_snb_lexize</programlisting>
      </para>
    </section>

<!-- Function snb_ru_init(internal) -->
    <section id="public.function.snb-ru-init-internal"
             xreflabel="publicsnb_ru_init(internal)">
      <title id="public.function.snb-ru-init-internal-title">
       snb_ru_init(internal)
      </title>
      <titleabbrev id="public.function.snb-ru-init-internal-titleabbrev">
       snb_ru_init(internal)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>internal</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>tsa_snb_ru_init</programlisting>
      </para>
    </section>

<!-- Function snb_ru_init_koi8(internal) -->
    <section id="public.function.snb-ru-init-koi8-internal"
             xreflabel="publicsnb_ru_init_koi8(internal)">
      <title id="public.function.snb-ru-init-koi8-internal-title">
       snb_ru_init_koi8(internal)
      </title>
      <titleabbrev id="public.function.snb-ru-init-koi8-internal-titleabbrev">
       snb_ru_init_koi8(internal)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>internal</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>tsa_snb_ru_init_koi8</programlisting>
      </para>
    </section>

<!-- Function snb_ru_init_utf8(internal) -->
    <section id="public.function.snb-ru-init-utf8-internal"
             xreflabel="publicsnb_ru_init_utf8(internal)">
      <title id="public.function.snb-ru-init-utf8-internal-title">
       snb_ru_init_utf8(internal)
      </title>
      <titleabbrev id="public.function.snb-ru-init-utf8-internal-titleabbrev">
       snb_ru_init_utf8(internal)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>internal</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>tsa_snb_ru_init_utf8</programlisting>
      </para>
    </section>

<!-- Function spell_init(internal) -->
    <section id="public.function.spell-init-internal"
             xreflabel="publicspell_init(internal)">
      <title id="public.function.spell-init-internal-title">
       spell_init(internal)
      </title>
      <titleabbrev id="public.function.spell-init-internal-titleabbrev">
       spell_init(internal)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>internal</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>tsa_spell_init</programlisting>
      </para>
    </section>

<!-- Function spell_lexize(internal, internal, integer) -->
    <section id="public.function.spell-lexize-internal-internal-integer"
             xreflabel="publicspell_lexize(internal, internal, integer)">
      <title id="public.function.spell-lexize-internal-internal-integer-title">
       spell_lexize(internal, internal, integer)
      </title>
      <titleabbrev id="public.function.spell-lexize-internal-internal-integer-titleabbrev">
       spell_lexize(internal, internal, integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>internal</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>tsa_spell_lexize</programlisting>
      </para>
    </section>

<!-- Function stat(text) -->
    <section id="public.function.stat-text"
             xreflabel="publicstat(text)">
      <title id="public.function.stat-text-title">
       stat(text)
      </title>
      <titleabbrev id="public.function.stat-text-titleabbrev">
       stat(text)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>INTERNAL</seg>
         <seg>SET OF statinfo</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>ts_stat1</programlisting>
      </para>
    </section>

<!-- Function stat(text, text) -->
    <section id="public.function.stat-text-text"
             xreflabel="publicstat(text, text)">
      <title id="public.function.stat-text-text-title">
       stat(text, text)
      </title>
      <titleabbrev id="public.function.stat-text-text-titleabbrev">
       stat(text, text)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>INTERNAL</seg>
         <seg>SET OF statinfo</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>ts_stat2</programlisting>
      </para>
    </section>

<!-- Function strip(tsvector) -->
    <section id="public.function.strip-tsvector"
             xreflabel="publicstrip(tsvector)">
      <title id="public.function.strip-tsvector-title">
       strip(tsvector)
      </title>
      <titleabbrev id="public.function.strip-tsvector-titleabbrev">
       strip(tsvector)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>INTERNAL</seg>
         <seg>tsvector</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>tsvector_strip</programlisting>
      </para>
    </section>

<!-- Function syn_init(internal) -->
    <section id="public.function.syn-init-internal"
             xreflabel="publicsyn_init(internal)">
      <title id="public.function.syn-init-internal-title">
       syn_init(internal)
      </title>
      <titleabbrev id="public.function.syn-init-internal-titleabbrev">
       syn_init(internal)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>internal</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>tsa_syn_init</programlisting>
      </para>
    </section>

<!-- Function syn_lexize(internal, internal, integer) -->
    <section id="public.function.syn-lexize-internal-internal-integer"
             xreflabel="publicsyn_lexize(internal, internal, integer)">
      <title id="public.function.syn-lexize-internal-internal-integer-title">
       syn_lexize(internal, internal, integer)
      </title>
      <titleabbrev id="public.function.syn-lexize-internal-internal-integer-titleabbrev">
       syn_lexize(internal, internal, integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>internal</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>tsa_syn_lexize</programlisting>
      </para>
    </section>

<!-- Function thesaurus_init(internal) -->
    <section id="public.function.thesaurus-init-internal"
             xreflabel="publicthesaurus_init(internal)">
      <title id="public.function.thesaurus-init-internal-title">
       thesaurus_init(internal)
      </title>
      <titleabbrev id="public.function.thesaurus-init-internal-titleabbrev">
       thesaurus_init(internal)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>internal</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>tsa_thesaurus_init</programlisting>
      </para>
    </section>

<!-- Function thesaurus_lexize(internal, internal, integer, internal) -->
    <section id="public.function.thesaurus-lexize-internal-internal-integer-internal"
             xreflabel="publicthesaurus_lexize(internal, internal, integer, internal)">
      <title id="public.function.thesaurus-lexize-internal-internal-integer-internal-title">
       thesaurus_lexize(internal, internal, integer, internal)
      </title>
      <titleabbrev id="public.function.thesaurus-lexize-internal-internal-integer-internal-titleabbrev">
       thesaurus_lexize(internal, internal, integer, internal)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>internal</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>tsa_thesaurus_lexize</programlisting>
      </para>
    </section>

<!-- Function to_tsquery(oid, text) -->
    <section id="public.function.to-tsquery-oid-text"
             xreflabel="publicto_tsquery(oid, text)">
      <title id="public.function.to-tsquery-oid-text-title">
       to_tsquery(oid, text)
      </title>
      <titleabbrev id="public.function.to-tsquery-oid-text-titleabbrev">
       to_tsquery(oid, text)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>INTERNAL</seg>
         <seg>tsquery</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>to_tsquery_byid</programlisting>
      </para>
    </section>

<!-- Function to_tsquery(text) -->
    <section id="public.function.to-tsquery-text"
             xreflabel="publicto_tsquery(text)">
      <title id="public.function.to-tsquery-text-title">
       to_tsquery(text)
      </title>
      <titleabbrev id="public.function.to-tsquery-text-titleabbrev">
       to_tsquery(text)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>INTERNAL</seg>
         <seg>tsquery</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>to_tsquery</programlisting>
      </para>
    </section>

<!-- Function to_tsquery(text, text) -->
    <section id="public.function.to-tsquery-text-text"
             xreflabel="publicto_tsquery(text, text)">
      <title id="public.function.to-tsquery-text-text-title">
       to_tsquery(text, text)
      </title>
      <titleabbrev id="public.function.to-tsquery-text-text-titleabbrev">
       to_tsquery(text, text)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>tsquery</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>tsa_to_tsquery_name</programlisting>
      </para>
    </section>

<!-- Function to_tsvector(oid, text) -->
    <section id="public.function.to-tsvector-oid-text"
             xreflabel="publicto_tsvector(oid, text)">
      <title id="public.function.to-tsvector-oid-text-title">
       to_tsvector(oid, text)
      </title>
      <titleabbrev id="public.function.to-tsvector-oid-text-titleabbrev">
       to_tsvector(oid, text)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>INTERNAL</seg>
         <seg>tsvector</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>to_tsvector_byid</programlisting>
      </para>
    </section>

<!-- Function to_tsvector(text) -->
    <section id="public.function.to-tsvector-text"
             xreflabel="publicto_tsvector(text)">
      <title id="public.function.to-tsvector-text-title">
       to_tsvector(text)
      </title>
      <titleabbrev id="public.function.to-tsvector-text-titleabbrev">
       to_tsvector(text)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>INTERNAL</seg>
         <seg>tsvector</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>to_tsvector</programlisting>
      </para>
    </section>

<!-- Function to_tsvector(text, text) -->
    <section id="public.function.to-tsvector-text-text"
             xreflabel="publicto_tsvector(text, text)">
      <title id="public.function.to-tsvector-text-text-title">
       to_tsvector(text, text)
      </title>
      <titleabbrev id="public.function.to-tsvector-text-text-titleabbrev">
       to_tsvector(text, text)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>tsvector</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>tsa_to_tsvector_name</programlisting>
      </para>
    </section>

<!-- Function token_type() -->
    <section id="public.function.token-type"
             xreflabel="publictoken_type()">
      <title id="public.function.token-type-title">
       token_type()
      </title>
      <titleabbrev id="public.function.token-type-titleabbrev">
       token_type()
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>SET OF tokentype</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>tsa_token_type_current</programlisting>
      </para>
    </section>

<!-- Function token_type(integer) -->
    <section id="public.function.token-type-integer"
             xreflabel="publictoken_type(integer)">
      <title id="public.function.token-type-integer-title">
       token_type(integer)
      </title>
      <titleabbrev id="public.function.token-type-integer-titleabbrev">
       token_type(integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>INTERNAL</seg>
         <seg>SET OF tokentype</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>ts_token_type_byid</programlisting>
      </para>
    </section>

<!-- Function token_type(text) -->
    <section id="public.function.token-type-text"
             xreflabel="publictoken_type(text)">
      <title id="public.function.token-type-text-title">
       token_type(text)
      </title>
      <titleabbrev id="public.function.token-type-text-titleabbrev">
       token_type(text)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>INTERNAL</seg>
         <seg>SET OF tokentype</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>ts_token_type_byname</programlisting>
      </para>
    </section>

<!-- Function track_global_sequence() -->
    <section id="public.function.track-global-sequence"
             xreflabel="publictrack_global_sequence()">
      <title id="public.function.track-global-sequence-title">
       track_global_sequence()
      </title>
      <titleabbrev id="public.function.track-global-sequence-titleabbrev">
       track_global_sequence()
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>trigger</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
BEGIN
	IF tg_op = &#39;INSERT&#39; THEN
		INSERT INTO transactions (id, table_name) 
		VALUES (new.id, TG_RELNAME);
	ELSEIF tg_op = &#39;UPDATE&#39; THEN
		IF new.id = old.id THEN
			return new;
		ELSE
			UPDATE transactions SET id = new.id WHERE id = old.id;
		END IF;
	ELSE 
		DELETE FROM transactions WHERE id = old.id;
	END IF;
	RETURN new;
END;
</programlisting>
      </para>
    </section>

<!-- Function trigger_parts_short() -->
    <section id="public.function.trigger-parts-short"
             xreflabel="publictrigger_parts_short()">
      <title id="public.function.trigger-parts-short-title">
       trigger_parts_short()
      </title>
      <titleabbrev id="public.function.trigger-parts-short-titleabbrev">
       trigger_parts_short()
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>trigger</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
BEGIN
  IF NEW.onhand &gt;= NEW.rop THEN
    NOTIFY parts_short;
  END IF;
  RETURN NEW;
END;
</programlisting>
      </para>
    </section>

<!-- Function trigger_pending_job() -->
    <section id="public.function.trigger-pending-job"
             xreflabel="publictrigger_pending_job()">
      <title id="public.function.trigger-pending-job-title">
       trigger_pending_job()
      </title>
      <titleabbrev id="public.function.trigger-pending-job-titleabbrev">
       trigger_pending_job()
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>trigger</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
BEGIN
  IF NEW.success IS NULL THEN
    NOTIFY job_entered;
  END IF;
  RETURN NEW;
END;
</programlisting>
      </para>
    </section>

<!-- Function ts_debug(text) -->
    <section id="public.function.ts-debug-text"
             xreflabel="publicts_debug(text)">
      <title id="public.function.ts-debug-text-title">
       ts_debug(text)
      </title>
      <titleabbrev id="public.function.ts-debug-text-titleabbrev">
       ts_debug(text)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>SET OF tsdebug</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
select
        (select c.cfgname::text from pg_catalog.pg_ts_config as c
         where c.oid = show_curcfg()),
        t.alias as tok_type,
        t.descr as description,
        p.token,
        ARRAY ( SELECT m.mapdict::pg_catalog.regdictionary::pg_catalog.text
                FROM pg_catalog.pg_ts_config_map AS m
                WHERE m.mapcfg = show_curcfg() AND m.maptokentype = p.tokid
                ORDER BY m.mapseqno )
        AS dict_name,
        strip(to_tsvector(p.token)) as tsvector
from
        parse( _get_parser_from_curcfg(), $1 ) as p,
        token_type() as t
where
        t.tokid = p.tokid
</programlisting>
      </para>
    </section>

<!-- Function tsearch2() -->
    <section id="public.function.tsearch2"
             xreflabel="publictsearch2()">
      <title id="public.function.tsearch2-title">
       tsearch2()
      </title>
      <titleabbrev id="public.function.tsearch2-titleabbrev">
       tsearch2()
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>trigger</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>tsa_tsearch2</programlisting>
      </para>
    </section>

<!-- Function tsq_mcontained(tsquery, tsquery) -->
    <section id="public.function.tsq-mcontained-tsquery-tsquery"
             xreflabel="publictsq_mcontained(tsquery, tsquery)">
      <title id="public.function.tsq-mcontained-tsquery-tsquery-title">
       tsq_mcontained(tsquery, tsquery)
      </title>
      <titleabbrev id="public.function.tsq-mcontained-tsquery-tsquery-titleabbrev">
       tsq_mcontained(tsquery, tsquery)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>INTERNAL</seg>
         <seg>boolean</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>tsq_mcontained</programlisting>
      </para>
    </section>

<!-- Function tsq_mcontains(tsquery, tsquery) -->
    <section id="public.function.tsq-mcontains-tsquery-tsquery"
             xreflabel="publictsq_mcontains(tsquery, tsquery)">
      <title id="public.function.tsq-mcontains-tsquery-tsquery-title">
       tsq_mcontains(tsquery, tsquery)
      </title>
      <titleabbrev id="public.function.tsq-mcontains-tsquery-tsquery-titleabbrev">
       tsq_mcontains(tsquery, tsquery)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>INTERNAL</seg>
         <seg>boolean</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>tsq_mcontains</programlisting>
      </para>
    </section>

<!-- Function tsquery_and(tsquery, tsquery) -->
    <section id="public.function.tsquery-and-tsquery-tsquery"
             xreflabel="publictsquery_and(tsquery, tsquery)">
      <title id="public.function.tsquery-and-tsquery-tsquery-title">
       tsquery_and(tsquery, tsquery)
      </title>
      <titleabbrev id="public.function.tsquery-and-tsquery-tsquery-titleabbrev">
       tsquery_and(tsquery, tsquery)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>INTERNAL</seg>
         <seg>tsquery</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>tsquery_and</programlisting>
      </para>
    </section>

<!-- Function tsquery_not(tsquery) -->
    <section id="public.function.tsquery-not-tsquery"
             xreflabel="publictsquery_not(tsquery)">
      <title id="public.function.tsquery-not-tsquery-title">
       tsquery_not(tsquery)
      </title>
      <titleabbrev id="public.function.tsquery-not-tsquery-titleabbrev">
       tsquery_not(tsquery)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>INTERNAL</seg>
         <seg>tsquery</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>tsquery_not</programlisting>
      </para>
    </section>

<!-- Function tsquery_or(tsquery, tsquery) -->
    <section id="public.function.tsquery-or-tsquery-tsquery"
             xreflabel="publictsquery_or(tsquery, tsquery)">
      <title id="public.function.tsquery-or-tsquery-tsquery-title">
       tsquery_or(tsquery, tsquery)
      </title>
      <titleabbrev id="public.function.tsquery-or-tsquery-tsquery-titleabbrev">
       tsquery_or(tsquery, tsquery)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>INTERNAL</seg>
         <seg>tsquery</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>tsquery_or</programlisting>
      </para>
    </section>

<!-- Function unlock(in_id integer) -->
    <section id="public.function.unlock-in-id-integer"
             xreflabel="publicunlock(in_id integer)">
      <title id="public.function.unlock-in-id-integer-title">
       unlock(in_id integer)
      </title>
      <titleabbrev id="public.function.unlock-in-id-integer-titleabbrev">
       unlock(in_id integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>boolean</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
BEGIN
    UPDATE transactions SET locked_by = NULL WHERE id = in_id 
           AND locked_by IN (SELECT session_id FROM session WHERE users_id =
		(SELECT id FROM users WHERE username = SESSION_USER));
    RETURN FOUND;
END;
</programlisting>
      </para>
    </section>

<!-- Function unlock_all() -->
    <section id="public.function.unlock-all"
             xreflabel="publicunlock_all()">
      <title id="public.function.unlock-all-title">
       unlock_all()
      </title>
      <titleabbrev id="public.function.unlock-all-titleabbrev">
       unlock_all()
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>boolean</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
BEGIN
    UPDATE transactions SET locked_by = NULL 
    where locked_by IN 
          (select session_id from session WHERE users_id = 
                  (SELECT id FROM users WHERE username = SESSION_USER));

    RETURN FOUND;
END;
</programlisting>
      </para>
    </section>

<!-- Function user__change_password(in_new_password text) -->
    <section id="public.function.user-change-password-in-new-password-text"
             xreflabel="publicuser__change_password(in_new_password text)">
      <title id="public.function.user-change-password-in-new-password-text-title">
       user__change_password(in_new_password text)
      </title>
      <titleabbrev id="public.function.user-change-password-in-new-password-text-titleabbrev">
       user__change_password(in_new_password text)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>integer</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
DECLARE
	t_expires timestamp;
BEGIN
    SELECT now() + (value::numeric::text || &#39; days&#39;)::interval INTO t_expires
    FROM defaults WHERE setting_key = &#39;password_duration&#39;;

    UPDATE users SET notify_password = DEFAULT where username = SESSION_USER;

    IF t_expires IS NULL THEN
        t_expires := &#39;infinity&#39;;
    END IF;

    EXECUTE &#39;ALTER USER &#39; || quote_ident(SESSION_USER) || 
            &#39; with ENCRYPTED password &#39; || quote_literal(in_new_password) ||
                 &#39; VALID UNTIL &#39;|| quote_literal(t_expires);
    return 1;
END;
</programlisting>
      </para>
    </section>

<!-- Function user__check_my_expiration() -->
    <section id="public.function.user-check-my-expiration"
             xreflabel="publicuser__check_my_expiration()">
      <title id="public.function.user-check-my-expiration-title">
       user__check_my_expiration()
      </title>
      <titleabbrev id="public.function.user-check-my-expiration-titleabbrev">
       user__check_my_expiration()
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>interval</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
DECLARE
    outval interval;
BEGIN
    SELECT CASE WHEN isfinite(rolvaliduntil) is not true THEN &#39;1 year&#39;::interval
                ELSE rolvaliduntil - now() END AS expiration INTO outval 
    FROM pg_authid WHERE rolname = SESSION_USER;
    RETURN outval;
end;
</programlisting>
      </para>
    </section>

<!-- Function user__expires_soon() -->
    <section id="public.function.user-expires-soon"
             xreflabel="publicuser__expires_soon()">
      <title id="public.function.user-expires-soon-title">
       user__expires_soon()
      </title>
      <titleabbrev id="public.function.user-expires-soon-titleabbrev">
       user__expires_soon()
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>boolean</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
   SELECT user__check_my_expiration() &lt; &#39;1 week&#39;;
</programlisting>
      </para>
    </section>

<!-- Function user__get_all_users() -->
    <section id="public.function.user-get-all-users"
             xreflabel="publicuser__get_all_users()">
      <title id="public.function.user-get-all-users-title">
       user__get_all_users()
      </title>
      <titleabbrev id="public.function.user-get-all-users-titleabbrev">
       user__get_all_users()
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>SET OF user_listable</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
    
    select * from user_listable;
    
</programlisting>
      </para>
    </section>

<!-- Function user__get_preferences(in_user_id integer) -->
    <section id="public.function.user-get-preferences-in-user-id-integer"
             xreflabel="publicuser__get_preferences(in_user_id integer)">
      <title id="public.function.user-get-preferences-in-user-id-integer-title">
       user__get_preferences(in_user_id integer)
      </title>
      <titleabbrev id="public.function.user-get-preferences-in-user-id-integer-titleabbrev">
       user__get_preferences(in_user_id integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>SET OF user_preference</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
    
declare
    v_row user_preference;
BEGIN
    select * into v_row from user_preference where id = in_user_id;
    
    IF NOT FOUND THEN
    
        RAISE EXCEPTION &#39;Could not find user preferences for id %&#39;, in_user_id;
    ELSE
        return next v_row;
    END IF;
END;
</programlisting>
      </para>
    </section>

<!-- Function user__save_preferences(in_printer text, in_stylesheet text, in_language text, in_numberformat text, in_dateformat text) -->
    <section id="public.function.user-save-preferences-in-printer-text-in-stylesheet-text-in-language-text-in-numberformat-text-in-dateformat-text"
             xreflabel="publicuser__save_preferences(in_printer text, in_stylesheet text, in_language text, in_numberformat text, in_dateformat text)">
      <title id="public.function.user-save-preferences-in-printer-text-in-stylesheet-text-in-language-text-in-numberformat-text-in-dateformat-text-title">
       user__save_preferences(in_printer text, in_stylesheet text, in_language text, in_numberformat text, in_dateformat text)
      </title>
      <titleabbrev id="public.function.user-save-preferences-in-printer-text-in-stylesheet-text-in-language-text-in-numberformat-text-in-dateformat-text-titleabbrev">
       user__save_preferences(in_printer text, in_stylesheet text, in_language text, in_numberformat text, in_dateformat text)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>boolean</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
BEGIN
    UPDATE user_preference
    SET dateformat = in_dateformat,
        numberformat = in_numberformat,
        language = in_language,
        stylesheet = in_stylesheet,
        printer = in_printer
    WHERE id = (select id from users where username = SESSION_USER);
    RETURN FOUND;
END;
</programlisting>
      </para>
    </section>

<!-- Function voucher__delete(in_voucher_id integer) -->
    <section id="public.function.voucher-delete-in-voucher-id-integer"
             xreflabel="publicvoucher__delete(in_voucher_id integer)">
      <title id="public.function.voucher-delete-in-voucher-id-integer-title">
       voucher__delete(in_voucher_id integer)
      </title>
      <titleabbrev id="public.function.voucher-delete-in-voucher-id-integer-titleabbrev">
       voucher__delete(in_voucher_id integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>integer</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
DECLARE 
	voucher_row RECORD;
BEGIN
	SELECT * INTO voucher_row FROM voucher WHERE id = in_voucher_id;
	IF voucher_row.batch_class IN (1, 2, 5) THEN
		DELETE from acc_trans WHERE trans_id = voucher_row.trans_id;
		DELETE FROM ar WHERE id = voucher_row.trans_id;
		DELETE FROM ap WHERE id = voucher_row.trans_id;
		DELETE FROM gl WHERE id = voucher_row.trans_id;
		DELETE FROM voucher WHERE id = voucher_row.id;
		-- DELETE FROM transactions WHERE id = voucher_row.trans_id;
	ELSE 
		update ar set paid = amount + 
			(select sum(amount) from acc_trans 
			join chart ON (acc_trans.chart_id = chart.id)
			where link = &#39;AR&#39; AND trans_id = ar.id
				AND (voucher_id IS NULL 
				OR voucher_id &lt;&gt; voucher_row.id))
		where id in (select trans_id from acc_trans 
				where voucher_id = voucher_row.id);

		update ap set paid = amount - (select sum(amount) from acc_trans 
			join chart ON (acc_trans.chart_id = chart.id)
			where link = &#39;AP&#39; AND trans_id = ap.id
				AND (voucher_id IS NULL 
				OR voucher_id &lt;&gt; voucher_row.id))
		where id in (select trans_id from acc_trans 
				where voucher_id = voucher_row.id);

		DELETE FROM acc_trans where voucher_id = voucher_row.id;
	END IF;
	RETURN 1;
END;
</programlisting>
      </para>
    </section>

<!-- Function voucher_get_batch(in_batch_id integer) -->
    <section id="public.function.voucher-get-batch-in-batch-id-integer"
             xreflabel="publicvoucher_get_batch(in_batch_id integer)">
      <title id="public.function.voucher-get-batch-in-batch-id-integer-title">
       voucher_get_batch(in_batch_id integer)
      </title>
      <titleabbrev id="public.function.voucher-get-batch-in-batch-id-integer-titleabbrev">
       voucher_get_batch(in_batch_id integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>batch</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
DECLARE
	batch_out batch%ROWTYPE;
BEGIN
	SELECT * INTO batch_out FROM batch b WHERE b.id = in_batch_id;
	RETURN batch_out;
END;
</programlisting>
      </para>
    </section>

<!-- Function voucher_list(in_batch_id integer) -->
    <section id="public.function.voucher-list-in-batch-id-integer"
             xreflabel="publicvoucher_list(in_batch_id integer)">
      <title id="public.function.voucher-list-in-batch-id-integer-title">
       voucher_list(in_batch_id integer)
      </title>
      <titleabbrev id="public.function.voucher-list-in-batch-id-integer-titleabbrev">
       voucher_list(in_batch_id integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>SET OF voucher_list</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
declare voucher_item record;
BEGIN
    	FOR voucher_item IN
		SELECT v.id, a.invnumber, e.name, 
			v.batch_id, v.trans_id, 
			a.amount, a.transdate, &#39;Payable&#39;
		FROM voucher v
		JOIN ap a ON (v.trans_id = a.id)
		JOIN entity_credit_account eca 
			ON (eca.id = a.entity_credit_account)
		JOIN entity e ON (eca.entity_id = e.id)
		WHERE v.batch_id = in_batch_id 
			AND v.batch_class = (select id from batch_class 
					WHERE class = &#39;ap&#39;)
		UNION
		SELECT v.id, a.invnumber, e.name, 
			v.batch_id, v.trans_id, 
			a.amount, a.transdate, &#39;Receivable&#39;
		FROM voucher v
		JOIN ar a ON (v.trans_id = a.id)
		JOIN entity_credit_account eca 
			ON (eca.id = a.entity_credit_account)
		JOIN entity e ON (eca.entity_id = e.id)
		WHERE v.batch_id = in_batch_id 
			AND v.batch_class = (select id from batch_class 
					WHERE class = &#39;ar&#39;)
		UNION ALL
		-- TODO:  Add the class labels to the class table.
		SELECT v.id, a.source, 
			cr.meta_number || &#39;--&#39;  || co.legal_name , 
			v.batch_id, v.trans_id, 
			sum(CASE WHEN bc.class LIKE &#39;payment%&#39; THEN a.amount * -1
			     ELSE a.amount  END), a.transdate, 
			CASE WHEN bc.class = &#39;payment&#39; THEN &#39;Payment&#39;
			     WHEN bc.class = &#39;payment_reversal&#39; 
			     THEN &#39;Payment Reversal&#39;
			END
		FROM voucher v
		JOIN acc_trans a ON (v.id = a.voucher_id)
                JOIN batch_class bc ON (bc.id = v.batch_class)
		JOIN chart c ON (a.chart_id = c.id)
		JOIN ap ON (ap.id = a.trans_id)
		JOIN entity_credit_account cr 
			ON (ap.entity_credit_account = cr.id)
		JOIN company co ON (cr.entity_id = co.entity_id)
		WHERE v.batch_id = in_batch_id 
			AND a.voucher_id = v.id
			AND (bc.class like &#39;payment%&#39; AND c.link = &#39;AP&#39;)
		GROUP BY v.id, a.source, cr.meta_number, co.legal_name ,
                        v.batch_id, v.trans_id, a.transdate, bc.class

		UNION ALL
		SELECT v.id, a.source, a.memo, 
			v.batch_id, v.trans_id, 
			CASE WHEN bc.class LIKE &#39;receipt%&#39; THEN a.amount * -1
			     ELSE a.amount  END, a.transdate, 
			CASE WHEN bc.class = &#39;receipt&#39; THEN &#39;Receipt&#39;
			     WHEN bc.class = &#39;receipt_reversal&#39; 
			     THEN &#39;Receipt Reversal&#39;
			END
		FROM voucher v
		JOIN acc_trans a ON (v.trans_id = a.trans_id)
                JOIN batch_class bc ON (bc.id = v.batch_class)
		JOIN chart c ON (a.chart_id = c.id)
		JOIN ar ON (ar.id = a.trans_id)
		JOIN entity_credit_account cr 
			ON (ar.entity_credit_account = cr.id)
		JOIN company co ON (cr.entity_id = co.entity_id)
		WHERE v.batch_id = in_batch_id 
			AND a.voucher_id = v.id
			AND (bc.class like &#39;receipt%&#39; AND c.link = &#39;AR&#39;)
		UNION ALL
		SELECT v.id, g.reference, g.description, 
			v.batch_id, v.trans_id,
			sum(a.amount), g.transdate, &#39;gl&#39;
		FROM voucher v
		JOIN gl g ON (g.id = v.trans_id)
		JOIN acc_trans a ON (v.trans_id = a.trans_id)
		WHERE a.amount &gt; 0
			AND v.batch_id = in_batch_id
			AND v.batch_class IN (select id from batch_class 
					where class = &#39;gl&#39;)
		GROUP BY v.id, g.reference, g.description, v.batch_id, 
			v.trans_id, g.transdate
		ORDER BY 7, 1
	LOOP
		RETURN NEXT voucher_item;
	END LOOP;
END;
</programlisting>
      </para>
    </section>

  </chapter>

</book>

